
IDC-G4-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002538  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080025f8  080025f8  000125f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026f0  080026f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080026f0  080026f0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026f0  080026f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026f0  080026f0  000126f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026f4  080026f4  000126f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080026f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  2000000c  08002704  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08002704  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008417  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000169a  00000000  00000000  0002844b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  00029ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000628  00000000  00000000  0002a1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fbd5  00000000  00000000  0002a7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009162  00000000  00000000  0003a3a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005db3d  00000000  00000000  00043507  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a1044  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001660  00000000  00000000  000a1094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080025e0 	.word	0x080025e0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080025e0 	.word	0x080025e0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b092      	sub	sp, #72	; 0x48
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fa3b 	bl	80006a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f826 	bl	800027a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f8db 	bl	80003e8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000232:	f000 f879 	bl	8000328 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000236:	f000 f8a7 	bl	8000388 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t rx_buf[16] = {0}; // 接收缓冲
 800023a:	2338      	movs	r3, #56	; 0x38
 800023c:	18fb      	adds	r3, r7, r3
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	3304      	adds	r3, #4
 8000244:	220c      	movs	r2, #12
 8000246:	2100      	movs	r1, #0
 8000248:	0018      	movs	r0, r3
 800024a:	f002 f9c1 	bl	80025d0 <memset>

  TM1638_Handler_t Handler;

  TM1638_Platform_Init(&Handler);
 800024e:	003b      	movs	r3, r7
 8000250:	0018      	movs	r0, r3
 8000252:	f002 f963 	bl	800251c <TM1638_Platform_Init>
  TM1638_Init(&Handler, TM1638DisplayTypeComAnode);
 8000256:	003b      	movs	r3, r7
 8000258:	2101      	movs	r1, #1
 800025a:	0018      	movs	r0, r3
 800025c:	f001 fe81 	bl	8001f62 <TM1638_Init>
  TM1638_ConfigDisplay(&Handler, 4, TM1638DisplayStateON);
 8000260:	003b      	movs	r3, r7
 8000262:	2201      	movs	r2, #1
 8000264:	2104      	movs	r1, #4
 8000266:	0018      	movs	r0, r3
 8000268:	f001 feb3 	bl	8001fd2 <TM1638_ConfigDisplay>


	  */
	//  SEGGER_RTT_WriteString(0, "1234567: ");
	 // HAL_Delay(1000);
	  TM1638_SetSingleDigit_HEX(&Handler, 8 , 2);
 800026c:	003b      	movs	r3, r7
 800026e:	2202      	movs	r2, #2
 8000270:	2108      	movs	r1, #8
 8000272:	0018      	movs	r0, r3
 8000274:	f001 fff0 	bl	8002258 <TM1638_SetSingleDigit_HEX>
 8000278:	e7f8      	b.n	800026c <main+0x4c>

0800027a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800027a:	b590      	push	{r4, r7, lr}
 800027c:	b095      	sub	sp, #84	; 0x54
 800027e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000280:	2420      	movs	r4, #32
 8000282:	193b      	adds	r3, r7, r4
 8000284:	0018      	movs	r0, r3
 8000286:	2330      	movs	r3, #48	; 0x30
 8000288:	001a      	movs	r2, r3
 800028a:	2100      	movs	r1, #0
 800028c:	f002 f9a0 	bl	80025d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000290:	2310      	movs	r3, #16
 8000292:	18fb      	adds	r3, r7, r3
 8000294:	0018      	movs	r0, r3
 8000296:	2310      	movs	r3, #16
 8000298:	001a      	movs	r2, r3
 800029a:	2100      	movs	r1, #0
 800029c:	f002 f998 	bl	80025d0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002a0:	003b      	movs	r3, r7
 80002a2:	0018      	movs	r0, r3
 80002a4:	2310      	movs	r3, #16
 80002a6:	001a      	movs	r2, r3
 80002a8:	2100      	movs	r1, #0
 80002aa:	f002 f991 	bl	80025d0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ae:	0021      	movs	r1, r4
 80002b0:	187b      	adds	r3, r7, r1
 80002b2:	2202      	movs	r2, #2
 80002b4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	2201      	movs	r2, #1
 80002ba:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	2210      	movs	r2, #16
 80002c0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2200      	movs	r2, #0
 80002c6:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	0018      	movs	r0, r3
 80002cc:	f000 fcaa 	bl	8000c24 <HAL_RCC_OscConfig>
 80002d0:	1e03      	subs	r3, r0, #0
 80002d2:	d001      	beq.n	80002d8 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002d4:	f000 f8ec 	bl	80004b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d8:	2110      	movs	r1, #16
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	2207      	movs	r2, #7
 80002de:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	2200      	movs	r2, #0
 80002e4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	2200      	movs	r2, #0
 80002ea:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	2200      	movs	r2, #0
 80002f0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2100      	movs	r1, #0
 80002f6:	0018      	movs	r0, r3
 80002f8:	f000 ffae 	bl	8001258 <HAL_RCC_ClockConfig>
 80002fc:	1e03      	subs	r3, r0, #0
 80002fe:	d001      	beq.n	8000304 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000300:	f000 f8d6 	bl	80004b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000304:	003b      	movs	r3, r7
 8000306:	2201      	movs	r2, #1
 8000308:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800030a:	003b      	movs	r3, r7
 800030c:	2200      	movs	r2, #0
 800030e:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000310:	003b      	movs	r3, r7
 8000312:	0018      	movs	r0, r3
 8000314:	f001 f8e4 	bl	80014e0 <HAL_RCCEx_PeriphCLKConfig>
 8000318:	1e03      	subs	r3, r0, #0
 800031a:	d001      	beq.n	8000320 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800031c:	f000 f8c8 	bl	80004b0 <Error_Handler>
  }
}
 8000320:	46c0      	nop			; (mov r8, r8)
 8000322:	46bd      	mov	sp, r7
 8000324:	b015      	add	sp, #84	; 0x54
 8000326:	bd90      	pop	{r4, r7, pc}

08000328 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800032c:	4b14      	ldr	r3, [pc, #80]	; (8000380 <MX_USART1_UART_Init+0x58>)
 800032e:	4a15      	ldr	r2, [pc, #84]	; (8000384 <MX_USART1_UART_Init+0x5c>)
 8000330:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000332:	4b13      	ldr	r3, [pc, #76]	; (8000380 <MX_USART1_UART_Init+0x58>)
 8000334:	2296      	movs	r2, #150	; 0x96
 8000336:	0192      	lsls	r2, r2, #6
 8000338:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800033a:	4b11      	ldr	r3, [pc, #68]	; (8000380 <MX_USART1_UART_Init+0x58>)
 800033c:	2200      	movs	r2, #0
 800033e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000340:	4b0f      	ldr	r3, [pc, #60]	; (8000380 <MX_USART1_UART_Init+0x58>)
 8000342:	2200      	movs	r2, #0
 8000344:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000346:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <MX_USART1_UART_Init+0x58>)
 8000348:	2200      	movs	r2, #0
 800034a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800034c:	4b0c      	ldr	r3, [pc, #48]	; (8000380 <MX_USART1_UART_Init+0x58>)
 800034e:	220c      	movs	r2, #12
 8000350:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000352:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <MX_USART1_UART_Init+0x58>)
 8000354:	2200      	movs	r2, #0
 8000356:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000358:	4b09      	ldr	r3, [pc, #36]	; (8000380 <MX_USART1_UART_Init+0x58>)
 800035a:	2200      	movs	r2, #0
 800035c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800035e:	4b08      	ldr	r3, [pc, #32]	; (8000380 <MX_USART1_UART_Init+0x58>)
 8000360:	2200      	movs	r2, #0
 8000362:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000364:	4b06      	ldr	r3, [pc, #24]	; (8000380 <MX_USART1_UART_Init+0x58>)
 8000366:	2200      	movs	r2, #0
 8000368:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800036a:	4b05      	ldr	r3, [pc, #20]	; (8000380 <MX_USART1_UART_Init+0x58>)
 800036c:	0018      	movs	r0, r3
 800036e:	f001 f985 	bl	800167c <HAL_UART_Init>
 8000372:	1e03      	subs	r3, r0, #0
 8000374:	d001      	beq.n	800037a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000376:	f000 f89b 	bl	80004b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800037a:	46c0      	nop			; (mov r8, r8)
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	20000028 	.word	0x20000028
 8000384:	40013800 	.word	0x40013800

08000388 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800038c:	4b14      	ldr	r3, [pc, #80]	; (80003e0 <MX_USART2_UART_Init+0x58>)
 800038e:	4a15      	ldr	r2, [pc, #84]	; (80003e4 <MX_USART2_UART_Init+0x5c>)
 8000390:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000392:	4b13      	ldr	r3, [pc, #76]	; (80003e0 <MX_USART2_UART_Init+0x58>)
 8000394:	2296      	movs	r2, #150	; 0x96
 8000396:	0212      	lsls	r2, r2, #8
 8000398:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800039a:	4b11      	ldr	r3, [pc, #68]	; (80003e0 <MX_USART2_UART_Init+0x58>)
 800039c:	2200      	movs	r2, #0
 800039e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003a0:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <MX_USART2_UART_Init+0x58>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003a6:	4b0e      	ldr	r3, [pc, #56]	; (80003e0 <MX_USART2_UART_Init+0x58>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003ac:	4b0c      	ldr	r3, [pc, #48]	; (80003e0 <MX_USART2_UART_Init+0x58>)
 80003ae:	220c      	movs	r2, #12
 80003b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003b2:	4b0b      	ldr	r3, [pc, #44]	; (80003e0 <MX_USART2_UART_Init+0x58>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003b8:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <MX_USART2_UART_Init+0x58>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003be:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <MX_USART2_UART_Init+0x58>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003c4:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <MX_USART2_UART_Init+0x58>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003ca:	4b05      	ldr	r3, [pc, #20]	; (80003e0 <MX_USART2_UART_Init+0x58>)
 80003cc:	0018      	movs	r0, r3
 80003ce:	f001 f955 	bl	800167c <HAL_UART_Init>
 80003d2:	1e03      	subs	r3, r0, #0
 80003d4:	d001      	beq.n	80003da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003d6:	f000 f86b 	bl	80004b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003da:	46c0      	nop			; (mov r8, r8)
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	200000b0 	.word	0x200000b0
 80003e4:	40004400 	.word	0x40004400

080003e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e8:	b590      	push	{r4, r7, lr}
 80003ea:	b08b      	sub	sp, #44	; 0x2c
 80003ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ee:	2414      	movs	r4, #20
 80003f0:	193b      	adds	r3, r7, r4
 80003f2:	0018      	movs	r0, r3
 80003f4:	2314      	movs	r3, #20
 80003f6:	001a      	movs	r2, r3
 80003f8:	2100      	movs	r1, #0
 80003fa:	f002 f8e9 	bl	80025d0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003fe:	4b2a      	ldr	r3, [pc, #168]	; (80004a8 <MX_GPIO_Init+0xc0>)
 8000400:	695a      	ldr	r2, [r3, #20]
 8000402:	4b29      	ldr	r3, [pc, #164]	; (80004a8 <MX_GPIO_Init+0xc0>)
 8000404:	2180      	movs	r1, #128	; 0x80
 8000406:	0309      	lsls	r1, r1, #12
 8000408:	430a      	orrs	r2, r1
 800040a:	615a      	str	r2, [r3, #20]
 800040c:	4b26      	ldr	r3, [pc, #152]	; (80004a8 <MX_GPIO_Init+0xc0>)
 800040e:	695a      	ldr	r2, [r3, #20]
 8000410:	2380      	movs	r3, #128	; 0x80
 8000412:	031b      	lsls	r3, r3, #12
 8000414:	4013      	ands	r3, r2
 8000416:	613b      	str	r3, [r7, #16]
 8000418:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800041a:	4b23      	ldr	r3, [pc, #140]	; (80004a8 <MX_GPIO_Init+0xc0>)
 800041c:	695a      	ldr	r2, [r3, #20]
 800041e:	4b22      	ldr	r3, [pc, #136]	; (80004a8 <MX_GPIO_Init+0xc0>)
 8000420:	2180      	movs	r1, #128	; 0x80
 8000422:	03c9      	lsls	r1, r1, #15
 8000424:	430a      	orrs	r2, r1
 8000426:	615a      	str	r2, [r3, #20]
 8000428:	4b1f      	ldr	r3, [pc, #124]	; (80004a8 <MX_GPIO_Init+0xc0>)
 800042a:	695a      	ldr	r2, [r3, #20]
 800042c:	2380      	movs	r3, #128	; 0x80
 800042e:	03db      	lsls	r3, r3, #15
 8000430:	4013      	ands	r3, r2
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000436:	4b1c      	ldr	r3, [pc, #112]	; (80004a8 <MX_GPIO_Init+0xc0>)
 8000438:	695a      	ldr	r2, [r3, #20]
 800043a:	4b1b      	ldr	r3, [pc, #108]	; (80004a8 <MX_GPIO_Init+0xc0>)
 800043c:	2180      	movs	r1, #128	; 0x80
 800043e:	0289      	lsls	r1, r1, #10
 8000440:	430a      	orrs	r2, r1
 8000442:	615a      	str	r2, [r3, #20]
 8000444:	4b18      	ldr	r3, [pc, #96]	; (80004a8 <MX_GPIO_Init+0xc0>)
 8000446:	695a      	ldr	r2, [r3, #20]
 8000448:	2380      	movs	r3, #128	; 0x80
 800044a:	029b      	lsls	r3, r3, #10
 800044c:	4013      	ands	r3, r2
 800044e:	60bb      	str	r3, [r7, #8]
 8000450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000452:	4b15      	ldr	r3, [pc, #84]	; (80004a8 <MX_GPIO_Init+0xc0>)
 8000454:	695a      	ldr	r2, [r3, #20]
 8000456:	4b14      	ldr	r3, [pc, #80]	; (80004a8 <MX_GPIO_Init+0xc0>)
 8000458:	2180      	movs	r1, #128	; 0x80
 800045a:	02c9      	lsls	r1, r1, #11
 800045c:	430a      	orrs	r2, r1
 800045e:	615a      	str	r2, [r3, #20]
 8000460:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <MX_GPIO_Init+0xc0>)
 8000462:	695a      	ldr	r2, [r3, #20]
 8000464:	2380      	movs	r3, #128	; 0x80
 8000466:	02db      	lsls	r3, r3, #11
 8000468:	4013      	ands	r3, r2
 800046a:	607b      	str	r3, [r7, #4]
 800046c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800046e:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <MX_GPIO_Init+0xc4>)
 8000470:	2200      	movs	r2, #0
 8000472:	2170      	movs	r1, #112	; 0x70
 8000474:	0018      	movs	r0, r3
 8000476:	f000 fbb8 	bl	8000bea <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800047a:	0021      	movs	r1, r4
 800047c:	187b      	adds	r3, r7, r1
 800047e:	2270      	movs	r2, #112	; 0x70
 8000480:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000482:	187b      	adds	r3, r7, r1
 8000484:	2201      	movs	r2, #1
 8000486:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000488:	187b      	adds	r3, r7, r1
 800048a:	2200      	movs	r2, #0
 800048c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048e:	187b      	adds	r3, r7, r1
 8000490:	2200      	movs	r2, #0
 8000492:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000494:	187b      	adds	r3, r7, r1
 8000496:	4a05      	ldr	r2, [pc, #20]	; (80004ac <MX_GPIO_Init+0xc4>)
 8000498:	0019      	movs	r1, r3
 800049a:	0010      	movs	r0, r2
 800049c:	f000 fa18 	bl	80008d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004a0:	46c0      	nop			; (mov r8, r8)
 80004a2:	46bd      	mov	sp, r7
 80004a4:	b00b      	add	sp, #44	; 0x2c
 80004a6:	bd90      	pop	{r4, r7, pc}
 80004a8:	40021000 	.word	0x40021000
 80004ac:	48000400 	.word	0x48000400

080004b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b4:	b672      	cpsid	i
}
 80004b6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <Error_Handler+0x8>
	...

080004bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004c2:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <HAL_MspInit+0x44>)
 80004c4:	699a      	ldr	r2, [r3, #24]
 80004c6:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <HAL_MspInit+0x44>)
 80004c8:	2101      	movs	r1, #1
 80004ca:	430a      	orrs	r2, r1
 80004cc:	619a      	str	r2, [r3, #24]
 80004ce:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <HAL_MspInit+0x44>)
 80004d0:	699b      	ldr	r3, [r3, #24]
 80004d2:	2201      	movs	r2, #1
 80004d4:	4013      	ands	r3, r2
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004da:	4b09      	ldr	r3, [pc, #36]	; (8000500 <HAL_MspInit+0x44>)
 80004dc:	69da      	ldr	r2, [r3, #28]
 80004de:	4b08      	ldr	r3, [pc, #32]	; (8000500 <HAL_MspInit+0x44>)
 80004e0:	2180      	movs	r1, #128	; 0x80
 80004e2:	0549      	lsls	r1, r1, #21
 80004e4:	430a      	orrs	r2, r1
 80004e6:	61da      	str	r2, [r3, #28]
 80004e8:	4b05      	ldr	r3, [pc, #20]	; (8000500 <HAL_MspInit+0x44>)
 80004ea:	69da      	ldr	r2, [r3, #28]
 80004ec:	2380      	movs	r3, #128	; 0x80
 80004ee:	055b      	lsls	r3, r3, #21
 80004f0:	4013      	ands	r3, r2
 80004f2:	603b      	str	r3, [r7, #0]
 80004f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	46bd      	mov	sp, r7
 80004fa:	b002      	add	sp, #8
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	40021000 	.word	0x40021000

08000504 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000504:	b590      	push	{r4, r7, lr}
 8000506:	b08d      	sub	sp, #52	; 0x34
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050c:	241c      	movs	r4, #28
 800050e:	193b      	adds	r3, r7, r4
 8000510:	0018      	movs	r0, r3
 8000512:	2314      	movs	r3, #20
 8000514:	001a      	movs	r2, r3
 8000516:	2100      	movs	r1, #0
 8000518:	f002 f85a 	bl	80025d0 <memset>
  if(huart->Instance==USART1)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a39      	ldr	r2, [pc, #228]	; (8000608 <HAL_UART_MspInit+0x104>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d134      	bne.n	8000590 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000526:	4b39      	ldr	r3, [pc, #228]	; (800060c <HAL_UART_MspInit+0x108>)
 8000528:	699a      	ldr	r2, [r3, #24]
 800052a:	4b38      	ldr	r3, [pc, #224]	; (800060c <HAL_UART_MspInit+0x108>)
 800052c:	2180      	movs	r1, #128	; 0x80
 800052e:	01c9      	lsls	r1, r1, #7
 8000530:	430a      	orrs	r2, r1
 8000532:	619a      	str	r2, [r3, #24]
 8000534:	4b35      	ldr	r3, [pc, #212]	; (800060c <HAL_UART_MspInit+0x108>)
 8000536:	699a      	ldr	r2, [r3, #24]
 8000538:	2380      	movs	r3, #128	; 0x80
 800053a:	01db      	lsls	r3, r3, #7
 800053c:	4013      	ands	r3, r2
 800053e:	61bb      	str	r3, [r7, #24]
 8000540:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	4b32      	ldr	r3, [pc, #200]	; (800060c <HAL_UART_MspInit+0x108>)
 8000544:	695a      	ldr	r2, [r3, #20]
 8000546:	4b31      	ldr	r3, [pc, #196]	; (800060c <HAL_UART_MspInit+0x108>)
 8000548:	2180      	movs	r1, #128	; 0x80
 800054a:	0289      	lsls	r1, r1, #10
 800054c:	430a      	orrs	r2, r1
 800054e:	615a      	str	r2, [r3, #20]
 8000550:	4b2e      	ldr	r3, [pc, #184]	; (800060c <HAL_UART_MspInit+0x108>)
 8000552:	695a      	ldr	r2, [r3, #20]
 8000554:	2380      	movs	r3, #128	; 0x80
 8000556:	029b      	lsls	r3, r3, #10
 8000558:	4013      	ands	r3, r2
 800055a:	617b      	str	r3, [r7, #20]
 800055c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800055e:	193b      	adds	r3, r7, r4
 8000560:	22c0      	movs	r2, #192	; 0xc0
 8000562:	00d2      	lsls	r2, r2, #3
 8000564:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000566:	0021      	movs	r1, r4
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2202      	movs	r2, #2
 800056c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056e:	187b      	adds	r3, r7, r1
 8000570:	2200      	movs	r2, #0
 8000572:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000574:	187b      	adds	r3, r7, r1
 8000576:	2203      	movs	r2, #3
 8000578:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800057a:	187b      	adds	r3, r7, r1
 800057c:	2201      	movs	r2, #1
 800057e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000580:	187a      	adds	r2, r7, r1
 8000582:	2390      	movs	r3, #144	; 0x90
 8000584:	05db      	lsls	r3, r3, #23
 8000586:	0011      	movs	r1, r2
 8000588:	0018      	movs	r0, r3
 800058a:	f000 f9a1 	bl	80008d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800058e:	e037      	b.n	8000600 <HAL_UART_MspInit+0xfc>
  else if(huart->Instance==USART2)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a1e      	ldr	r2, [pc, #120]	; (8000610 <HAL_UART_MspInit+0x10c>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d132      	bne.n	8000600 <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART2_CLK_ENABLE();
 800059a:	4b1c      	ldr	r3, [pc, #112]	; (800060c <HAL_UART_MspInit+0x108>)
 800059c:	69da      	ldr	r2, [r3, #28]
 800059e:	4b1b      	ldr	r3, [pc, #108]	; (800060c <HAL_UART_MspInit+0x108>)
 80005a0:	2180      	movs	r1, #128	; 0x80
 80005a2:	0289      	lsls	r1, r1, #10
 80005a4:	430a      	orrs	r2, r1
 80005a6:	61da      	str	r2, [r3, #28]
 80005a8:	4b18      	ldr	r3, [pc, #96]	; (800060c <HAL_UART_MspInit+0x108>)
 80005aa:	69da      	ldr	r2, [r3, #28]
 80005ac:	2380      	movs	r3, #128	; 0x80
 80005ae:	029b      	lsls	r3, r3, #10
 80005b0:	4013      	ands	r3, r2
 80005b2:	613b      	str	r3, [r7, #16]
 80005b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	4b15      	ldr	r3, [pc, #84]	; (800060c <HAL_UART_MspInit+0x108>)
 80005b8:	695a      	ldr	r2, [r3, #20]
 80005ba:	4b14      	ldr	r3, [pc, #80]	; (800060c <HAL_UART_MspInit+0x108>)
 80005bc:	2180      	movs	r1, #128	; 0x80
 80005be:	0289      	lsls	r1, r1, #10
 80005c0:	430a      	orrs	r2, r1
 80005c2:	615a      	str	r2, [r3, #20]
 80005c4:	4b11      	ldr	r3, [pc, #68]	; (800060c <HAL_UART_MspInit+0x108>)
 80005c6:	695a      	ldr	r2, [r3, #20]
 80005c8:	2380      	movs	r3, #128	; 0x80
 80005ca:	029b      	lsls	r3, r3, #10
 80005cc:	4013      	ands	r3, r2
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80005d2:	211c      	movs	r1, #28
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	220c      	movs	r2, #12
 80005d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	2202      	movs	r2, #2
 80005de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2203      	movs	r2, #3
 80005ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2201      	movs	r2, #1
 80005f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f2:	187a      	adds	r2, r7, r1
 80005f4:	2390      	movs	r3, #144	; 0x90
 80005f6:	05db      	lsls	r3, r3, #23
 80005f8:	0011      	movs	r1, r2
 80005fa:	0018      	movs	r0, r3
 80005fc:	f000 f968 	bl	80008d0 <HAL_GPIO_Init>
}
 8000600:	46c0      	nop			; (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	b00d      	add	sp, #52	; 0x34
 8000606:	bd90      	pop	{r4, r7, pc}
 8000608:	40013800 	.word	0x40013800
 800060c:	40021000 	.word	0x40021000
 8000610:	40004400 	.word	0x40004400

08000614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000618:	e7fe      	b.n	8000618 <NMI_Handler+0x4>

0800061a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800061a:	b580      	push	{r7, lr}
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800061e:	e7fe      	b.n	800061e <HardFault_Handler+0x4>

08000620 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000624:	46c0      	nop			; (mov r8, r8)
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000638:	f000 f87a 	bl	8000730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800063c:	46c0      	nop			; (mov r8, r8)
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}

08000642 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000642:	b580      	push	{r7, lr}
 8000644:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800064c:	480d      	ldr	r0, [pc, #52]	; (8000684 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800064e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000650:	f7ff fff7 	bl	8000642 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000654:	480c      	ldr	r0, [pc, #48]	; (8000688 <LoopForever+0x6>)
  ldr r1, =_edata
 8000656:	490d      	ldr	r1, [pc, #52]	; (800068c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000658:	4a0d      	ldr	r2, [pc, #52]	; (8000690 <LoopForever+0xe>)
  movs r3, #0
 800065a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800065c:	e002      	b.n	8000664 <LoopCopyDataInit>

0800065e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800065e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000662:	3304      	adds	r3, #4

08000664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000668:	d3f9      	bcc.n	800065e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800066a:	4a0a      	ldr	r2, [pc, #40]	; (8000694 <LoopForever+0x12>)
  ldr r4, =_ebss
 800066c:	4c0a      	ldr	r4, [pc, #40]	; (8000698 <LoopForever+0x16>)
  movs r3, #0
 800066e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000670:	e001      	b.n	8000676 <LoopFillZerobss>

08000672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000674:	3204      	adds	r2, #4

08000676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000678:	d3fb      	bcc.n	8000672 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800067a:	f001 ff85 	bl	8002588 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800067e:	f7ff fdcf 	bl	8000220 <main>

08000682 <LoopForever>:

LoopForever:
    b LoopForever
 8000682:	e7fe      	b.n	8000682 <LoopForever>
  ldr   r0, =_estack
 8000684:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800068c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000690:	080026f8 	.word	0x080026f8
  ldr r2, =_sbss
 8000694:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000698:	2000013c 	.word	0x2000013c

0800069c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800069c:	e7fe      	b.n	800069c <ADC1_IRQHandler>
	...

080006a0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006a4:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <HAL_Init+0x24>)
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <HAL_Init+0x24>)
 80006aa:	2110      	movs	r1, #16
 80006ac:	430a      	orrs	r2, r1
 80006ae:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80006b0:	2003      	movs	r0, #3
 80006b2:	f000 f809 	bl	80006c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006b6:	f7ff ff01 	bl	80004bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006ba:	2300      	movs	r3, #0
}
 80006bc:	0018      	movs	r0, r3
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	40022000 	.word	0x40022000

080006c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006c8:	b590      	push	{r4, r7, lr}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006d0:	4b14      	ldr	r3, [pc, #80]	; (8000724 <HAL_InitTick+0x5c>)
 80006d2:	681c      	ldr	r4, [r3, #0]
 80006d4:	4b14      	ldr	r3, [pc, #80]	; (8000728 <HAL_InitTick+0x60>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	0019      	movs	r1, r3
 80006da:	23fa      	movs	r3, #250	; 0xfa
 80006dc:	0098      	lsls	r0, r3, #2
 80006de:	f7ff fd13 	bl	8000108 <__udivsi3>
 80006e2:	0003      	movs	r3, r0
 80006e4:	0019      	movs	r1, r3
 80006e6:	0020      	movs	r0, r4
 80006e8:	f7ff fd0e 	bl	8000108 <__udivsi3>
 80006ec:	0003      	movs	r3, r0
 80006ee:	0018      	movs	r0, r3
 80006f0:	f000 f8e1 	bl	80008b6 <HAL_SYSTICK_Config>
 80006f4:	1e03      	subs	r3, r0, #0
 80006f6:	d001      	beq.n	80006fc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80006f8:	2301      	movs	r3, #1
 80006fa:	e00f      	b.n	800071c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2b03      	cmp	r3, #3
 8000700:	d80b      	bhi.n	800071a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	2301      	movs	r3, #1
 8000706:	425b      	negs	r3, r3
 8000708:	2200      	movs	r2, #0
 800070a:	0018      	movs	r0, r3
 800070c:	f000 f8be 	bl	800088c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <HAL_InitTick+0x64>)
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000716:	2300      	movs	r3, #0
 8000718:	e000      	b.n	800071c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800071a:	2301      	movs	r3, #1
}
 800071c:	0018      	movs	r0, r3
 800071e:	46bd      	mov	sp, r7
 8000720:	b003      	add	sp, #12
 8000722:	bd90      	pop	{r4, r7, pc}
 8000724:	20000000 	.word	0x20000000
 8000728:	20000008 	.word	0x20000008
 800072c:	20000004 	.word	0x20000004

08000730 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000734:	4b05      	ldr	r3, [pc, #20]	; (800074c <HAL_IncTick+0x1c>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	001a      	movs	r2, r3
 800073a:	4b05      	ldr	r3, [pc, #20]	; (8000750 <HAL_IncTick+0x20>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	18d2      	adds	r2, r2, r3
 8000740:	4b03      	ldr	r3, [pc, #12]	; (8000750 <HAL_IncTick+0x20>)
 8000742:	601a      	str	r2, [r3, #0]
}
 8000744:	46c0      	nop			; (mov r8, r8)
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	20000008 	.word	0x20000008
 8000750:	20000138 	.word	0x20000138

08000754 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  return uwTick;
 8000758:	4b02      	ldr	r3, [pc, #8]	; (8000764 <HAL_GetTick+0x10>)
 800075a:	681b      	ldr	r3, [r3, #0]
}
 800075c:	0018      	movs	r0, r3
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	20000138 	.word	0x20000138

08000768 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000768:	b590      	push	{r4, r7, lr}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	0002      	movs	r2, r0
 8000770:	6039      	str	r1, [r7, #0]
 8000772:	1dfb      	adds	r3, r7, #7
 8000774:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000776:	1dfb      	adds	r3, r7, #7
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b7f      	cmp	r3, #127	; 0x7f
 800077c:	d828      	bhi.n	80007d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800077e:	4a2f      	ldr	r2, [pc, #188]	; (800083c <__NVIC_SetPriority+0xd4>)
 8000780:	1dfb      	adds	r3, r7, #7
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	b25b      	sxtb	r3, r3
 8000786:	089b      	lsrs	r3, r3, #2
 8000788:	33c0      	adds	r3, #192	; 0xc0
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	589b      	ldr	r3, [r3, r2]
 800078e:	1dfa      	adds	r2, r7, #7
 8000790:	7812      	ldrb	r2, [r2, #0]
 8000792:	0011      	movs	r1, r2
 8000794:	2203      	movs	r2, #3
 8000796:	400a      	ands	r2, r1
 8000798:	00d2      	lsls	r2, r2, #3
 800079a:	21ff      	movs	r1, #255	; 0xff
 800079c:	4091      	lsls	r1, r2
 800079e:	000a      	movs	r2, r1
 80007a0:	43d2      	mvns	r2, r2
 80007a2:	401a      	ands	r2, r3
 80007a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	019b      	lsls	r3, r3, #6
 80007aa:	22ff      	movs	r2, #255	; 0xff
 80007ac:	401a      	ands	r2, r3
 80007ae:	1dfb      	adds	r3, r7, #7
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	0018      	movs	r0, r3
 80007b4:	2303      	movs	r3, #3
 80007b6:	4003      	ands	r3, r0
 80007b8:	00db      	lsls	r3, r3, #3
 80007ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007bc:	481f      	ldr	r0, [pc, #124]	; (800083c <__NVIC_SetPriority+0xd4>)
 80007be:	1dfb      	adds	r3, r7, #7
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	b25b      	sxtb	r3, r3
 80007c4:	089b      	lsrs	r3, r3, #2
 80007c6:	430a      	orrs	r2, r1
 80007c8:	33c0      	adds	r3, #192	; 0xc0
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007ce:	e031      	b.n	8000834 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007d0:	4a1b      	ldr	r2, [pc, #108]	; (8000840 <__NVIC_SetPriority+0xd8>)
 80007d2:	1dfb      	adds	r3, r7, #7
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	0019      	movs	r1, r3
 80007d8:	230f      	movs	r3, #15
 80007da:	400b      	ands	r3, r1
 80007dc:	3b08      	subs	r3, #8
 80007de:	089b      	lsrs	r3, r3, #2
 80007e0:	3306      	adds	r3, #6
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	18d3      	adds	r3, r2, r3
 80007e6:	3304      	adds	r3, #4
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	1dfa      	adds	r2, r7, #7
 80007ec:	7812      	ldrb	r2, [r2, #0]
 80007ee:	0011      	movs	r1, r2
 80007f0:	2203      	movs	r2, #3
 80007f2:	400a      	ands	r2, r1
 80007f4:	00d2      	lsls	r2, r2, #3
 80007f6:	21ff      	movs	r1, #255	; 0xff
 80007f8:	4091      	lsls	r1, r2
 80007fa:	000a      	movs	r2, r1
 80007fc:	43d2      	mvns	r2, r2
 80007fe:	401a      	ands	r2, r3
 8000800:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	019b      	lsls	r3, r3, #6
 8000806:	22ff      	movs	r2, #255	; 0xff
 8000808:	401a      	ands	r2, r3
 800080a:	1dfb      	adds	r3, r7, #7
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	0018      	movs	r0, r3
 8000810:	2303      	movs	r3, #3
 8000812:	4003      	ands	r3, r0
 8000814:	00db      	lsls	r3, r3, #3
 8000816:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000818:	4809      	ldr	r0, [pc, #36]	; (8000840 <__NVIC_SetPriority+0xd8>)
 800081a:	1dfb      	adds	r3, r7, #7
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	001c      	movs	r4, r3
 8000820:	230f      	movs	r3, #15
 8000822:	4023      	ands	r3, r4
 8000824:	3b08      	subs	r3, #8
 8000826:	089b      	lsrs	r3, r3, #2
 8000828:	430a      	orrs	r2, r1
 800082a:	3306      	adds	r3, #6
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	18c3      	adds	r3, r0, r3
 8000830:	3304      	adds	r3, #4
 8000832:	601a      	str	r2, [r3, #0]
}
 8000834:	46c0      	nop			; (mov r8, r8)
 8000836:	46bd      	mov	sp, r7
 8000838:	b003      	add	sp, #12
 800083a:	bd90      	pop	{r4, r7, pc}
 800083c:	e000e100 	.word	0xe000e100
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	1e5a      	subs	r2, r3, #1
 8000850:	2380      	movs	r3, #128	; 0x80
 8000852:	045b      	lsls	r3, r3, #17
 8000854:	429a      	cmp	r2, r3
 8000856:	d301      	bcc.n	800085c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000858:	2301      	movs	r3, #1
 800085a:	e010      	b.n	800087e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <SysTick_Config+0x44>)
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	3a01      	subs	r2, #1
 8000862:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000864:	2301      	movs	r3, #1
 8000866:	425b      	negs	r3, r3
 8000868:	2103      	movs	r1, #3
 800086a:	0018      	movs	r0, r3
 800086c:	f7ff ff7c 	bl	8000768 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <SysTick_Config+0x44>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000876:	4b04      	ldr	r3, [pc, #16]	; (8000888 <SysTick_Config+0x44>)
 8000878:	2207      	movs	r2, #7
 800087a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800087c:	2300      	movs	r3, #0
}
 800087e:	0018      	movs	r0, r3
 8000880:	46bd      	mov	sp, r7
 8000882:	b002      	add	sp, #8
 8000884:	bd80      	pop	{r7, pc}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	e000e010 	.word	0xe000e010

0800088c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	60b9      	str	r1, [r7, #8]
 8000894:	607a      	str	r2, [r7, #4]
 8000896:	210f      	movs	r1, #15
 8000898:	187b      	adds	r3, r7, r1
 800089a:	1c02      	adds	r2, r0, #0
 800089c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800089e:	68ba      	ldr	r2, [r7, #8]
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	b25b      	sxtb	r3, r3
 80008a6:	0011      	movs	r1, r2
 80008a8:	0018      	movs	r0, r3
 80008aa:	f7ff ff5d 	bl	8000768 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	46bd      	mov	sp, r7
 80008b2:	b004      	add	sp, #16
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b082      	sub	sp, #8
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	0018      	movs	r0, r3
 80008c2:	f7ff ffbf 	bl	8000844 <SysTick_Config>
 80008c6:	0003      	movs	r3, r0
}
 80008c8:	0018      	movs	r0, r3
 80008ca:	46bd      	mov	sp, r7
 80008cc:	b002      	add	sp, #8
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008de:	e14f      	b.n	8000b80 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2101      	movs	r1, #1
 80008e6:	697a      	ldr	r2, [r7, #20]
 80008e8:	4091      	lsls	r1, r2
 80008ea:	000a      	movs	r2, r1
 80008ec:	4013      	ands	r3, r2
 80008ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d100      	bne.n	80008f8 <HAL_GPIO_Init+0x28>
 80008f6:	e140      	b.n	8000b7a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	2203      	movs	r2, #3
 80008fe:	4013      	ands	r3, r2
 8000900:	2b01      	cmp	r3, #1
 8000902:	d005      	beq.n	8000910 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	2203      	movs	r2, #3
 800090a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800090c:	2b02      	cmp	r3, #2
 800090e:	d130      	bne.n	8000972 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	2203      	movs	r2, #3
 800091c:	409a      	lsls	r2, r3
 800091e:	0013      	movs	r3, r2
 8000920:	43da      	mvns	r2, r3
 8000922:	693b      	ldr	r3, [r7, #16]
 8000924:	4013      	ands	r3, r2
 8000926:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	68da      	ldr	r2, [r3, #12]
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	409a      	lsls	r2, r3
 8000932:	0013      	movs	r3, r2
 8000934:	693a      	ldr	r2, [r7, #16]
 8000936:	4313      	orrs	r3, r2
 8000938:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	693a      	ldr	r2, [r7, #16]
 800093e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000946:	2201      	movs	r2, #1
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	409a      	lsls	r2, r3
 800094c:	0013      	movs	r3, r2
 800094e:	43da      	mvns	r2, r3
 8000950:	693b      	ldr	r3, [r7, #16]
 8000952:	4013      	ands	r3, r2
 8000954:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	091b      	lsrs	r3, r3, #4
 800095c:	2201      	movs	r2, #1
 800095e:	401a      	ands	r2, r3
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	409a      	lsls	r2, r3
 8000964:	0013      	movs	r3, r2
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	4313      	orrs	r3, r2
 800096a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	2203      	movs	r2, #3
 8000978:	4013      	ands	r3, r2
 800097a:	2b03      	cmp	r3, #3
 800097c:	d017      	beq.n	80009ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	68db      	ldr	r3, [r3, #12]
 8000982:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	2203      	movs	r2, #3
 800098a:	409a      	lsls	r2, r3
 800098c:	0013      	movs	r3, r2
 800098e:	43da      	mvns	r2, r3
 8000990:	693b      	ldr	r3, [r7, #16]
 8000992:	4013      	ands	r3, r2
 8000994:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	689a      	ldr	r2, [r3, #8]
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	409a      	lsls	r2, r3
 80009a0:	0013      	movs	r3, r2
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	2203      	movs	r2, #3
 80009b4:	4013      	ands	r3, r2
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	d123      	bne.n	8000a02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	08da      	lsrs	r2, r3, #3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	3208      	adds	r2, #8
 80009c2:	0092      	lsls	r2, r2, #2
 80009c4:	58d3      	ldr	r3, [r2, r3]
 80009c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	2207      	movs	r2, #7
 80009cc:	4013      	ands	r3, r2
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	220f      	movs	r2, #15
 80009d2:	409a      	lsls	r2, r3
 80009d4:	0013      	movs	r3, r2
 80009d6:	43da      	mvns	r2, r3
 80009d8:	693b      	ldr	r3, [r7, #16]
 80009da:	4013      	ands	r3, r2
 80009dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	691a      	ldr	r2, [r3, #16]
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	2107      	movs	r1, #7
 80009e6:	400b      	ands	r3, r1
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	409a      	lsls	r2, r3
 80009ec:	0013      	movs	r3, r2
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	08da      	lsrs	r2, r3, #3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	3208      	adds	r2, #8
 80009fc:	0092      	lsls	r2, r2, #2
 80009fe:	6939      	ldr	r1, [r7, #16]
 8000a00:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	2203      	movs	r2, #3
 8000a0e:	409a      	lsls	r2, r3
 8000a10:	0013      	movs	r3, r2
 8000a12:	43da      	mvns	r2, r3
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	4013      	ands	r3, r2
 8000a18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	2203      	movs	r2, #3
 8000a20:	401a      	ands	r2, r3
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	409a      	lsls	r2, r3
 8000a28:	0013      	movs	r3, r2
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	685a      	ldr	r2, [r3, #4]
 8000a3a:	23c0      	movs	r3, #192	; 0xc0
 8000a3c:	029b      	lsls	r3, r3, #10
 8000a3e:	4013      	ands	r3, r2
 8000a40:	d100      	bne.n	8000a44 <HAL_GPIO_Init+0x174>
 8000a42:	e09a      	b.n	8000b7a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a44:	4b54      	ldr	r3, [pc, #336]	; (8000b98 <HAL_GPIO_Init+0x2c8>)
 8000a46:	699a      	ldr	r2, [r3, #24]
 8000a48:	4b53      	ldr	r3, [pc, #332]	; (8000b98 <HAL_GPIO_Init+0x2c8>)
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	619a      	str	r2, [r3, #24]
 8000a50:	4b51      	ldr	r3, [pc, #324]	; (8000b98 <HAL_GPIO_Init+0x2c8>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	2201      	movs	r2, #1
 8000a56:	4013      	ands	r3, r2
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a5c:	4a4f      	ldr	r2, [pc, #316]	; (8000b9c <HAL_GPIO_Init+0x2cc>)
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	089b      	lsrs	r3, r3, #2
 8000a62:	3302      	adds	r3, #2
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	589b      	ldr	r3, [r3, r2]
 8000a68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	2203      	movs	r2, #3
 8000a6e:	4013      	ands	r3, r2
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	220f      	movs	r2, #15
 8000a74:	409a      	lsls	r2, r3
 8000a76:	0013      	movs	r3, r2
 8000a78:	43da      	mvns	r2, r3
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	2390      	movs	r3, #144	; 0x90
 8000a84:	05db      	lsls	r3, r3, #23
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d013      	beq.n	8000ab2 <HAL_GPIO_Init+0x1e2>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a44      	ldr	r2, [pc, #272]	; (8000ba0 <HAL_GPIO_Init+0x2d0>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d00d      	beq.n	8000aae <HAL_GPIO_Init+0x1de>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a43      	ldr	r2, [pc, #268]	; (8000ba4 <HAL_GPIO_Init+0x2d4>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d007      	beq.n	8000aaa <HAL_GPIO_Init+0x1da>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a42      	ldr	r2, [pc, #264]	; (8000ba8 <HAL_GPIO_Init+0x2d8>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d101      	bne.n	8000aa6 <HAL_GPIO_Init+0x1d6>
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	e006      	b.n	8000ab4 <HAL_GPIO_Init+0x1e4>
 8000aa6:	2305      	movs	r3, #5
 8000aa8:	e004      	b.n	8000ab4 <HAL_GPIO_Init+0x1e4>
 8000aaa:	2302      	movs	r3, #2
 8000aac:	e002      	b.n	8000ab4 <HAL_GPIO_Init+0x1e4>
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e000      	b.n	8000ab4 <HAL_GPIO_Init+0x1e4>
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	697a      	ldr	r2, [r7, #20]
 8000ab6:	2103      	movs	r1, #3
 8000ab8:	400a      	ands	r2, r1
 8000aba:	0092      	lsls	r2, r2, #2
 8000abc:	4093      	lsls	r3, r2
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ac4:	4935      	ldr	r1, [pc, #212]	; (8000b9c <HAL_GPIO_Init+0x2cc>)
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	089b      	lsrs	r3, r3, #2
 8000aca:	3302      	adds	r3, #2
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ad2:	4b36      	ldr	r3, [pc, #216]	; (8000bac <HAL_GPIO_Init+0x2dc>)
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	43da      	mvns	r2, r3
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685a      	ldr	r2, [r3, #4]
 8000ae6:	2380      	movs	r3, #128	; 0x80
 8000ae8:	035b      	lsls	r3, r3, #13
 8000aea:	4013      	ands	r3, r2
 8000aec:	d003      	beq.n	8000af6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000af6:	4b2d      	ldr	r3, [pc, #180]	; (8000bac <HAL_GPIO_Init+0x2dc>)
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000afc:	4b2b      	ldr	r3, [pc, #172]	; (8000bac <HAL_GPIO_Init+0x2dc>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	43da      	mvns	r2, r3
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	4013      	ands	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685a      	ldr	r2, [r3, #4]
 8000b10:	2380      	movs	r3, #128	; 0x80
 8000b12:	039b      	lsls	r3, r3, #14
 8000b14:	4013      	ands	r3, r2
 8000b16:	d003      	beq.n	8000b20 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b20:	4b22      	ldr	r3, [pc, #136]	; (8000bac <HAL_GPIO_Init+0x2dc>)
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000b26:	4b21      	ldr	r3, [pc, #132]	; (8000bac <HAL_GPIO_Init+0x2dc>)
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	43da      	mvns	r2, r3
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	4013      	ands	r3, r2
 8000b34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685a      	ldr	r2, [r3, #4]
 8000b3a:	2380      	movs	r3, #128	; 0x80
 8000b3c:	029b      	lsls	r3, r3, #10
 8000b3e:	4013      	ands	r3, r2
 8000b40:	d003      	beq.n	8000b4a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	4313      	orrs	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b4a:	4b18      	ldr	r3, [pc, #96]	; (8000bac <HAL_GPIO_Init+0x2dc>)
 8000b4c:	693a      	ldr	r2, [r7, #16]
 8000b4e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000b50:	4b16      	ldr	r3, [pc, #88]	; (8000bac <HAL_GPIO_Init+0x2dc>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	43da      	mvns	r2, r3
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	685a      	ldr	r2, [r3, #4]
 8000b64:	2380      	movs	r3, #128	; 0x80
 8000b66:	025b      	lsls	r3, r3, #9
 8000b68:	4013      	ands	r3, r2
 8000b6a:	d003      	beq.n	8000b74 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b74:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <HAL_GPIO_Init+0x2dc>)
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	40da      	lsrs	r2, r3
 8000b88:	1e13      	subs	r3, r2, #0
 8000b8a:	d000      	beq.n	8000b8e <HAL_GPIO_Init+0x2be>
 8000b8c:	e6a8      	b.n	80008e0 <HAL_GPIO_Init+0x10>
  } 
}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	46c0      	nop			; (mov r8, r8)
 8000b92:	46bd      	mov	sp, r7
 8000b94:	b006      	add	sp, #24
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	40010000 	.word	0x40010000
 8000ba0:	48000400 	.word	0x48000400
 8000ba4:	48000800 	.word	0x48000800
 8000ba8:	48000c00 	.word	0x48000c00
 8000bac:	40010400 	.word	0x40010400

08000bb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	000a      	movs	r2, r1
 8000bba:	1cbb      	adds	r3, r7, #2
 8000bbc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	691b      	ldr	r3, [r3, #16]
 8000bc2:	1cba      	adds	r2, r7, #2
 8000bc4:	8812      	ldrh	r2, [r2, #0]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	d004      	beq.n	8000bd4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000bca:	230f      	movs	r3, #15
 8000bcc:	18fb      	adds	r3, r7, r3
 8000bce:	2201      	movs	r2, #1
 8000bd0:	701a      	strb	r2, [r3, #0]
 8000bd2:	e003      	b.n	8000bdc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000bd4:	230f      	movs	r3, #15
 8000bd6:	18fb      	adds	r3, r7, r3
 8000bd8:	2200      	movs	r2, #0
 8000bda:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000bdc:	230f      	movs	r3, #15
 8000bde:	18fb      	adds	r3, r7, r3
 8000be0:	781b      	ldrb	r3, [r3, #0]
  }
 8000be2:	0018      	movs	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b004      	add	sp, #16
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
 8000bf2:	0008      	movs	r0, r1
 8000bf4:	0011      	movs	r1, r2
 8000bf6:	1cbb      	adds	r3, r7, #2
 8000bf8:	1c02      	adds	r2, r0, #0
 8000bfa:	801a      	strh	r2, [r3, #0]
 8000bfc:	1c7b      	adds	r3, r7, #1
 8000bfe:	1c0a      	adds	r2, r1, #0
 8000c00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c02:	1c7b      	adds	r3, r7, #1
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d004      	beq.n	8000c14 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c0a:	1cbb      	adds	r3, r7, #2
 8000c0c:	881a      	ldrh	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c12:	e003      	b.n	8000c1c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c14:	1cbb      	adds	r3, r7, #2
 8000c16:	881a      	ldrh	r2, [r3, #0]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b002      	add	sp, #8
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d101      	bne.n	8000c36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e301      	b.n	800123a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	d100      	bne.n	8000c42 <HAL_RCC_OscConfig+0x1e>
 8000c40:	e08d      	b.n	8000d5e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c42:	4bc3      	ldr	r3, [pc, #780]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	220c      	movs	r2, #12
 8000c48:	4013      	ands	r3, r2
 8000c4a:	2b04      	cmp	r3, #4
 8000c4c:	d00e      	beq.n	8000c6c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c4e:	4bc0      	ldr	r3, [pc, #768]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	220c      	movs	r2, #12
 8000c54:	4013      	ands	r3, r2
 8000c56:	2b08      	cmp	r3, #8
 8000c58:	d116      	bne.n	8000c88 <HAL_RCC_OscConfig+0x64>
 8000c5a:	4bbd      	ldr	r3, [pc, #756]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000c5c:	685a      	ldr	r2, [r3, #4]
 8000c5e:	2380      	movs	r3, #128	; 0x80
 8000c60:	025b      	lsls	r3, r3, #9
 8000c62:	401a      	ands	r2, r3
 8000c64:	2380      	movs	r3, #128	; 0x80
 8000c66:	025b      	lsls	r3, r3, #9
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d10d      	bne.n	8000c88 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c6c:	4bb8      	ldr	r3, [pc, #736]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	2380      	movs	r3, #128	; 0x80
 8000c72:	029b      	lsls	r3, r3, #10
 8000c74:	4013      	ands	r3, r2
 8000c76:	d100      	bne.n	8000c7a <HAL_RCC_OscConfig+0x56>
 8000c78:	e070      	b.n	8000d5c <HAL_RCC_OscConfig+0x138>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d000      	beq.n	8000c84 <HAL_RCC_OscConfig+0x60>
 8000c82:	e06b      	b.n	8000d5c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000c84:	2301      	movs	r3, #1
 8000c86:	e2d8      	b.n	800123a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d107      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x7c>
 8000c90:	4baf      	ldr	r3, [pc, #700]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4bae      	ldr	r3, [pc, #696]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000c96:	2180      	movs	r1, #128	; 0x80
 8000c98:	0249      	lsls	r1, r1, #9
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	e02f      	b.n	8000d00 <HAL_RCC_OscConfig+0xdc>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d10c      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x9e>
 8000ca8:	4ba9      	ldr	r3, [pc, #676]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4ba8      	ldr	r3, [pc, #672]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000cae:	49a9      	ldr	r1, [pc, #676]	; (8000f54 <HAL_RCC_OscConfig+0x330>)
 8000cb0:	400a      	ands	r2, r1
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	4ba6      	ldr	r3, [pc, #664]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4ba5      	ldr	r3, [pc, #660]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000cba:	49a7      	ldr	r1, [pc, #668]	; (8000f58 <HAL_RCC_OscConfig+0x334>)
 8000cbc:	400a      	ands	r2, r1
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	e01e      	b.n	8000d00 <HAL_RCC_OscConfig+0xdc>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	2b05      	cmp	r3, #5
 8000cc8:	d10e      	bne.n	8000ce8 <HAL_RCC_OscConfig+0xc4>
 8000cca:	4ba1      	ldr	r3, [pc, #644]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	4ba0      	ldr	r3, [pc, #640]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000cd0:	2180      	movs	r1, #128	; 0x80
 8000cd2:	02c9      	lsls	r1, r1, #11
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	4b9d      	ldr	r3, [pc, #628]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b9c      	ldr	r3, [pc, #624]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000cde:	2180      	movs	r1, #128	; 0x80
 8000ce0:	0249      	lsls	r1, r1, #9
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	e00b      	b.n	8000d00 <HAL_RCC_OscConfig+0xdc>
 8000ce8:	4b99      	ldr	r3, [pc, #612]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b98      	ldr	r3, [pc, #608]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000cee:	4999      	ldr	r1, [pc, #612]	; (8000f54 <HAL_RCC_OscConfig+0x330>)
 8000cf0:	400a      	ands	r2, r1
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	4b96      	ldr	r3, [pc, #600]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	4b95      	ldr	r3, [pc, #596]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000cfa:	4997      	ldr	r1, [pc, #604]	; (8000f58 <HAL_RCC_OscConfig+0x334>)
 8000cfc:	400a      	ands	r2, r1
 8000cfe:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d014      	beq.n	8000d32 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d08:	f7ff fd24 	bl	8000754 <HAL_GetTick>
 8000d0c:	0003      	movs	r3, r0
 8000d0e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d10:	e008      	b.n	8000d24 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d12:	f7ff fd1f 	bl	8000754 <HAL_GetTick>
 8000d16:	0002      	movs	r2, r0
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	1ad3      	subs	r3, r2, r3
 8000d1c:	2b64      	cmp	r3, #100	; 0x64
 8000d1e:	d901      	bls.n	8000d24 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000d20:	2303      	movs	r3, #3
 8000d22:	e28a      	b.n	800123a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d24:	4b8a      	ldr	r3, [pc, #552]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	2380      	movs	r3, #128	; 0x80
 8000d2a:	029b      	lsls	r3, r3, #10
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	d0f0      	beq.n	8000d12 <HAL_RCC_OscConfig+0xee>
 8000d30:	e015      	b.n	8000d5e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d32:	f7ff fd0f 	bl	8000754 <HAL_GetTick>
 8000d36:	0003      	movs	r3, r0
 8000d38:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d3a:	e008      	b.n	8000d4e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d3c:	f7ff fd0a 	bl	8000754 <HAL_GetTick>
 8000d40:	0002      	movs	r2, r0
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	2b64      	cmp	r3, #100	; 0x64
 8000d48:	d901      	bls.n	8000d4e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	e275      	b.n	800123a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d4e:	4b80      	ldr	r3, [pc, #512]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	2380      	movs	r3, #128	; 0x80
 8000d54:	029b      	lsls	r3, r3, #10
 8000d56:	4013      	ands	r3, r2
 8000d58:	d1f0      	bne.n	8000d3c <HAL_RCC_OscConfig+0x118>
 8000d5a:	e000      	b.n	8000d5e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d5c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2202      	movs	r2, #2
 8000d64:	4013      	ands	r3, r2
 8000d66:	d100      	bne.n	8000d6a <HAL_RCC_OscConfig+0x146>
 8000d68:	e069      	b.n	8000e3e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d6a:	4b79      	ldr	r3, [pc, #484]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	220c      	movs	r2, #12
 8000d70:	4013      	ands	r3, r2
 8000d72:	d00b      	beq.n	8000d8c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d74:	4b76      	ldr	r3, [pc, #472]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	220c      	movs	r2, #12
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	2b08      	cmp	r3, #8
 8000d7e:	d11c      	bne.n	8000dba <HAL_RCC_OscConfig+0x196>
 8000d80:	4b73      	ldr	r3, [pc, #460]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000d82:	685a      	ldr	r2, [r3, #4]
 8000d84:	2380      	movs	r3, #128	; 0x80
 8000d86:	025b      	lsls	r3, r3, #9
 8000d88:	4013      	ands	r3, r2
 8000d8a:	d116      	bne.n	8000dba <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d8c:	4b70      	ldr	r3, [pc, #448]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2202      	movs	r2, #2
 8000d92:	4013      	ands	r3, r2
 8000d94:	d005      	beq.n	8000da2 <HAL_RCC_OscConfig+0x17e>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	68db      	ldr	r3, [r3, #12]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d001      	beq.n	8000da2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e24b      	b.n	800123a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000da2:	4b6b      	ldr	r3, [pc, #428]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	22f8      	movs	r2, #248	; 0xf8
 8000da8:	4393      	bics	r3, r2
 8000daa:	0019      	movs	r1, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	691b      	ldr	r3, [r3, #16]
 8000db0:	00da      	lsls	r2, r3, #3
 8000db2:	4b67      	ldr	r3, [pc, #412]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000db4:	430a      	orrs	r2, r1
 8000db6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000db8:	e041      	b.n	8000e3e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	68db      	ldr	r3, [r3, #12]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d024      	beq.n	8000e0c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dc2:	4b63      	ldr	r3, [pc, #396]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	4b62      	ldr	r3, [pc, #392]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000dc8:	2101      	movs	r1, #1
 8000dca:	430a      	orrs	r2, r1
 8000dcc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dce:	f7ff fcc1 	bl	8000754 <HAL_GetTick>
 8000dd2:	0003      	movs	r3, r0
 8000dd4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dd6:	e008      	b.n	8000dea <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dd8:	f7ff fcbc 	bl	8000754 <HAL_GetTick>
 8000ddc:	0002      	movs	r2, r0
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d901      	bls.n	8000dea <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000de6:	2303      	movs	r3, #3
 8000de8:	e227      	b.n	800123a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dea:	4b59      	ldr	r3, [pc, #356]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2202      	movs	r2, #2
 8000df0:	4013      	ands	r3, r2
 8000df2:	d0f1      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000df4:	4b56      	ldr	r3, [pc, #344]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	22f8      	movs	r2, #248	; 0xf8
 8000dfa:	4393      	bics	r3, r2
 8000dfc:	0019      	movs	r1, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	691b      	ldr	r3, [r3, #16]
 8000e02:	00da      	lsls	r2, r3, #3
 8000e04:	4b52      	ldr	r3, [pc, #328]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000e06:	430a      	orrs	r2, r1
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	e018      	b.n	8000e3e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e0c:	4b50      	ldr	r3, [pc, #320]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4b4f      	ldr	r3, [pc, #316]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000e12:	2101      	movs	r1, #1
 8000e14:	438a      	bics	r2, r1
 8000e16:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e18:	f7ff fc9c 	bl	8000754 <HAL_GetTick>
 8000e1c:	0003      	movs	r3, r0
 8000e1e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e20:	e008      	b.n	8000e34 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e22:	f7ff fc97 	bl	8000754 <HAL_GetTick>
 8000e26:	0002      	movs	r2, r0
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d901      	bls.n	8000e34 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000e30:	2303      	movs	r3, #3
 8000e32:	e202      	b.n	800123a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e34:	4b46      	ldr	r3, [pc, #280]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2202      	movs	r2, #2
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	d1f1      	bne.n	8000e22 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2208      	movs	r2, #8
 8000e44:	4013      	ands	r3, r2
 8000e46:	d036      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	69db      	ldr	r3, [r3, #28]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d019      	beq.n	8000e84 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e50:	4b3f      	ldr	r3, [pc, #252]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000e52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e54:	4b3e      	ldr	r3, [pc, #248]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000e56:	2101      	movs	r1, #1
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e5c:	f7ff fc7a 	bl	8000754 <HAL_GetTick>
 8000e60:	0003      	movs	r3, r0
 8000e62:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e64:	e008      	b.n	8000e78 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e66:	f7ff fc75 	bl	8000754 <HAL_GetTick>
 8000e6a:	0002      	movs	r2, r0
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d901      	bls.n	8000e78 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000e74:	2303      	movs	r3, #3
 8000e76:	e1e0      	b.n	800123a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e78:	4b35      	ldr	r3, [pc, #212]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	4013      	ands	r3, r2
 8000e80:	d0f1      	beq.n	8000e66 <HAL_RCC_OscConfig+0x242>
 8000e82:	e018      	b.n	8000eb6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e84:	4b32      	ldr	r3, [pc, #200]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000e86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e88:	4b31      	ldr	r3, [pc, #196]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	438a      	bics	r2, r1
 8000e8e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e90:	f7ff fc60 	bl	8000754 <HAL_GetTick>
 8000e94:	0003      	movs	r3, r0
 8000e96:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e98:	e008      	b.n	8000eac <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e9a:	f7ff fc5b 	bl	8000754 <HAL_GetTick>
 8000e9e:	0002      	movs	r2, r0
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d901      	bls.n	8000eac <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e1c6      	b.n	800123a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eac:	4b28      	ldr	r3, [pc, #160]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	d1f1      	bne.n	8000e9a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2204      	movs	r2, #4
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	d100      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x29e>
 8000ec0:	e0b4      	b.n	800102c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ec2:	201f      	movs	r0, #31
 8000ec4:	183b      	adds	r3, r7, r0
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eca:	4b21      	ldr	r3, [pc, #132]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000ecc:	69da      	ldr	r2, [r3, #28]
 8000ece:	2380      	movs	r3, #128	; 0x80
 8000ed0:	055b      	lsls	r3, r3, #21
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	d110      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ed6:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000ed8:	69da      	ldr	r2, [r3, #28]
 8000eda:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000edc:	2180      	movs	r1, #128	; 0x80
 8000ede:	0549      	lsls	r1, r1, #21
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	61da      	str	r2, [r3, #28]
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000ee6:	69da      	ldr	r2, [r3, #28]
 8000ee8:	2380      	movs	r3, #128	; 0x80
 8000eea:	055b      	lsls	r3, r3, #21
 8000eec:	4013      	ands	r3, r2
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000ef2:	183b      	adds	r3, r7, r0
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ef8:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	2380      	movs	r3, #128	; 0x80
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	4013      	ands	r3, r2
 8000f02:	d11a      	bne.n	8000f3a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f04:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000f0a:	2180      	movs	r1, #128	; 0x80
 8000f0c:	0049      	lsls	r1, r1, #1
 8000f0e:	430a      	orrs	r2, r1
 8000f10:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f12:	f7ff fc1f 	bl	8000754 <HAL_GetTick>
 8000f16:	0003      	movs	r3, r0
 8000f18:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f1a:	e008      	b.n	8000f2e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f1c:	f7ff fc1a 	bl	8000754 <HAL_GetTick>
 8000f20:	0002      	movs	r2, r0
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b64      	cmp	r3, #100	; 0x64
 8000f28:	d901      	bls.n	8000f2e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e185      	b.n	800123a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	2380      	movs	r3, #128	; 0x80
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	4013      	ands	r3, r2
 8000f38:	d0f0      	beq.n	8000f1c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d10e      	bne.n	8000f60 <HAL_RCC_OscConfig+0x33c>
 8000f42:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000f44:	6a1a      	ldr	r2, [r3, #32]
 8000f46:	4b02      	ldr	r3, [pc, #8]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000f48:	2101      	movs	r1, #1
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	621a      	str	r2, [r3, #32]
 8000f4e:	e035      	b.n	8000fbc <HAL_RCC_OscConfig+0x398>
 8000f50:	40021000 	.word	0x40021000
 8000f54:	fffeffff 	.word	0xfffeffff
 8000f58:	fffbffff 	.word	0xfffbffff
 8000f5c:	40007000 	.word	0x40007000
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d10c      	bne.n	8000f82 <HAL_RCC_OscConfig+0x35e>
 8000f68:	4bb6      	ldr	r3, [pc, #728]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8000f6a:	6a1a      	ldr	r2, [r3, #32]
 8000f6c:	4bb5      	ldr	r3, [pc, #724]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8000f6e:	2101      	movs	r1, #1
 8000f70:	438a      	bics	r2, r1
 8000f72:	621a      	str	r2, [r3, #32]
 8000f74:	4bb3      	ldr	r3, [pc, #716]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8000f76:	6a1a      	ldr	r2, [r3, #32]
 8000f78:	4bb2      	ldr	r3, [pc, #712]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8000f7a:	2104      	movs	r1, #4
 8000f7c:	438a      	bics	r2, r1
 8000f7e:	621a      	str	r2, [r3, #32]
 8000f80:	e01c      	b.n	8000fbc <HAL_RCC_OscConfig+0x398>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	2b05      	cmp	r3, #5
 8000f88:	d10c      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x380>
 8000f8a:	4bae      	ldr	r3, [pc, #696]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8000f8c:	6a1a      	ldr	r2, [r3, #32]
 8000f8e:	4bad      	ldr	r3, [pc, #692]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8000f90:	2104      	movs	r1, #4
 8000f92:	430a      	orrs	r2, r1
 8000f94:	621a      	str	r2, [r3, #32]
 8000f96:	4bab      	ldr	r3, [pc, #684]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8000f98:	6a1a      	ldr	r2, [r3, #32]
 8000f9a:	4baa      	ldr	r3, [pc, #680]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	621a      	str	r2, [r3, #32]
 8000fa2:	e00b      	b.n	8000fbc <HAL_RCC_OscConfig+0x398>
 8000fa4:	4ba7      	ldr	r3, [pc, #668]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8000fa6:	6a1a      	ldr	r2, [r3, #32]
 8000fa8:	4ba6      	ldr	r3, [pc, #664]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8000faa:	2101      	movs	r1, #1
 8000fac:	438a      	bics	r2, r1
 8000fae:	621a      	str	r2, [r3, #32]
 8000fb0:	4ba4      	ldr	r3, [pc, #656]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8000fb2:	6a1a      	ldr	r2, [r3, #32]
 8000fb4:	4ba3      	ldr	r3, [pc, #652]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8000fb6:	2104      	movs	r1, #4
 8000fb8:	438a      	bics	r2, r1
 8000fba:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d014      	beq.n	8000fee <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fc4:	f7ff fbc6 	bl	8000754 <HAL_GetTick>
 8000fc8:	0003      	movs	r3, r0
 8000fca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fcc:	e009      	b.n	8000fe2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fce:	f7ff fbc1 	bl	8000754 <HAL_GetTick>
 8000fd2:	0002      	movs	r2, r0
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	4a9b      	ldr	r2, [pc, #620]	; (8001248 <HAL_RCC_OscConfig+0x624>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d901      	bls.n	8000fe2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e12b      	b.n	800123a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fe2:	4b98      	ldr	r3, [pc, #608]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8000fe4:	6a1b      	ldr	r3, [r3, #32]
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	4013      	ands	r3, r2
 8000fea:	d0f0      	beq.n	8000fce <HAL_RCC_OscConfig+0x3aa>
 8000fec:	e013      	b.n	8001016 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fee:	f7ff fbb1 	bl	8000754 <HAL_GetTick>
 8000ff2:	0003      	movs	r3, r0
 8000ff4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ff6:	e009      	b.n	800100c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ff8:	f7ff fbac 	bl	8000754 <HAL_GetTick>
 8000ffc:	0002      	movs	r2, r0
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	4a91      	ldr	r2, [pc, #580]	; (8001248 <HAL_RCC_OscConfig+0x624>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d901      	bls.n	800100c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001008:	2303      	movs	r3, #3
 800100a:	e116      	b.n	800123a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800100c:	4b8d      	ldr	r3, [pc, #564]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 800100e:	6a1b      	ldr	r3, [r3, #32]
 8001010:	2202      	movs	r2, #2
 8001012:	4013      	ands	r3, r2
 8001014:	d1f0      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001016:	231f      	movs	r3, #31
 8001018:	18fb      	adds	r3, r7, r3
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d105      	bne.n	800102c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001020:	4b88      	ldr	r3, [pc, #544]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8001022:	69da      	ldr	r2, [r3, #28]
 8001024:	4b87      	ldr	r3, [pc, #540]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8001026:	4989      	ldr	r1, [pc, #548]	; (800124c <HAL_RCC_OscConfig+0x628>)
 8001028:	400a      	ands	r2, r1
 800102a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2210      	movs	r2, #16
 8001032:	4013      	ands	r3, r2
 8001034:	d063      	beq.n	80010fe <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d12a      	bne.n	8001094 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800103e:	4b81      	ldr	r3, [pc, #516]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8001040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001042:	4b80      	ldr	r3, [pc, #512]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8001044:	2104      	movs	r1, #4
 8001046:	430a      	orrs	r2, r1
 8001048:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800104a:	4b7e      	ldr	r3, [pc, #504]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 800104c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800104e:	4b7d      	ldr	r3, [pc, #500]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8001050:	2101      	movs	r1, #1
 8001052:	430a      	orrs	r2, r1
 8001054:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001056:	f7ff fb7d 	bl	8000754 <HAL_GetTick>
 800105a:	0003      	movs	r3, r0
 800105c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800105e:	e008      	b.n	8001072 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001060:	f7ff fb78 	bl	8000754 <HAL_GetTick>
 8001064:	0002      	movs	r2, r0
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b02      	cmp	r3, #2
 800106c:	d901      	bls.n	8001072 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e0e3      	b.n	800123a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001072:	4b74      	ldr	r3, [pc, #464]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8001074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001076:	2202      	movs	r2, #2
 8001078:	4013      	ands	r3, r2
 800107a:	d0f1      	beq.n	8001060 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800107c:	4b71      	ldr	r3, [pc, #452]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 800107e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001080:	22f8      	movs	r2, #248	; 0xf8
 8001082:	4393      	bics	r3, r2
 8001084:	0019      	movs	r1, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	00da      	lsls	r2, r3, #3
 800108c:	4b6d      	ldr	r3, [pc, #436]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 800108e:	430a      	orrs	r2, r1
 8001090:	635a      	str	r2, [r3, #52]	; 0x34
 8001092:	e034      	b.n	80010fe <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	695b      	ldr	r3, [r3, #20]
 8001098:	3305      	adds	r3, #5
 800109a:	d111      	bne.n	80010c0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800109c:	4b69      	ldr	r3, [pc, #420]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 800109e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010a0:	4b68      	ldr	r3, [pc, #416]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 80010a2:	2104      	movs	r1, #4
 80010a4:	438a      	bics	r2, r1
 80010a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80010a8:	4b66      	ldr	r3, [pc, #408]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 80010aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ac:	22f8      	movs	r2, #248	; 0xf8
 80010ae:	4393      	bics	r3, r2
 80010b0:	0019      	movs	r1, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	00da      	lsls	r2, r3, #3
 80010b8:	4b62      	ldr	r3, [pc, #392]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 80010ba:	430a      	orrs	r2, r1
 80010bc:	635a      	str	r2, [r3, #52]	; 0x34
 80010be:	e01e      	b.n	80010fe <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80010c0:	4b60      	ldr	r3, [pc, #384]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 80010c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010c4:	4b5f      	ldr	r3, [pc, #380]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 80010c6:	2104      	movs	r1, #4
 80010c8:	430a      	orrs	r2, r1
 80010ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80010cc:	4b5d      	ldr	r3, [pc, #372]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 80010ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010d0:	4b5c      	ldr	r3, [pc, #368]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 80010d2:	2101      	movs	r1, #1
 80010d4:	438a      	bics	r2, r1
 80010d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010d8:	f7ff fb3c 	bl	8000754 <HAL_GetTick>
 80010dc:	0003      	movs	r3, r0
 80010de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80010e0:	e008      	b.n	80010f4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80010e2:	f7ff fb37 	bl	8000754 <HAL_GetTick>
 80010e6:	0002      	movs	r2, r0
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d901      	bls.n	80010f4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e0a2      	b.n	800123a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80010f4:	4b53      	ldr	r3, [pc, #332]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 80010f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010f8:	2202      	movs	r2, #2
 80010fa:	4013      	ands	r3, r2
 80010fc:	d1f1      	bne.n	80010e2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a1b      	ldr	r3, [r3, #32]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d100      	bne.n	8001108 <HAL_RCC_OscConfig+0x4e4>
 8001106:	e097      	b.n	8001238 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001108:	4b4e      	ldr	r3, [pc, #312]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	220c      	movs	r2, #12
 800110e:	4013      	ands	r3, r2
 8001110:	2b08      	cmp	r3, #8
 8001112:	d100      	bne.n	8001116 <HAL_RCC_OscConfig+0x4f2>
 8001114:	e06b      	b.n	80011ee <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a1b      	ldr	r3, [r3, #32]
 800111a:	2b02      	cmp	r3, #2
 800111c:	d14c      	bne.n	80011b8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800111e:	4b49      	ldr	r3, [pc, #292]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	4b48      	ldr	r3, [pc, #288]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8001124:	494a      	ldr	r1, [pc, #296]	; (8001250 <HAL_RCC_OscConfig+0x62c>)
 8001126:	400a      	ands	r2, r1
 8001128:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112a:	f7ff fb13 	bl	8000754 <HAL_GetTick>
 800112e:	0003      	movs	r3, r0
 8001130:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001132:	e008      	b.n	8001146 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001134:	f7ff fb0e 	bl	8000754 <HAL_GetTick>
 8001138:	0002      	movs	r2, r0
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b02      	cmp	r3, #2
 8001140:	d901      	bls.n	8001146 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e079      	b.n	800123a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001146:	4b3f      	ldr	r3, [pc, #252]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	2380      	movs	r3, #128	; 0x80
 800114c:	049b      	lsls	r3, r3, #18
 800114e:	4013      	ands	r3, r2
 8001150:	d1f0      	bne.n	8001134 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001152:	4b3c      	ldr	r3, [pc, #240]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8001154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001156:	220f      	movs	r2, #15
 8001158:	4393      	bics	r3, r2
 800115a:	0019      	movs	r1, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001160:	4b38      	ldr	r3, [pc, #224]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8001162:	430a      	orrs	r2, r1
 8001164:	62da      	str	r2, [r3, #44]	; 0x2c
 8001166:	4b37      	ldr	r3, [pc, #220]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	4a3a      	ldr	r2, [pc, #232]	; (8001254 <HAL_RCC_OscConfig+0x630>)
 800116c:	4013      	ands	r3, r2
 800116e:	0019      	movs	r1, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001178:	431a      	orrs	r2, r3
 800117a:	4b32      	ldr	r3, [pc, #200]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 800117c:	430a      	orrs	r2, r1
 800117e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001180:	4b30      	ldr	r3, [pc, #192]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b2f      	ldr	r3, [pc, #188]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8001186:	2180      	movs	r1, #128	; 0x80
 8001188:	0449      	lsls	r1, r1, #17
 800118a:	430a      	orrs	r2, r1
 800118c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118e:	f7ff fae1 	bl	8000754 <HAL_GetTick>
 8001192:	0003      	movs	r3, r0
 8001194:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001196:	e008      	b.n	80011aa <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001198:	f7ff fadc 	bl	8000754 <HAL_GetTick>
 800119c:	0002      	movs	r2, r0
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e047      	b.n	800123a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011aa:	4b26      	ldr	r3, [pc, #152]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	2380      	movs	r3, #128	; 0x80
 80011b0:	049b      	lsls	r3, r3, #18
 80011b2:	4013      	ands	r3, r2
 80011b4:	d0f0      	beq.n	8001198 <HAL_RCC_OscConfig+0x574>
 80011b6:	e03f      	b.n	8001238 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011b8:	4b22      	ldr	r3, [pc, #136]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b21      	ldr	r3, [pc, #132]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 80011be:	4924      	ldr	r1, [pc, #144]	; (8001250 <HAL_RCC_OscConfig+0x62c>)
 80011c0:	400a      	ands	r2, r1
 80011c2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c4:	f7ff fac6 	bl	8000754 <HAL_GetTick>
 80011c8:	0003      	movs	r3, r0
 80011ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011cc:	e008      	b.n	80011e0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011ce:	f7ff fac1 	bl	8000754 <HAL_GetTick>
 80011d2:	0002      	movs	r2, r0
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d901      	bls.n	80011e0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	e02c      	b.n	800123a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011e0:	4b18      	ldr	r3, [pc, #96]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	2380      	movs	r3, #128	; 0x80
 80011e6:	049b      	lsls	r3, r3, #18
 80011e8:	4013      	ands	r3, r2
 80011ea:	d1f0      	bne.n	80011ce <HAL_RCC_OscConfig+0x5aa>
 80011ec:	e024      	b.n	8001238 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6a1b      	ldr	r3, [r3, #32]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d101      	bne.n	80011fa <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e01f      	b.n	800123a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80011fa:	4b12      	ldr	r3, [pc, #72]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001200:	4b10      	ldr	r3, [pc, #64]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8001202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001204:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	025b      	lsls	r3, r3, #9
 800120c:	401a      	ands	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001212:	429a      	cmp	r2, r3
 8001214:	d10e      	bne.n	8001234 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	220f      	movs	r2, #15
 800121a:	401a      	ands	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001220:	429a      	cmp	r2, r3
 8001222:	d107      	bne.n	8001234 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	23f0      	movs	r3, #240	; 0xf0
 8001228:	039b      	lsls	r3, r3, #14
 800122a:	401a      	ands	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001230:	429a      	cmp	r2, r3
 8001232:	d001      	beq.n	8001238 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e000      	b.n	800123a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	0018      	movs	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	b008      	add	sp, #32
 8001240:	bd80      	pop	{r7, pc}
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	40021000 	.word	0x40021000
 8001248:	00001388 	.word	0x00001388
 800124c:	efffffff 	.word	0xefffffff
 8001250:	feffffff 	.word	0xfeffffff
 8001254:	ffc2ffff 	.word	0xffc2ffff

08001258 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d101      	bne.n	800126c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e0b3      	b.n	80013d4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800126c:	4b5b      	ldr	r3, [pc, #364]	; (80013dc <HAL_RCC_ClockConfig+0x184>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2201      	movs	r2, #1
 8001272:	4013      	ands	r3, r2
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	429a      	cmp	r2, r3
 8001278:	d911      	bls.n	800129e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800127a:	4b58      	ldr	r3, [pc, #352]	; (80013dc <HAL_RCC_ClockConfig+0x184>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2201      	movs	r2, #1
 8001280:	4393      	bics	r3, r2
 8001282:	0019      	movs	r1, r3
 8001284:	4b55      	ldr	r3, [pc, #340]	; (80013dc <HAL_RCC_ClockConfig+0x184>)
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	430a      	orrs	r2, r1
 800128a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800128c:	4b53      	ldr	r3, [pc, #332]	; (80013dc <HAL_RCC_ClockConfig+0x184>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2201      	movs	r2, #1
 8001292:	4013      	ands	r3, r2
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	429a      	cmp	r2, r3
 8001298:	d001      	beq.n	800129e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e09a      	b.n	80013d4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2202      	movs	r2, #2
 80012a4:	4013      	ands	r3, r2
 80012a6:	d015      	beq.n	80012d4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2204      	movs	r2, #4
 80012ae:	4013      	ands	r3, r2
 80012b0:	d006      	beq.n	80012c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80012b2:	4b4b      	ldr	r3, [pc, #300]	; (80013e0 <HAL_RCC_ClockConfig+0x188>)
 80012b4:	685a      	ldr	r2, [r3, #4]
 80012b6:	4b4a      	ldr	r3, [pc, #296]	; (80013e0 <HAL_RCC_ClockConfig+0x188>)
 80012b8:	21e0      	movs	r1, #224	; 0xe0
 80012ba:	00c9      	lsls	r1, r1, #3
 80012bc:	430a      	orrs	r2, r1
 80012be:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012c0:	4b47      	ldr	r3, [pc, #284]	; (80013e0 <HAL_RCC_ClockConfig+0x188>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	22f0      	movs	r2, #240	; 0xf0
 80012c6:	4393      	bics	r3, r2
 80012c8:	0019      	movs	r1, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689a      	ldr	r2, [r3, #8]
 80012ce:	4b44      	ldr	r3, [pc, #272]	; (80013e0 <HAL_RCC_ClockConfig+0x188>)
 80012d0:	430a      	orrs	r2, r1
 80012d2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2201      	movs	r2, #1
 80012da:	4013      	ands	r3, r2
 80012dc:	d040      	beq.n	8001360 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d107      	bne.n	80012f6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e6:	4b3e      	ldr	r3, [pc, #248]	; (80013e0 <HAL_RCC_ClockConfig+0x188>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	2380      	movs	r3, #128	; 0x80
 80012ec:	029b      	lsls	r3, r3, #10
 80012ee:	4013      	ands	r3, r2
 80012f0:	d114      	bne.n	800131c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e06e      	b.n	80013d4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d107      	bne.n	800130e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012fe:	4b38      	ldr	r3, [pc, #224]	; (80013e0 <HAL_RCC_ClockConfig+0x188>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	2380      	movs	r3, #128	; 0x80
 8001304:	049b      	lsls	r3, r3, #18
 8001306:	4013      	ands	r3, r2
 8001308:	d108      	bne.n	800131c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e062      	b.n	80013d4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800130e:	4b34      	ldr	r3, [pc, #208]	; (80013e0 <HAL_RCC_ClockConfig+0x188>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2202      	movs	r2, #2
 8001314:	4013      	ands	r3, r2
 8001316:	d101      	bne.n	800131c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e05b      	b.n	80013d4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800131c:	4b30      	ldr	r3, [pc, #192]	; (80013e0 <HAL_RCC_ClockConfig+0x188>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2203      	movs	r2, #3
 8001322:	4393      	bics	r3, r2
 8001324:	0019      	movs	r1, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685a      	ldr	r2, [r3, #4]
 800132a:	4b2d      	ldr	r3, [pc, #180]	; (80013e0 <HAL_RCC_ClockConfig+0x188>)
 800132c:	430a      	orrs	r2, r1
 800132e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001330:	f7ff fa10 	bl	8000754 <HAL_GetTick>
 8001334:	0003      	movs	r3, r0
 8001336:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001338:	e009      	b.n	800134e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800133a:	f7ff fa0b 	bl	8000754 <HAL_GetTick>
 800133e:	0002      	movs	r2, r0
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	4a27      	ldr	r2, [pc, #156]	; (80013e4 <HAL_RCC_ClockConfig+0x18c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d901      	bls.n	800134e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e042      	b.n	80013d4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800134e:	4b24      	ldr	r3, [pc, #144]	; (80013e0 <HAL_RCC_ClockConfig+0x188>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	220c      	movs	r2, #12
 8001354:	401a      	ands	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	429a      	cmp	r2, r3
 800135e:	d1ec      	bne.n	800133a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001360:	4b1e      	ldr	r3, [pc, #120]	; (80013dc <HAL_RCC_ClockConfig+0x184>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2201      	movs	r2, #1
 8001366:	4013      	ands	r3, r2
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	429a      	cmp	r2, r3
 800136c:	d211      	bcs.n	8001392 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800136e:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <HAL_RCC_ClockConfig+0x184>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2201      	movs	r2, #1
 8001374:	4393      	bics	r3, r2
 8001376:	0019      	movs	r1, r3
 8001378:	4b18      	ldr	r3, [pc, #96]	; (80013dc <HAL_RCC_ClockConfig+0x184>)
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	430a      	orrs	r2, r1
 800137e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001380:	4b16      	ldr	r3, [pc, #88]	; (80013dc <HAL_RCC_ClockConfig+0x184>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2201      	movs	r2, #1
 8001386:	4013      	ands	r3, r2
 8001388:	683a      	ldr	r2, [r7, #0]
 800138a:	429a      	cmp	r2, r3
 800138c:	d001      	beq.n	8001392 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e020      	b.n	80013d4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2204      	movs	r2, #4
 8001398:	4013      	ands	r3, r2
 800139a:	d009      	beq.n	80013b0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800139c:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <HAL_RCC_ClockConfig+0x188>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	4a11      	ldr	r2, [pc, #68]	; (80013e8 <HAL_RCC_ClockConfig+0x190>)
 80013a2:	4013      	ands	r3, r2
 80013a4:	0019      	movs	r1, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	68da      	ldr	r2, [r3, #12]
 80013aa:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <HAL_RCC_ClockConfig+0x188>)
 80013ac:	430a      	orrs	r2, r1
 80013ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80013b0:	f000 f820 	bl	80013f4 <HAL_RCC_GetSysClockFreq>
 80013b4:	0001      	movs	r1, r0
 80013b6:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <HAL_RCC_ClockConfig+0x188>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	091b      	lsrs	r3, r3, #4
 80013bc:	220f      	movs	r2, #15
 80013be:	4013      	ands	r3, r2
 80013c0:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <HAL_RCC_ClockConfig+0x194>)
 80013c2:	5cd3      	ldrb	r3, [r2, r3]
 80013c4:	000a      	movs	r2, r1
 80013c6:	40da      	lsrs	r2, r3
 80013c8:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <HAL_RCC_ClockConfig+0x198>)
 80013ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80013cc:	2003      	movs	r0, #3
 80013ce:	f7ff f97b 	bl	80006c8 <HAL_InitTick>
  
  return HAL_OK;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	0018      	movs	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	b004      	add	sp, #16
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40022000 	.word	0x40022000
 80013e0:	40021000 	.word	0x40021000
 80013e4:	00001388 	.word	0x00001388
 80013e8:	fffff8ff 	.word	0xfffff8ff
 80013ec:	080025f8 	.word	0x080025f8
 80013f0:	20000000 	.word	0x20000000

080013f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800140a:	2300      	movs	r3, #0
 800140c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800140e:	4b20      	ldr	r3, [pc, #128]	; (8001490 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	220c      	movs	r2, #12
 8001418:	4013      	ands	r3, r2
 800141a:	2b04      	cmp	r3, #4
 800141c:	d002      	beq.n	8001424 <HAL_RCC_GetSysClockFreq+0x30>
 800141e:	2b08      	cmp	r3, #8
 8001420:	d003      	beq.n	800142a <HAL_RCC_GetSysClockFreq+0x36>
 8001422:	e02c      	b.n	800147e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001424:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001426:	613b      	str	r3, [r7, #16]
      break;
 8001428:	e02c      	b.n	8001484 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	0c9b      	lsrs	r3, r3, #18
 800142e:	220f      	movs	r2, #15
 8001430:	4013      	ands	r3, r2
 8001432:	4a19      	ldr	r2, [pc, #100]	; (8001498 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001434:	5cd3      	ldrb	r3, [r2, r3]
 8001436:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001438:	4b15      	ldr	r3, [pc, #84]	; (8001490 <HAL_RCC_GetSysClockFreq+0x9c>)
 800143a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143c:	220f      	movs	r2, #15
 800143e:	4013      	ands	r3, r2
 8001440:	4a16      	ldr	r2, [pc, #88]	; (800149c <HAL_RCC_GetSysClockFreq+0xa8>)
 8001442:	5cd3      	ldrb	r3, [r2, r3]
 8001444:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	2380      	movs	r3, #128	; 0x80
 800144a:	025b      	lsls	r3, r3, #9
 800144c:	4013      	ands	r3, r2
 800144e:	d009      	beq.n	8001464 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001450:	68b9      	ldr	r1, [r7, #8]
 8001452:	4810      	ldr	r0, [pc, #64]	; (8001494 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001454:	f7fe fe58 	bl	8000108 <__udivsi3>
 8001458:	0003      	movs	r3, r0
 800145a:	001a      	movs	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4353      	muls	r3, r2
 8001460:	617b      	str	r3, [r7, #20]
 8001462:	e009      	b.n	8001478 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001464:	6879      	ldr	r1, [r7, #4]
 8001466:	000a      	movs	r2, r1
 8001468:	0152      	lsls	r2, r2, #5
 800146a:	1a52      	subs	r2, r2, r1
 800146c:	0193      	lsls	r3, r2, #6
 800146e:	1a9b      	subs	r3, r3, r2
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	185b      	adds	r3, r3, r1
 8001474:	021b      	lsls	r3, r3, #8
 8001476:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	613b      	str	r3, [r7, #16]
      break;
 800147c:	e002      	b.n	8001484 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800147e:	4b05      	ldr	r3, [pc, #20]	; (8001494 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001480:	613b      	str	r3, [r7, #16]
      break;
 8001482:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001484:	693b      	ldr	r3, [r7, #16]
}
 8001486:	0018      	movs	r0, r3
 8001488:	46bd      	mov	sp, r7
 800148a:	b006      	add	sp, #24
 800148c:	bd80      	pop	{r7, pc}
 800148e:	46c0      	nop			; (mov r8, r8)
 8001490:	40021000 	.word	0x40021000
 8001494:	007a1200 	.word	0x007a1200
 8001498:	08002610 	.word	0x08002610
 800149c:	08002620 	.word	0x08002620

080014a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014a4:	4b02      	ldr	r3, [pc, #8]	; (80014b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80014a6:	681b      	ldr	r3, [r3, #0]
}
 80014a8:	0018      	movs	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	20000000 	.word	0x20000000

080014b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80014b8:	f7ff fff2 	bl	80014a0 <HAL_RCC_GetHCLKFreq>
 80014bc:	0001      	movs	r1, r0
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	0a1b      	lsrs	r3, r3, #8
 80014c4:	2207      	movs	r2, #7
 80014c6:	4013      	ands	r3, r2
 80014c8:	4a04      	ldr	r2, [pc, #16]	; (80014dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80014ca:	5cd3      	ldrb	r3, [r2, r3]
 80014cc:	40d9      	lsrs	r1, r3
 80014ce:	000b      	movs	r3, r1
}    
 80014d0:	0018      	movs	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	40021000 	.word	0x40021000
 80014dc:	08002608 	.word	0x08002608

080014e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014e8:	2300      	movs	r3, #0
 80014ea:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	2380      	movs	r3, #128	; 0x80
 80014f6:	025b      	lsls	r3, r3, #9
 80014f8:	4013      	ands	r3, r2
 80014fa:	d100      	bne.n	80014fe <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80014fc:	e08e      	b.n	800161c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80014fe:	2017      	movs	r0, #23
 8001500:	183b      	adds	r3, r7, r0
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001506:	4b57      	ldr	r3, [pc, #348]	; (8001664 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001508:	69da      	ldr	r2, [r3, #28]
 800150a:	2380      	movs	r3, #128	; 0x80
 800150c:	055b      	lsls	r3, r3, #21
 800150e:	4013      	ands	r3, r2
 8001510:	d110      	bne.n	8001534 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001512:	4b54      	ldr	r3, [pc, #336]	; (8001664 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001514:	69da      	ldr	r2, [r3, #28]
 8001516:	4b53      	ldr	r3, [pc, #332]	; (8001664 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001518:	2180      	movs	r1, #128	; 0x80
 800151a:	0549      	lsls	r1, r1, #21
 800151c:	430a      	orrs	r2, r1
 800151e:	61da      	str	r2, [r3, #28]
 8001520:	4b50      	ldr	r3, [pc, #320]	; (8001664 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001522:	69da      	ldr	r2, [r3, #28]
 8001524:	2380      	movs	r3, #128	; 0x80
 8001526:	055b      	lsls	r3, r3, #21
 8001528:	4013      	ands	r3, r2
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800152e:	183b      	adds	r3, r7, r0
 8001530:	2201      	movs	r2, #1
 8001532:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001534:	4b4c      	ldr	r3, [pc, #304]	; (8001668 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	2380      	movs	r3, #128	; 0x80
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	4013      	ands	r3, r2
 800153e:	d11a      	bne.n	8001576 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001540:	4b49      	ldr	r3, [pc, #292]	; (8001668 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4b48      	ldr	r3, [pc, #288]	; (8001668 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001546:	2180      	movs	r1, #128	; 0x80
 8001548:	0049      	lsls	r1, r1, #1
 800154a:	430a      	orrs	r2, r1
 800154c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800154e:	f7ff f901 	bl	8000754 <HAL_GetTick>
 8001552:	0003      	movs	r3, r0
 8001554:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001556:	e008      	b.n	800156a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001558:	f7ff f8fc 	bl	8000754 <HAL_GetTick>
 800155c:	0002      	movs	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b64      	cmp	r3, #100	; 0x64
 8001564:	d901      	bls.n	800156a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e077      	b.n	800165a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156a:	4b3f      	ldr	r3, [pc, #252]	; (8001668 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	2380      	movs	r3, #128	; 0x80
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	4013      	ands	r3, r2
 8001574:	d0f0      	beq.n	8001558 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001576:	4b3b      	ldr	r3, [pc, #236]	; (8001664 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001578:	6a1a      	ldr	r2, [r3, #32]
 800157a:	23c0      	movs	r3, #192	; 0xc0
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4013      	ands	r3, r2
 8001580:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d034      	beq.n	80015f2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	23c0      	movs	r3, #192	; 0xc0
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4013      	ands	r3, r2
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	429a      	cmp	r2, r3
 8001596:	d02c      	beq.n	80015f2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001598:	4b32      	ldr	r3, [pc, #200]	; (8001664 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	4a33      	ldr	r2, [pc, #204]	; (800166c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800159e:	4013      	ands	r3, r2
 80015a0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80015a2:	4b30      	ldr	r3, [pc, #192]	; (8001664 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80015a4:	6a1a      	ldr	r2, [r3, #32]
 80015a6:	4b2f      	ldr	r3, [pc, #188]	; (8001664 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80015a8:	2180      	movs	r1, #128	; 0x80
 80015aa:	0249      	lsls	r1, r1, #9
 80015ac:	430a      	orrs	r2, r1
 80015ae:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80015b0:	4b2c      	ldr	r3, [pc, #176]	; (8001664 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80015b2:	6a1a      	ldr	r2, [r3, #32]
 80015b4:	4b2b      	ldr	r3, [pc, #172]	; (8001664 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80015b6:	492e      	ldr	r1, [pc, #184]	; (8001670 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80015b8:	400a      	ands	r2, r1
 80015ba:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80015bc:	4b29      	ldr	r3, [pc, #164]	; (8001664 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2201      	movs	r2, #1
 80015c6:	4013      	ands	r3, r2
 80015c8:	d013      	beq.n	80015f2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ca:	f7ff f8c3 	bl	8000754 <HAL_GetTick>
 80015ce:	0003      	movs	r3, r0
 80015d0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d2:	e009      	b.n	80015e8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015d4:	f7ff f8be 	bl	8000754 <HAL_GetTick>
 80015d8:	0002      	movs	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	4a25      	ldr	r2, [pc, #148]	; (8001674 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e038      	b.n	800165a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e8:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	2202      	movs	r2, #2
 80015ee:	4013      	ands	r3, r2
 80015f0:	d0f0      	beq.n	80015d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80015f2:	4b1c      	ldr	r3, [pc, #112]	; (8001664 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80015f4:	6a1b      	ldr	r3, [r3, #32]
 80015f6:	4a1d      	ldr	r2, [pc, #116]	; (800166c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	0019      	movs	r1, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	4b18      	ldr	r3, [pc, #96]	; (8001664 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001602:	430a      	orrs	r2, r1
 8001604:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001606:	2317      	movs	r3, #23
 8001608:	18fb      	adds	r3, r7, r3
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d105      	bne.n	800161c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001610:	4b14      	ldr	r3, [pc, #80]	; (8001664 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001612:	69da      	ldr	r2, [r3, #28]
 8001614:	4b13      	ldr	r3, [pc, #76]	; (8001664 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001616:	4918      	ldr	r1, [pc, #96]	; (8001678 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001618:	400a      	ands	r2, r1
 800161a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2201      	movs	r2, #1
 8001622:	4013      	ands	r3, r2
 8001624:	d009      	beq.n	800163a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001626:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	2203      	movs	r2, #3
 800162c:	4393      	bics	r3, r2
 800162e:	0019      	movs	r1, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001636:	430a      	orrs	r2, r1
 8001638:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2220      	movs	r2, #32
 8001640:	4013      	ands	r3, r2
 8001642:	d009      	beq.n	8001658 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001644:	4b07      	ldr	r3, [pc, #28]	; (8001664 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001648:	2210      	movs	r2, #16
 800164a:	4393      	bics	r3, r2
 800164c:	0019      	movs	r1, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68da      	ldr	r2, [r3, #12]
 8001652:	4b04      	ldr	r3, [pc, #16]	; (8001664 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001654:	430a      	orrs	r2, r1
 8001656:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	0018      	movs	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	b006      	add	sp, #24
 8001660:	bd80      	pop	{r7, pc}
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	40021000 	.word	0x40021000
 8001668:	40007000 	.word	0x40007000
 800166c:	fffffcff 	.word	0xfffffcff
 8001670:	fffeffff 	.word	0xfffeffff
 8001674:	00001388 	.word	0x00001388
 8001678:	efffffff 	.word	0xefffffff

0800167c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e044      	b.n	8001718 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001692:	2b00      	cmp	r3, #0
 8001694:	d107      	bne.n	80016a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2278      	movs	r2, #120	; 0x78
 800169a:	2100      	movs	r1, #0
 800169c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	0018      	movs	r0, r3
 80016a2:	f7fe ff2f 	bl	8000504 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2224      	movs	r2, #36	; 0x24
 80016aa:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2101      	movs	r1, #1
 80016b8:	438a      	bics	r2, r1
 80016ba:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	0018      	movs	r0, r3
 80016c8:	f000 f96c 	bl	80019a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	0018      	movs	r0, r3
 80016d0:	f000 f828 	bl	8001724 <UART_SetConfig>
 80016d4:	0003      	movs	r3, r0
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d101      	bne.n	80016de <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e01c      	b.n	8001718 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	490d      	ldr	r1, [pc, #52]	; (8001720 <HAL_UART_Init+0xa4>)
 80016ea:	400a      	ands	r2, r1
 80016ec:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2108      	movs	r1, #8
 80016fa:	438a      	bics	r2, r1
 80016fc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2101      	movs	r1, #1
 800170a:	430a      	orrs	r2, r1
 800170c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	0018      	movs	r0, r3
 8001712:	f000 f9fb 	bl	8001b0c <UART_CheckIdleState>
 8001716:	0003      	movs	r3, r0
}
 8001718:	0018      	movs	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	b002      	add	sp, #8
 800171e:	bd80      	pop	{r7, pc}
 8001720:	fffff7ff 	.word	0xfffff7ff

08001724 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b088      	sub	sp, #32
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800172c:	231e      	movs	r3, #30
 800172e:	18fb      	adds	r3, r7, r3
 8001730:	2200      	movs	r2, #0
 8001732:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	431a      	orrs	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	431a      	orrs	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	4313      	orrs	r3, r2
 800174a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a8d      	ldr	r2, [pc, #564]	; (8001988 <UART_SetConfig+0x264>)
 8001754:	4013      	ands	r3, r2
 8001756:	0019      	movs	r1, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	697a      	ldr	r2, [r7, #20]
 800175e:	430a      	orrs	r2, r1
 8001760:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	4a88      	ldr	r2, [pc, #544]	; (800198c <UART_SetConfig+0x268>)
 800176a:	4013      	ands	r3, r2
 800176c:	0019      	movs	r1, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68da      	ldr	r2, [r3, #12]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	430a      	orrs	r2, r1
 8001778:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a1b      	ldr	r3, [r3, #32]
 8001784:	697a      	ldr	r2, [r7, #20]
 8001786:	4313      	orrs	r3, r2
 8001788:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	4a7f      	ldr	r2, [pc, #508]	; (8001990 <UART_SetConfig+0x26c>)
 8001792:	4013      	ands	r3, r2
 8001794:	0019      	movs	r1, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	430a      	orrs	r2, r1
 800179e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a7b      	ldr	r2, [pc, #492]	; (8001994 <UART_SetConfig+0x270>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d127      	bne.n	80017fa <UART_SetConfig+0xd6>
 80017aa:	4b7b      	ldr	r3, [pc, #492]	; (8001998 <UART_SetConfig+0x274>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	2203      	movs	r2, #3
 80017b0:	4013      	ands	r3, r2
 80017b2:	2b03      	cmp	r3, #3
 80017b4:	d00d      	beq.n	80017d2 <UART_SetConfig+0xae>
 80017b6:	d81b      	bhi.n	80017f0 <UART_SetConfig+0xcc>
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d014      	beq.n	80017e6 <UART_SetConfig+0xc2>
 80017bc:	d818      	bhi.n	80017f0 <UART_SetConfig+0xcc>
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d002      	beq.n	80017c8 <UART_SetConfig+0xa4>
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d00a      	beq.n	80017dc <UART_SetConfig+0xb8>
 80017c6:	e013      	b.n	80017f0 <UART_SetConfig+0xcc>
 80017c8:	231f      	movs	r3, #31
 80017ca:	18fb      	adds	r3, r7, r3
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]
 80017d0:	e021      	b.n	8001816 <UART_SetConfig+0xf2>
 80017d2:	231f      	movs	r3, #31
 80017d4:	18fb      	adds	r3, r7, r3
 80017d6:	2202      	movs	r2, #2
 80017d8:	701a      	strb	r2, [r3, #0]
 80017da:	e01c      	b.n	8001816 <UART_SetConfig+0xf2>
 80017dc:	231f      	movs	r3, #31
 80017de:	18fb      	adds	r3, r7, r3
 80017e0:	2204      	movs	r2, #4
 80017e2:	701a      	strb	r2, [r3, #0]
 80017e4:	e017      	b.n	8001816 <UART_SetConfig+0xf2>
 80017e6:	231f      	movs	r3, #31
 80017e8:	18fb      	adds	r3, r7, r3
 80017ea:	2208      	movs	r2, #8
 80017ec:	701a      	strb	r2, [r3, #0]
 80017ee:	e012      	b.n	8001816 <UART_SetConfig+0xf2>
 80017f0:	231f      	movs	r3, #31
 80017f2:	18fb      	adds	r3, r7, r3
 80017f4:	2210      	movs	r2, #16
 80017f6:	701a      	strb	r2, [r3, #0]
 80017f8:	e00d      	b.n	8001816 <UART_SetConfig+0xf2>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a67      	ldr	r2, [pc, #412]	; (800199c <UART_SetConfig+0x278>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d104      	bne.n	800180e <UART_SetConfig+0xea>
 8001804:	231f      	movs	r3, #31
 8001806:	18fb      	adds	r3, r7, r3
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]
 800180c:	e003      	b.n	8001816 <UART_SetConfig+0xf2>
 800180e:	231f      	movs	r3, #31
 8001810:	18fb      	adds	r3, r7, r3
 8001812:	2210      	movs	r2, #16
 8001814:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	69da      	ldr	r2, [r3, #28]
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	021b      	lsls	r3, r3, #8
 800181e:	429a      	cmp	r2, r3
 8001820:	d15c      	bne.n	80018dc <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8001822:	231f      	movs	r3, #31
 8001824:	18fb      	adds	r3, r7, r3
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b08      	cmp	r3, #8
 800182a:	d015      	beq.n	8001858 <UART_SetConfig+0x134>
 800182c:	dc18      	bgt.n	8001860 <UART_SetConfig+0x13c>
 800182e:	2b04      	cmp	r3, #4
 8001830:	d00d      	beq.n	800184e <UART_SetConfig+0x12a>
 8001832:	dc15      	bgt.n	8001860 <UART_SetConfig+0x13c>
 8001834:	2b00      	cmp	r3, #0
 8001836:	d002      	beq.n	800183e <UART_SetConfig+0x11a>
 8001838:	2b02      	cmp	r3, #2
 800183a:	d005      	beq.n	8001848 <UART_SetConfig+0x124>
 800183c:	e010      	b.n	8001860 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800183e:	f7ff fe39 	bl	80014b4 <HAL_RCC_GetPCLK1Freq>
 8001842:	0003      	movs	r3, r0
 8001844:	61bb      	str	r3, [r7, #24]
        break;
 8001846:	e012      	b.n	800186e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001848:	4b55      	ldr	r3, [pc, #340]	; (80019a0 <UART_SetConfig+0x27c>)
 800184a:	61bb      	str	r3, [r7, #24]
        break;
 800184c:	e00f      	b.n	800186e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800184e:	f7ff fdd1 	bl	80013f4 <HAL_RCC_GetSysClockFreq>
 8001852:	0003      	movs	r3, r0
 8001854:	61bb      	str	r3, [r7, #24]
        break;
 8001856:	e00a      	b.n	800186e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	021b      	lsls	r3, r3, #8
 800185c:	61bb      	str	r3, [r7, #24]
        break;
 800185e:	e006      	b.n	800186e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8001860:	2300      	movs	r3, #0
 8001862:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001864:	231e      	movs	r3, #30
 8001866:	18fb      	adds	r3, r7, r3
 8001868:	2201      	movs	r2, #1
 800186a:	701a      	strb	r2, [r3, #0]
        break;
 800186c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d100      	bne.n	8001876 <UART_SetConfig+0x152>
 8001874:	e07a      	b.n	800196c <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	005a      	lsls	r2, r3, #1
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	085b      	lsrs	r3, r3, #1
 8001880:	18d2      	adds	r2, r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	0019      	movs	r1, r3
 8001888:	0010      	movs	r0, r2
 800188a:	f7fe fc3d 	bl	8000108 <__udivsi3>
 800188e:	0003      	movs	r3, r0
 8001890:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	2b0f      	cmp	r3, #15
 8001896:	d91c      	bls.n	80018d2 <UART_SetConfig+0x1ae>
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	2380      	movs	r3, #128	; 0x80
 800189c:	025b      	lsls	r3, r3, #9
 800189e:	429a      	cmp	r2, r3
 80018a0:	d217      	bcs.n	80018d2 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	200e      	movs	r0, #14
 80018a8:	183b      	adds	r3, r7, r0
 80018aa:	210f      	movs	r1, #15
 80018ac:	438a      	bics	r2, r1
 80018ae:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	085b      	lsrs	r3, r3, #1
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	2207      	movs	r2, #7
 80018b8:	4013      	ands	r3, r2
 80018ba:	b299      	uxth	r1, r3
 80018bc:	183b      	adds	r3, r7, r0
 80018be:	183a      	adds	r2, r7, r0
 80018c0:	8812      	ldrh	r2, [r2, #0]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	183a      	adds	r2, r7, r0
 80018cc:	8812      	ldrh	r2, [r2, #0]
 80018ce:	60da      	str	r2, [r3, #12]
 80018d0:	e04c      	b.n	800196c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80018d2:	231e      	movs	r3, #30
 80018d4:	18fb      	adds	r3, r7, r3
 80018d6:	2201      	movs	r2, #1
 80018d8:	701a      	strb	r2, [r3, #0]
 80018da:	e047      	b.n	800196c <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80018dc:	231f      	movs	r3, #31
 80018de:	18fb      	adds	r3, r7, r3
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b08      	cmp	r3, #8
 80018e4:	d015      	beq.n	8001912 <UART_SetConfig+0x1ee>
 80018e6:	dc18      	bgt.n	800191a <UART_SetConfig+0x1f6>
 80018e8:	2b04      	cmp	r3, #4
 80018ea:	d00d      	beq.n	8001908 <UART_SetConfig+0x1e4>
 80018ec:	dc15      	bgt.n	800191a <UART_SetConfig+0x1f6>
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d002      	beq.n	80018f8 <UART_SetConfig+0x1d4>
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d005      	beq.n	8001902 <UART_SetConfig+0x1de>
 80018f6:	e010      	b.n	800191a <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80018f8:	f7ff fddc 	bl	80014b4 <HAL_RCC_GetPCLK1Freq>
 80018fc:	0003      	movs	r3, r0
 80018fe:	61bb      	str	r3, [r7, #24]
        break;
 8001900:	e012      	b.n	8001928 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001902:	4b27      	ldr	r3, [pc, #156]	; (80019a0 <UART_SetConfig+0x27c>)
 8001904:	61bb      	str	r3, [r7, #24]
        break;
 8001906:	e00f      	b.n	8001928 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001908:	f7ff fd74 	bl	80013f4 <HAL_RCC_GetSysClockFreq>
 800190c:	0003      	movs	r3, r0
 800190e:	61bb      	str	r3, [r7, #24]
        break;
 8001910:	e00a      	b.n	8001928 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001912:	2380      	movs	r3, #128	; 0x80
 8001914:	021b      	lsls	r3, r3, #8
 8001916:	61bb      	str	r3, [r7, #24]
        break;
 8001918:	e006      	b.n	8001928 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800191a:	2300      	movs	r3, #0
 800191c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800191e:	231e      	movs	r3, #30
 8001920:	18fb      	adds	r3, r7, r3
 8001922:	2201      	movs	r2, #1
 8001924:	701a      	strb	r2, [r3, #0]
        break;
 8001926:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d01e      	beq.n	800196c <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	085a      	lsrs	r2, r3, #1
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	18d2      	adds	r2, r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	0019      	movs	r1, r3
 800193e:	0010      	movs	r0, r2
 8001940:	f7fe fbe2 	bl	8000108 <__udivsi3>
 8001944:	0003      	movs	r3, r0
 8001946:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	2b0f      	cmp	r3, #15
 800194c:	d90a      	bls.n	8001964 <UART_SetConfig+0x240>
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	2380      	movs	r3, #128	; 0x80
 8001952:	025b      	lsls	r3, r3, #9
 8001954:	429a      	cmp	r2, r3
 8001956:	d205      	bcs.n	8001964 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	b29a      	uxth	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	e003      	b.n	800196c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8001964:	231e      	movs	r3, #30
 8001966:	18fb      	adds	r3, r7, r3
 8001968:	2201      	movs	r2, #1
 800196a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8001978:	231e      	movs	r3, #30
 800197a:	18fb      	adds	r3, r7, r3
 800197c:	781b      	ldrb	r3, [r3, #0]
}
 800197e:	0018      	movs	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	b008      	add	sp, #32
 8001984:	bd80      	pop	{r7, pc}
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	ffff69f3 	.word	0xffff69f3
 800198c:	ffffcfff 	.word	0xffffcfff
 8001990:	fffff4ff 	.word	0xfffff4ff
 8001994:	40013800 	.word	0x40013800
 8001998:	40021000 	.word	0x40021000
 800199c:	40004400 	.word	0x40004400
 80019a0:	007a1200 	.word	0x007a1200

080019a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b0:	2208      	movs	r2, #8
 80019b2:	4013      	ands	r3, r2
 80019b4:	d00b      	beq.n	80019ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	4a4a      	ldr	r2, [pc, #296]	; (8001ae8 <UART_AdvFeatureConfig+0x144>)
 80019be:	4013      	ands	r3, r2
 80019c0:	0019      	movs	r1, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d2:	2201      	movs	r2, #1
 80019d4:	4013      	ands	r3, r2
 80019d6:	d00b      	beq.n	80019f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	4a43      	ldr	r2, [pc, #268]	; (8001aec <UART_AdvFeatureConfig+0x148>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	0019      	movs	r1, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f4:	2202      	movs	r2, #2
 80019f6:	4013      	ands	r3, r2
 80019f8:	d00b      	beq.n	8001a12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	4a3b      	ldr	r2, [pc, #236]	; (8001af0 <UART_AdvFeatureConfig+0x14c>)
 8001a02:	4013      	ands	r3, r2
 8001a04:	0019      	movs	r1, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	2204      	movs	r2, #4
 8001a18:	4013      	ands	r3, r2
 8001a1a:	d00b      	beq.n	8001a34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	4a34      	ldr	r2, [pc, #208]	; (8001af4 <UART_AdvFeatureConfig+0x150>)
 8001a24:	4013      	ands	r3, r2
 8001a26:	0019      	movs	r1, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a38:	2210      	movs	r2, #16
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d00b      	beq.n	8001a56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	4a2c      	ldr	r2, [pc, #176]	; (8001af8 <UART_AdvFeatureConfig+0x154>)
 8001a46:	4013      	ands	r3, r2
 8001a48:	0019      	movs	r1, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5a:	2220      	movs	r2, #32
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	d00b      	beq.n	8001a78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	4a25      	ldr	r2, [pc, #148]	; (8001afc <UART_AdvFeatureConfig+0x158>)
 8001a68:	4013      	ands	r3, r2
 8001a6a:	0019      	movs	r1, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	430a      	orrs	r2, r1
 8001a76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7c:	2240      	movs	r2, #64	; 0x40
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d01d      	beq.n	8001abe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	4a1d      	ldr	r2, [pc, #116]	; (8001b00 <UART_AdvFeatureConfig+0x15c>)
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	0019      	movs	r1, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a9e:	2380      	movs	r3, #128	; 0x80
 8001aa0:	035b      	lsls	r3, r3, #13
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d10b      	bne.n	8001abe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	4a15      	ldr	r2, [pc, #84]	; (8001b04 <UART_AdvFeatureConfig+0x160>)
 8001aae:	4013      	ands	r3, r2
 8001ab0:	0019      	movs	r1, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	2280      	movs	r2, #128	; 0x80
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d00b      	beq.n	8001ae0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	4a0e      	ldr	r2, [pc, #56]	; (8001b08 <UART_AdvFeatureConfig+0x164>)
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	0019      	movs	r1, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	430a      	orrs	r2, r1
 8001ade:	605a      	str	r2, [r3, #4]
  }
}
 8001ae0:	46c0      	nop			; (mov r8, r8)
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	b002      	add	sp, #8
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	ffff7fff 	.word	0xffff7fff
 8001aec:	fffdffff 	.word	0xfffdffff
 8001af0:	fffeffff 	.word	0xfffeffff
 8001af4:	fffbffff 	.word	0xfffbffff
 8001af8:	ffffefff 	.word	0xffffefff
 8001afc:	ffffdfff 	.word	0xffffdfff
 8001b00:	ffefffff 	.word	0xffefffff
 8001b04:	ff9fffff 	.word	0xff9fffff
 8001b08:	fff7ffff 	.word	0xfff7ffff

08001b0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b092      	sub	sp, #72	; 0x48
 8001b10:	af02      	add	r7, sp, #8
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2284      	movs	r2, #132	; 0x84
 8001b18:	2100      	movs	r1, #0
 8001b1a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001b1c:	f7fe fe1a 	bl	8000754 <HAL_GetTick>
 8001b20:	0003      	movs	r3, r0
 8001b22:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2208      	movs	r2, #8
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	2b08      	cmp	r3, #8
 8001b30:	d12c      	bne.n	8001b8c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b34:	2280      	movs	r2, #128	; 0x80
 8001b36:	0391      	lsls	r1, r2, #14
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	4a46      	ldr	r2, [pc, #280]	; (8001c54 <UART_CheckIdleState+0x148>)
 8001b3c:	9200      	str	r2, [sp, #0]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f000 f88c 	bl	8001c5c <UART_WaitOnFlagUntilTimeout>
 8001b44:	1e03      	subs	r3, r0, #0
 8001b46:	d021      	beq.n	8001b8c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b48:	f3ef 8310 	mrs	r3, PRIMASK
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8001b50:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b52:	2301      	movs	r3, #1
 8001b54:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b58:	f383 8810 	msr	PRIMASK, r3
}
 8001b5c:	46c0      	nop			; (mov r8, r8)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2180      	movs	r1, #128	; 0x80
 8001b6a:	438a      	bics	r2, r1
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b74:	f383 8810 	msr	PRIMASK, r3
}
 8001b78:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2220      	movs	r2, #32
 8001b7e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2278      	movs	r2, #120	; 0x78
 8001b84:	2100      	movs	r1, #0
 8001b86:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e05f      	b.n	8001c4c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2204      	movs	r2, #4
 8001b94:	4013      	ands	r3, r2
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d146      	bne.n	8001c28 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b9c:	2280      	movs	r2, #128	; 0x80
 8001b9e:	03d1      	lsls	r1, r2, #15
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	4a2c      	ldr	r2, [pc, #176]	; (8001c54 <UART_CheckIdleState+0x148>)
 8001ba4:	9200      	str	r2, [sp, #0]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f000 f858 	bl	8001c5c <UART_WaitOnFlagUntilTimeout>
 8001bac:	1e03      	subs	r3, r0, #0
 8001bae:	d03b      	beq.n	8001c28 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bb0:	f3ef 8310 	mrs	r3, PRIMASK
 8001bb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001bb8:	637b      	str	r3, [r7, #52]	; 0x34
 8001bba:	2301      	movs	r3, #1
 8001bbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	f383 8810 	msr	PRIMASK, r3
}
 8001bc4:	46c0      	nop			; (mov r8, r8)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4921      	ldr	r1, [pc, #132]	; (8001c58 <UART_CheckIdleState+0x14c>)
 8001bd2:	400a      	ands	r2, r1
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bd8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	f383 8810 	msr	PRIMASK, r3
}
 8001be0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001be2:	f3ef 8310 	mrs	r3, PRIMASK
 8001be6:	61bb      	str	r3, [r7, #24]
  return(result);
 8001be8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bea:	633b      	str	r3, [r7, #48]	; 0x30
 8001bec:	2301      	movs	r3, #1
 8001bee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f383 8810 	msr	PRIMASK, r3
}
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689a      	ldr	r2, [r3, #8]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2101      	movs	r1, #1
 8001c04:	438a      	bics	r2, r1
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c0a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c0c:	6a3b      	ldr	r3, [r7, #32]
 8001c0e:	f383 8810 	msr	PRIMASK, r3
}
 8001c12:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2280      	movs	r2, #128	; 0x80
 8001c18:	2120      	movs	r1, #32
 8001c1a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2278      	movs	r2, #120	; 0x78
 8001c20:	2100      	movs	r1, #0
 8001c22:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e011      	b.n	8001c4c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2220      	movs	r2, #32
 8001c2c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2280      	movs	r2, #128	; 0x80
 8001c32:	2120      	movs	r1, #32
 8001c34:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2278      	movs	r2, #120	; 0x78
 8001c46:	2100      	movs	r1, #0
 8001c48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	b010      	add	sp, #64	; 0x40
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	01ffffff 	.word	0x01ffffff
 8001c58:	fffffedf 	.word	0xfffffedf

08001c5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	603b      	str	r3, [r7, #0]
 8001c68:	1dfb      	adds	r3, r7, #7
 8001c6a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c6c:	e051      	b.n	8001d12 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	3301      	adds	r3, #1
 8001c72:	d04e      	beq.n	8001d12 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c74:	f7fe fd6e 	bl	8000754 <HAL_GetTick>
 8001c78:	0002      	movs	r2, r0
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d302      	bcc.n	8001c8a <UART_WaitOnFlagUntilTimeout+0x2e>
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e051      	b.n	8001d32 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2204      	movs	r2, #4
 8001c96:	4013      	ands	r3, r2
 8001c98:	d03b      	beq.n	8001d12 <UART_WaitOnFlagUntilTimeout+0xb6>
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	2b80      	cmp	r3, #128	; 0x80
 8001c9e:	d038      	beq.n	8001d12 <UART_WaitOnFlagUntilTimeout+0xb6>
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	2b40      	cmp	r3, #64	; 0x40
 8001ca4:	d035      	beq.n	8001d12 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	2208      	movs	r2, #8
 8001cae:	4013      	ands	r3, r2
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d111      	bne.n	8001cd8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2208      	movs	r2, #8
 8001cba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	f000 f83c 	bl	8001d3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2284      	movs	r2, #132	; 0x84
 8001cc8:	2108      	movs	r1, #8
 8001cca:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2278      	movs	r2, #120	; 0x78
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e02c      	b.n	8001d32 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	69da      	ldr	r2, [r3, #28]
 8001cde:	2380      	movs	r3, #128	; 0x80
 8001ce0:	011b      	lsls	r3, r3, #4
 8001ce2:	401a      	ands	r2, r3
 8001ce4:	2380      	movs	r3, #128	; 0x80
 8001ce6:	011b      	lsls	r3, r3, #4
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d112      	bne.n	8001d12 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2280      	movs	r2, #128	; 0x80
 8001cf2:	0112      	lsls	r2, r2, #4
 8001cf4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	f000 f81f 	bl	8001d3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2284      	movs	r2, #132	; 0x84
 8001d02:	2120      	movs	r1, #32
 8001d04:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2278      	movs	r2, #120	; 0x78
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e00f      	b.n	8001d32 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	69db      	ldr	r3, [r3, #28]
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	68ba      	ldr	r2, [r7, #8]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	425a      	negs	r2, r3
 8001d22:	4153      	adcs	r3, r2
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	001a      	movs	r2, r3
 8001d28:	1dfb      	adds	r3, r7, #7
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d09e      	beq.n	8001c6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	0018      	movs	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	b004      	add	sp, #16
 8001d38:	bd80      	pop	{r7, pc}
	...

08001d3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08e      	sub	sp, #56	; 0x38
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d44:	f3ef 8310 	mrs	r3, PRIMASK
 8001d48:	617b      	str	r3, [r7, #20]
  return(result);
 8001d4a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d4c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d4e:	2301      	movs	r3, #1
 8001d50:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	f383 8810 	msr	PRIMASK, r3
}
 8001d58:	46c0      	nop			; (mov r8, r8)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4926      	ldr	r1, [pc, #152]	; (8001e00 <UART_EndRxTransfer+0xc4>)
 8001d66:	400a      	ands	r2, r1
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	f383 8810 	msr	PRIMASK, r3
}
 8001d74:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d76:	f3ef 8310 	mrs	r3, PRIMASK
 8001d7a:	623b      	str	r3, [r7, #32]
  return(result);
 8001d7c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d7e:	633b      	str	r3, [r7, #48]	; 0x30
 8001d80:	2301      	movs	r3, #1
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	f383 8810 	msr	PRIMASK, r3
}
 8001d8a:	46c0      	nop			; (mov r8, r8)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2101      	movs	r1, #1
 8001d98:	438a      	bics	r2, r1
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da2:	f383 8810 	msr	PRIMASK, r3
}
 8001da6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d118      	bne.n	8001de2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001db0:	f3ef 8310 	mrs	r3, PRIMASK
 8001db4:	60bb      	str	r3, [r7, #8]
  return(result);
 8001db6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001db8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dba:	2301      	movs	r3, #1
 8001dbc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f383 8810 	msr	PRIMASK, r3
}
 8001dc4:	46c0      	nop			; (mov r8, r8)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2110      	movs	r1, #16
 8001dd2:	438a      	bics	r2, r1
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	f383 8810 	msr	PRIMASK, r3
}
 8001de0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2280      	movs	r2, #128	; 0x80
 8001de6:	2120      	movs	r1, #32
 8001de8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8001df6:	46c0      	nop			; (mov r8, r8)
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	b00e      	add	sp, #56	; 0x38
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	fffffedf 	.word	0xfffffedf

08001e04 <TM1638_StartComunication>:
 ==================================================================================
 */

static inline void
TM1638_StartComunication(TM1638_Handler_t *Handler)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  Handler->StbWrite(0);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	2000      	movs	r0, #0
 8001e12:	4798      	blx	r3
}
 8001e14:	46c0      	nop			; (mov r8, r8)
 8001e16:	46bd      	mov	sp, r7
 8001e18:	b002      	add	sp, #8
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <TM1638_StopComunication>:

static inline void
TM1638_StopComunication(TM1638_Handler_t *Handler)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  Handler->StbWrite(1);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69db      	ldr	r3, [r3, #28]
 8001e28:	2001      	movs	r0, #1
 8001e2a:	4798      	blx	r3
}
 8001e2c:	46c0      	nop			; (mov r8, r8)
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	b002      	add	sp, #8
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <TM1638_WriteBytes>:

static void
TM1638_WriteBytes(TM1638_Handler_t *Handler,
                  const uint8_t *Data, uint8_t NumOfBytes)
{
 8001e34:	b590      	push	{r4, r7, lr}
 8001e36:	b087      	sub	sp, #28
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	1dfb      	adds	r3, r7, #7
 8001e40:	701a      	strb	r2, [r3, #0]
  uint8_t i, j, Buff;

  Handler->DioConfigOut();
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	4798      	blx	r3

  for (j = 0; j < NumOfBytes; j++)
 8001e48:	2316      	movs	r3, #22
 8001e4a:	18fb      	adds	r3, r7, r3
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	701a      	strb	r2, [r3, #0]
 8001e50:	e03d      	b.n	8001ece <TM1638_WriteBytes+0x9a>
  {
    for (i = 0, Buff = Data[j]; i < 8; ++i, Buff >>= 1)
 8001e52:	2317      	movs	r3, #23
 8001e54:	18fb      	adds	r3, r7, r3
 8001e56:	2200      	movs	r2, #0
 8001e58:	701a      	strb	r2, [r3, #0]
 8001e5a:	2316      	movs	r3, #22
 8001e5c:	18fb      	adds	r3, r7, r3
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	68ba      	ldr	r2, [r7, #8]
 8001e62:	18d2      	adds	r2, r2, r3
 8001e64:	2315      	movs	r3, #21
 8001e66:	18fb      	adds	r3, r7, r3
 8001e68:	7812      	ldrb	r2, [r2, #0]
 8001e6a:	701a      	strb	r2, [r3, #0]
 8001e6c:	e024      	b.n	8001eb8 <TM1638_WriteBytes+0x84>
    {
      Handler->ClkWrite(0);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	2000      	movs	r0, #0
 8001e74:	4798      	blx	r3
      Handler->DelayUs(1);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	2001      	movs	r0, #1
 8001e7c:	4798      	blx	r3
      Handler->DioWrite(Buff & 0x01);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	2415      	movs	r4, #21
 8001e84:	193a      	adds	r2, r7, r4
 8001e86:	7812      	ldrb	r2, [r2, #0]
 8001e88:	2101      	movs	r1, #1
 8001e8a:	400a      	ands	r2, r1
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	0010      	movs	r0, r2
 8001e90:	4798      	blx	r3
      Handler->ClkWrite(1);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	2001      	movs	r0, #1
 8001e98:	4798      	blx	r3
      Handler->DelayUs(1);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	2001      	movs	r0, #1
 8001ea0:	4798      	blx	r3
    for (i = 0, Buff = Data[j]; i < 8; ++i, Buff >>= 1)
 8001ea2:	2217      	movs	r2, #23
 8001ea4:	18bb      	adds	r3, r7, r2
 8001ea6:	18ba      	adds	r2, r7, r2
 8001ea8:	7812      	ldrb	r2, [r2, #0]
 8001eaa:	3201      	adds	r2, #1
 8001eac:	701a      	strb	r2, [r3, #0]
 8001eae:	193b      	adds	r3, r7, r4
 8001eb0:	193a      	adds	r2, r7, r4
 8001eb2:	7812      	ldrb	r2, [r2, #0]
 8001eb4:	0852      	lsrs	r2, r2, #1
 8001eb6:	701a      	strb	r2, [r3, #0]
 8001eb8:	2317      	movs	r3, #23
 8001eba:	18fb      	adds	r3, r7, r3
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b07      	cmp	r3, #7
 8001ec0:	d9d5      	bls.n	8001e6e <TM1638_WriteBytes+0x3a>
  for (j = 0; j < NumOfBytes; j++)
 8001ec2:	2116      	movs	r1, #22
 8001ec4:	187b      	adds	r3, r7, r1
 8001ec6:	781a      	ldrb	r2, [r3, #0]
 8001ec8:	187b      	adds	r3, r7, r1
 8001eca:	3201      	adds	r2, #1
 8001ecc:	701a      	strb	r2, [r3, #0]
 8001ece:	2316      	movs	r3, #22
 8001ed0:	18fa      	adds	r2, r7, r3
 8001ed2:	1dfb      	adds	r3, r7, #7
 8001ed4:	7812      	ldrb	r2, [r2, #0]
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d3ba      	bcc.n	8001e52 <TM1638_WriteBytes+0x1e>
    }
  }
}
 8001edc:	46c0      	nop			; (mov r8, r8)
 8001ede:	46c0      	nop			; (mov r8, r8)
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	b007      	add	sp, #28
 8001ee4:	bd90      	pop	{r4, r7, pc}

08001ee6 <TM1638_SetMultipleDisplayRegister>:

static void
TM1638_SetMultipleDisplayRegister(TM1638_Handler_t *Handler,
                                  const uint8_t *DigitData,
                                  uint8_t StartAddr, uint8_t Count)
{
 8001ee6:	b590      	push	{r4, r7, lr}
 8001ee8:	b087      	sub	sp, #28
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	60f8      	str	r0, [r7, #12]
 8001eee:	60b9      	str	r1, [r7, #8]
 8001ef0:	0019      	movs	r1, r3
 8001ef2:	1dfb      	adds	r3, r7, #7
 8001ef4:	701a      	strb	r2, [r3, #0]
 8001ef6:	1dbb      	adds	r3, r7, #6
 8001ef8:	1c0a      	adds	r2, r1, #0
 8001efa:	701a      	strb	r2, [r3, #0]
  uint8_t Data = DataInstructionSet | WriteDataToRegister |
 8001efc:	2417      	movs	r4, #23
 8001efe:	193b      	adds	r3, r7, r4
 8001f00:	2240      	movs	r2, #64	; 0x40
 8001f02:	701a      	strb	r2, [r3, #0]
                 AutoAddressAdd | NormalMode;

  TM1638_StartComunication(Handler);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	0018      	movs	r0, r3
 8001f08:	f7ff ff7c 	bl	8001e04 <TM1638_StartComunication>
  TM1638_WriteBytes(Handler, &Data, 1);
 8001f0c:	1939      	adds	r1, r7, r4
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2201      	movs	r2, #1
 8001f12:	0018      	movs	r0, r3
 8001f14:	f7ff ff8e 	bl	8001e34 <TM1638_WriteBytes>
  TM1638_StopComunication(Handler);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	f7ff ff7e 	bl	8001e1c <TM1638_StopComunication>

  Data = AddressInstructionSet | StartAddr;
 8001f20:	1dfb      	adds	r3, r7, #7
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2240      	movs	r2, #64	; 0x40
 8001f26:	4252      	negs	r2, r2
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	193b      	adds	r3, r7, r4
 8001f2e:	701a      	strb	r2, [r3, #0]

  TM1638_StartComunication(Handler);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	0018      	movs	r0, r3
 8001f34:	f7ff ff66 	bl	8001e04 <TM1638_StartComunication>
  TM1638_WriteBytes(Handler, &Data, 1);
 8001f38:	1939      	adds	r1, r7, r4
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	0018      	movs	r0, r3
 8001f40:	f7ff ff78 	bl	8001e34 <TM1638_WriteBytes>
  TM1638_WriteBytes(Handler, DigitData, Count);
 8001f44:	1dbb      	adds	r3, r7, #6
 8001f46:	781a      	ldrb	r2, [r3, #0]
 8001f48:	68b9      	ldr	r1, [r7, #8]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	f7ff ff71 	bl	8001e34 <TM1638_WriteBytes>
  TM1638_StopComunication(Handler);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	0018      	movs	r0, r3
 8001f56:	f7ff ff61 	bl	8001e1c <TM1638_StopComunication>
}
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	b007      	add	sp, #28
 8001f60:	bd90      	pop	{r4, r7, pc}

08001f62 <TM1638_Init>:
 * @retval TM1638_Result_t
 *         - TM1638_OK: Operation was successful.
 */
TM1638_Result_t
TM1638_Init(TM1638_Handler_t *Handler, uint8_t Type)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b084      	sub	sp, #16
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
 8001f6a:	000a      	movs	r2, r1
 8001f6c:	1cfb      	adds	r3, r7, #3
 8001f6e:	701a      	strb	r2, [r3, #0]
  Handler->DisplayType = TM1638DisplayTypeComCathode;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2224      	movs	r2, #36	; 0x24
 8001f74:	2100      	movs	r1, #0
 8001f76:	5499      	strb	r1, [r3, r2]

#if TM1638_CONFIG_SUPPORT_COM_ANODE
  for (uint8_t i = 0; i < 16; i++)
 8001f78:	230f      	movs	r3, #15
 8001f7a:	18fb      	adds	r3, r7, r3
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	701a      	strb	r2, [r3, #0]
 8001f80:	e00d      	b.n	8001f9e <TM1638_Init+0x3c>
  {
    Handler->DisplayRegister[i] = 0;
 8001f82:	200f      	movs	r0, #15
 8001f84:	183b      	adds	r3, r7, r0
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	2125      	movs	r1, #37	; 0x25
 8001f8c:	18d3      	adds	r3, r2, r3
 8001f8e:	185b      	adds	r3, r3, r1
 8001f90:	2200      	movs	r2, #0
 8001f92:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < 16; i++)
 8001f94:	183b      	adds	r3, r7, r0
 8001f96:	781a      	ldrb	r2, [r3, #0]
 8001f98:	183b      	adds	r3, r7, r0
 8001f9a:	3201      	adds	r2, #1
 8001f9c:	701a      	strb	r2, [r3, #0]
 8001f9e:	230f      	movs	r3, #15
 8001fa0:	18fb      	adds	r3, r7, r3
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b0f      	cmp	r3, #15
 8001fa6:	d9ec      	bls.n	8001f82 <TM1638_Init+0x20>
  }
  if (Type == TM1638DisplayTypeComCathode)
 8001fa8:	1cfb      	adds	r3, r7, #3
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d104      	bne.n	8001fba <TM1638_Init+0x58>
    Handler->DisplayType = TM1638DisplayTypeComCathode;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2224      	movs	r2, #36	; 0x24
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	5499      	strb	r1, [r3, r2]
 8001fb8:	e003      	b.n	8001fc2 <TM1638_Init+0x60>
  else
    Handler->DisplayType = TM1638DisplayTypeComAnode;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2224      	movs	r2, #36	; 0x24
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	5499      	strb	r1, [r3, r2]
#endif

  Handler->PlatformInit();
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4798      	blx	r3
  return TM1638_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	0018      	movs	r0, r3
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	b004      	add	sp, #16
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <TM1638_ConfigDisplay>:
 *         - TM1638_OK: Operation was successful
 */
TM1638_Result_t
TM1638_ConfigDisplay(TM1638_Handler_t *Handler,
                     uint8_t Brightness, uint8_t DisplayState)
{
 8001fd2:	b590      	push	{r4, r7, lr}
 8001fd4:	b085      	sub	sp, #20
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	0008      	movs	r0, r1
 8001fdc:	0011      	movs	r1, r2
 8001fde:	1cfb      	adds	r3, r7, #3
 8001fe0:	1c02      	adds	r2, r0, #0
 8001fe2:	701a      	strb	r2, [r3, #0]
 8001fe4:	1cbb      	adds	r3, r7, #2
 8001fe6:	1c0a      	adds	r2, r1, #0
 8001fe8:	701a      	strb	r2, [r3, #0]
  uint8_t Data = DisplayControlInstructionSet;
 8001fea:	210f      	movs	r1, #15
 8001fec:	187b      	adds	r3, r7, r1
 8001fee:	2280      	movs	r2, #128	; 0x80
 8001ff0:	701a      	strb	r2, [r3, #0]
  Data |= Brightness & 0x07;
 8001ff2:	1cfb      	adds	r3, r7, #3
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	b25b      	sxtb	r3, r3
 8001ff8:	2207      	movs	r2, #7
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	b25a      	sxtb	r2, r3
 8001ffe:	187b      	adds	r3, r7, r1
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	b25b      	sxtb	r3, r3
 8002004:	4313      	orrs	r3, r2
 8002006:	b25b      	sxtb	r3, r3
 8002008:	b2da      	uxtb	r2, r3
 800200a:	187b      	adds	r3, r7, r1
 800200c:	701a      	strb	r2, [r3, #0]
  Data |= (DisplayState) ? (ShowTurnOn) : (ShowTurnOff);
 800200e:	1cbb      	adds	r3, r7, #2
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <TM1638_ConfigDisplay+0x48>
 8002016:	2308      	movs	r3, #8
 8002018:	e000      	b.n	800201c <TM1638_ConfigDisplay+0x4a>
 800201a:	2300      	movs	r3, #0
 800201c:	210f      	movs	r1, #15
 800201e:	187a      	adds	r2, r7, r1
 8002020:	7812      	ldrb	r2, [r2, #0]
 8002022:	b252      	sxtb	r2, r2
 8002024:	4313      	orrs	r3, r2
 8002026:	b25b      	sxtb	r3, r3
 8002028:	b2da      	uxtb	r2, r3
 800202a:	000c      	movs	r4, r1
 800202c:	187b      	adds	r3, r7, r1
 800202e:	701a      	strb	r2, [r3, #0]

  TM1638_StartComunication(Handler);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	0018      	movs	r0, r3
 8002034:	f7ff fee6 	bl	8001e04 <TM1638_StartComunication>
  TM1638_WriteBytes(Handler, &Data, 1);
 8002038:	1939      	adds	r1, r7, r4
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	0018      	movs	r0, r3
 8002040:	f7ff fef8 	bl	8001e34 <TM1638_WriteBytes>
  TM1638_StopComunication(Handler);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	0018      	movs	r0, r3
 8002048:	f7ff fee8 	bl	8001e1c <TM1638_StopComunication>

  return TM1638_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	0018      	movs	r0, r3
 8002050:	46bd      	mov	sp, r7
 8002052:	b005      	add	sp, #20
 8002054:	bd90      	pop	{r4, r7, pc}

08002056 <TM1638_SetSingleDigit>:
 *         - TM1638_OK: Operation was successful
 */
TM1638_Result_t
TM1638_SetSingleDigit(TM1638_Handler_t *Handler,
                      uint8_t DigitData, uint8_t DigitPos)
{ 
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
 800205e:	0008      	movs	r0, r1
 8002060:	0011      	movs	r1, r2
 8002062:	1cfb      	adds	r3, r7, #3
 8002064:	1c02      	adds	r2, r0, #0
 8002066:	701a      	strb	r2, [r3, #0]
 8002068:	1cbb      	adds	r3, r7, #2
 800206a:	1c0a      	adds	r2, r1, #0
 800206c:	701a      	strb	r2, [r3, #0]
  if (Handler->DisplayType == TM1638DisplayTypeComCathode)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2224      	movs	r2, #36	; 0x24
 8002072:	5c9b      	ldrb	r3, [r3, r2]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d107      	bne.n	8002088 <TM1638_SetSingleDigit+0x32>
    TM1638_SetMultipleDisplayRegister(Handler, &DigitData, DigitPos, 1);
 8002078:	1cbb      	adds	r3, r7, #2
 800207a:	781a      	ldrb	r2, [r3, #0]
 800207c:	1cf9      	adds	r1, r7, #3
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	2301      	movs	r3, #1
 8002082:	f7ff ff30 	bl	8001ee6 <TM1638_SetMultipleDisplayRegister>
 8002086:	e006      	b.n	8002096 <TM1638_SetSingleDigit+0x40>
#if (TM1638_CONFIG_SUPPORT_COM_ANODE)
  else
    TM1638_SetMultipleDigit(Handler, &DigitData, DigitPos, 1);
 8002088:	1cbb      	adds	r3, r7, #2
 800208a:	781a      	ldrb	r2, [r3, #0]
 800208c:	1cf9      	adds	r1, r7, #3
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	2301      	movs	r3, #1
 8002092:	f000 f805 	bl	80020a0 <TM1638_SetMultipleDigit>
#endif
  return TM1638_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	0018      	movs	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	b002      	add	sp, #8
 800209e:	bd80      	pop	{r7, pc}

080020a0 <TM1638_SetMultipleDigit>:
 *         - TM1638_OK: Operation was successful
 */
TM1638_Result_t
TM1638_SetMultipleDigit(TM1638_Handler_t *Handler, const uint8_t *DigitData,
                        uint8_t StartAddr, uint8_t Count)
{
 80020a0:	b590      	push	{r4, r7, lr}
 80020a2:	b087      	sub	sp, #28
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	0019      	movs	r1, r3
 80020ac:	1dfb      	adds	r3, r7, #7
 80020ae:	701a      	strb	r2, [r3, #0]
 80020b0:	1dbb      	adds	r3, r7, #6
 80020b2:	1c0a      	adds	r2, r1, #0
 80020b4:	701a      	strb	r2, [r3, #0]
  uint8_t Shift = 0;
 80020b6:	2317      	movs	r3, #23
 80020b8:	18fb      	adds	r3, r7, r3
 80020ba:	2200      	movs	r2, #0
 80020bc:	701a      	strb	r2, [r3, #0]
  uint8_t DigitDataBuff = 0;
 80020be:	2316      	movs	r3, #22
 80020c0:	18fb      	adds	r3, r7, r3
 80020c2:	2200      	movs	r2, #0
 80020c4:	701a      	strb	r2, [r3, #0]
  uint8_t i = 0, j = 0;
 80020c6:	2315      	movs	r3, #21
 80020c8:	18fb      	adds	r3, r7, r3
 80020ca:	2200      	movs	r2, #0
 80020cc:	701a      	strb	r2, [r3, #0]
 80020ce:	2314      	movs	r3, #20
 80020d0:	18fb      	adds	r3, r7, r3
 80020d2:	2200      	movs	r2, #0
 80020d4:	701a      	strb	r2, [r3, #0]

  if (Handler->DisplayType == TM1638DisplayTypeComCathode)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2224      	movs	r2, #36	; 0x24
 80020da:	5c9b      	ldrb	r3, [r3, r2]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d109      	bne.n	80020f4 <TM1638_SetMultipleDigit+0x54>
    TM1638_SetMultipleDisplayRegister(Handler, DigitData, StartAddr, Count);
 80020e0:	1dbb      	adds	r3, r7, #6
 80020e2:	781c      	ldrb	r4, [r3, #0]
 80020e4:	1dfb      	adds	r3, r7, #7
 80020e6:	781a      	ldrb	r2, [r3, #0]
 80020e8:	68b9      	ldr	r1, [r7, #8]
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	0023      	movs	r3, r4
 80020ee:	f7ff fefa 	bl	8001ee6 <TM1638_SetMultipleDisplayRegister>
 80020f2:	e0ab      	b.n	800224c <TM1638_SetMultipleDigit+0x1ac>
#if (TM1638_CONFIG_SUPPORT_COM_ANODE)
  else
  {
    for (j = 0; j < Count; j++)
 80020f4:	2314      	movs	r3, #20
 80020f6:	18fb      	adds	r3, r7, r3
 80020f8:	2200      	movs	r2, #0
 80020fa:	701a      	strb	r2, [r3, #0]
 80020fc:	e096      	b.n	800222c <TM1638_SetMultipleDigit+0x18c>
    {
      DigitDataBuff = DigitData[j];
 80020fe:	2114      	movs	r1, #20
 8002100:	187b      	adds	r3, r7, r1
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	68ba      	ldr	r2, [r7, #8]
 8002106:	18d2      	adds	r2, r2, r3
 8002108:	2316      	movs	r3, #22
 800210a:	18fb      	adds	r3, r7, r3
 800210c:	7812      	ldrb	r2, [r2, #0]
 800210e:	701a      	strb	r2, [r3, #0]

      if ((j + StartAddr) >= 0 && (j + StartAddr) <= 7)
 8002110:	187b      	adds	r3, r7, r1
 8002112:	781a      	ldrb	r2, [r3, #0]
 8002114:	1dfb      	adds	r3, r7, #7
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	18d3      	adds	r3, r2, r3
 800211a:	2b07      	cmp	r3, #7
 800211c:	dc0c      	bgt.n	8002138 <TM1638_SetMultipleDigit+0x98>
      {
        Shift = j + StartAddr;
 800211e:	2317      	movs	r3, #23
 8002120:	18fb      	adds	r3, r7, r3
 8002122:	1879      	adds	r1, r7, r1
 8002124:	1dfa      	adds	r2, r7, #7
 8002126:	7809      	ldrb	r1, [r1, #0]
 8002128:	7812      	ldrb	r2, [r2, #0]
 800212a:	188a      	adds	r2, r1, r2
 800212c:	701a      	strb	r2, [r3, #0]
        i = 0;
 800212e:	2315      	movs	r3, #21
 8002130:	18fb      	adds	r3, r7, r3
 8002132:	2200      	movs	r2, #0
 8002134:	701a      	strb	r2, [r3, #0]
 8002136:	e06e      	b.n	8002216 <TM1638_SetMultipleDigit+0x176>
      }
      else if ((j + StartAddr) == 8 || (j + StartAddr) == 9)
 8002138:	2114      	movs	r1, #20
 800213a:	187b      	adds	r3, r7, r1
 800213c:	781a      	ldrb	r2, [r3, #0]
 800213e:	1dfb      	adds	r3, r7, #7
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	18d3      	adds	r3, r2, r3
 8002144:	2b08      	cmp	r3, #8
 8002146:	d006      	beq.n	8002156 <TM1638_SetMultipleDigit+0xb6>
 8002148:	187b      	adds	r3, r7, r1
 800214a:	781a      	ldrb	r2, [r3, #0]
 800214c:	1dfb      	adds	r3, r7, #7
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	18d3      	adds	r3, r2, r3
 8002152:	2b09      	cmp	r3, #9
 8002154:	d10f      	bne.n	8002176 <TM1638_SetMultipleDigit+0xd6>
      {
        Shift = (j + StartAddr) - 8;
 8002156:	2314      	movs	r3, #20
 8002158:	18fa      	adds	r2, r7, r3
 800215a:	1dfb      	adds	r3, r7, #7
 800215c:	7812      	ldrb	r2, [r2, #0]
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	18d3      	adds	r3, r2, r3
 8002162:	b2da      	uxtb	r2, r3
 8002164:	2317      	movs	r3, #23
 8002166:	18fb      	adds	r3, r7, r3
 8002168:	3a08      	subs	r2, #8
 800216a:	701a      	strb	r2, [r3, #0]
        i = 1;
 800216c:	2315      	movs	r3, #21
 800216e:	18fb      	adds	r3, r7, r3
 8002170:	2201      	movs	r2, #1
 8002172:	701a      	strb	r2, [r3, #0]
 8002174:	e003      	b.n	800217e <TM1638_SetMultipleDigit+0xde>
      }
      else
      {
        i = 16;
 8002176:	2315      	movs	r3, #21
 8002178:	18fb      	adds	r3, r7, r3
 800217a:	2210      	movs	r2, #16
 800217c:	701a      	strb	r2, [r3, #0]
      }

      for (; i < 16; i += 2, DigitDataBuff >>= 1)
 800217e:	e04a      	b.n	8002216 <TM1638_SetMultipleDigit+0x176>
      {
        if (DigitDataBuff & 0x01)
 8002180:	2316      	movs	r3, #22
 8002182:	18fb      	adds	r3, r7, r3
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2201      	movs	r2, #1
 8002188:	4013      	ands	r3, r2
 800218a:	d01b      	beq.n	80021c4 <TM1638_SetMultipleDigit+0x124>
          Handler->DisplayRegister[i] |= (1 << Shift);
 800218c:	2015      	movs	r0, #21
 800218e:	183b      	adds	r3, r7, r0
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	2125      	movs	r1, #37	; 0x25
 8002196:	18d3      	adds	r3, r2, r3
 8002198:	185b      	adds	r3, r3, r1
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	b25a      	sxtb	r2, r3
 800219e:	2317      	movs	r3, #23
 80021a0:	18fb      	adds	r3, r7, r3
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2101      	movs	r1, #1
 80021a6:	4099      	lsls	r1, r3
 80021a8:	000b      	movs	r3, r1
 80021aa:	b25b      	sxtb	r3, r3
 80021ac:	4313      	orrs	r3, r2
 80021ae:	b25a      	sxtb	r2, r3
 80021b0:	183b      	adds	r3, r7, r0
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	b2d0      	uxtb	r0, r2
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	2125      	movs	r1, #37	; 0x25
 80021ba:	18d3      	adds	r3, r2, r3
 80021bc:	185b      	adds	r3, r3, r1
 80021be:	1c02      	adds	r2, r0, #0
 80021c0:	701a      	strb	r2, [r3, #0]
 80021c2:	e01c      	b.n	80021fe <TM1638_SetMultipleDigit+0x15e>
        else
          Handler->DisplayRegister[i] &= ~(1 << Shift);
 80021c4:	2015      	movs	r0, #21
 80021c6:	183b      	adds	r3, r7, r0
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	2125      	movs	r1, #37	; 0x25
 80021ce:	18d3      	adds	r3, r2, r3
 80021d0:	185b      	adds	r3, r3, r1
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	b25b      	sxtb	r3, r3
 80021d6:	2217      	movs	r2, #23
 80021d8:	18ba      	adds	r2, r7, r2
 80021da:	7812      	ldrb	r2, [r2, #0]
 80021dc:	2101      	movs	r1, #1
 80021de:	4091      	lsls	r1, r2
 80021e0:	000a      	movs	r2, r1
 80021e2:	b252      	sxtb	r2, r2
 80021e4:	43d2      	mvns	r2, r2
 80021e6:	b252      	sxtb	r2, r2
 80021e8:	4013      	ands	r3, r2
 80021ea:	b25a      	sxtb	r2, r3
 80021ec:	183b      	adds	r3, r7, r0
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	b2d0      	uxtb	r0, r2
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	2125      	movs	r1, #37	; 0x25
 80021f6:	18d3      	adds	r3, r2, r3
 80021f8:	185b      	adds	r3, r3, r1
 80021fa:	1c02      	adds	r2, r0, #0
 80021fc:	701a      	strb	r2, [r3, #0]
      for (; i < 16; i += 2, DigitDataBuff >>= 1)
 80021fe:	2215      	movs	r2, #21
 8002200:	18bb      	adds	r3, r7, r2
 8002202:	18ba      	adds	r2, r7, r2
 8002204:	7812      	ldrb	r2, [r2, #0]
 8002206:	3202      	adds	r2, #2
 8002208:	701a      	strb	r2, [r3, #0]
 800220a:	2216      	movs	r2, #22
 800220c:	18bb      	adds	r3, r7, r2
 800220e:	18ba      	adds	r2, r7, r2
 8002210:	7812      	ldrb	r2, [r2, #0]
 8002212:	0852      	lsrs	r2, r2, #1
 8002214:	701a      	strb	r2, [r3, #0]
 8002216:	2315      	movs	r3, #21
 8002218:	18fb      	adds	r3, r7, r3
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b0f      	cmp	r3, #15
 800221e:	d9af      	bls.n	8002180 <TM1638_SetMultipleDigit+0xe0>
    for (j = 0; j < Count; j++)
 8002220:	2114      	movs	r1, #20
 8002222:	187b      	adds	r3, r7, r1
 8002224:	781a      	ldrb	r2, [r3, #0]
 8002226:	187b      	adds	r3, r7, r1
 8002228:	3201      	adds	r2, #1
 800222a:	701a      	strb	r2, [r3, #0]
 800222c:	2314      	movs	r3, #20
 800222e:	18fa      	adds	r2, r7, r3
 8002230:	1dbb      	adds	r3, r7, #6
 8002232:	7812      	ldrb	r2, [r2, #0]
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d200      	bcs.n	800223c <TM1638_SetMultipleDigit+0x19c>
 800223a:	e760      	b.n	80020fe <TM1638_SetMultipleDigit+0x5e>
      }
    }
    TM1638_SetMultipleDisplayRegister(Handler, Handler->DisplayRegister, 0, 16);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	3325      	adds	r3, #37	; 0x25
 8002240:	0019      	movs	r1, r3
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	2310      	movs	r3, #16
 8002246:	2200      	movs	r2, #0
 8002248:	f7ff fe4d 	bl	8001ee6 <TM1638_SetMultipleDisplayRegister>
  }
#endif

  return TM1638_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	0018      	movs	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	b007      	add	sp, #28
 8002254:	bd90      	pop	{r4, r7, pc}
	...

08002258 <TM1638_SetSingleDigit_HEX>:
 *         - TM1638_OK: Operation was successful
 */
TM1638_Result_t
TM1638_SetSingleDigit_HEX(TM1638_Handler_t *Handler,
                          uint8_t DigitData, uint8_t DigitPos)
{
 8002258:	b590      	push	{r4, r7, lr}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	0008      	movs	r0, r1
 8002262:	0011      	movs	r1, r2
 8002264:	1cfb      	adds	r3, r7, #3
 8002266:	1c02      	adds	r2, r0, #0
 8002268:	701a      	strb	r2, [r3, #0]
 800226a:	1cbb      	adds	r3, r7, #2
 800226c:	1c0a      	adds	r2, r1, #0
 800226e:	701a      	strb	r2, [r3, #0]
  uint8_t DigitDataHEX = 0;
 8002270:	200f      	movs	r0, #15
 8002272:	183b      	adds	r3, r7, r0
 8002274:	2200      	movs	r2, #0
 8002276:	701a      	strb	r2, [r3, #0]
  uint8_t DecimalPoint = DigitData & 0x80;
 8002278:	240e      	movs	r4, #14
 800227a:	193b      	adds	r3, r7, r4
 800227c:	1cfa      	adds	r2, r7, #3
 800227e:	7812      	ldrb	r2, [r2, #0]
 8002280:	217f      	movs	r1, #127	; 0x7f
 8002282:	438a      	bics	r2, r1
 8002284:	701a      	strb	r2, [r3, #0]

  DigitData &= 0x7F;
 8002286:	1cfb      	adds	r3, r7, #3
 8002288:	1cfa      	adds	r2, r7, #3
 800228a:	7812      	ldrb	r2, [r2, #0]
 800228c:	217f      	movs	r1, #127	; 0x7f
 800228e:	400a      	ands	r2, r1
 8002290:	701a      	strb	r2, [r3, #0]

  if (DigitData <= 15)
 8002292:	1cfb      	adds	r3, r7, #3
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b0f      	cmp	r3, #15
 8002298:	d809      	bhi.n	80022ae <TM1638_SetSingleDigit_HEX+0x56>
  {
    DigitDataHEX = HexTo7Seg[DigitData] | DecimalPoint;
 800229a:	1cfb      	adds	r3, r7, #3
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	4a2d      	ldr	r2, [pc, #180]	; (8002354 <TM1638_SetSingleDigit_HEX+0xfc>)
 80022a0:	5cd1      	ldrb	r1, [r2, r3]
 80022a2:	183b      	adds	r3, r7, r0
 80022a4:	193a      	adds	r2, r7, r4
 80022a6:	7812      	ldrb	r2, [r2, #0]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	701a      	strb	r2, [r3, #0]
 80022ac:	e044      	b.n	8002338 <TM1638_SetSingleDigit_HEX+0xe0>
  }
  else
  {
    switch (DigitData)
 80022ae:	1cfb      	adds	r3, r7, #3
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	3b41      	subs	r3, #65	; 0x41
 80022b4:	2b25      	cmp	r3, #37	; 0x25
 80022b6:	d83a      	bhi.n	800232e <TM1638_SetSingleDigit_HEX+0xd6>
 80022b8:	009a      	lsls	r2, r3, #2
 80022ba:	4b27      	ldr	r3, [pc, #156]	; (8002358 <TM1638_SetSingleDigit_HEX+0x100>)
 80022bc:	18d3      	adds	r3, r2, r3
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	469f      	mov	pc, r3
    {
    case 'A':
    case 'a':
      DigitDataHEX = HexTo7Seg[0x0A] | DecimalPoint;
 80022c2:	2177      	movs	r1, #119	; 0x77
 80022c4:	230f      	movs	r3, #15
 80022c6:	18fb      	adds	r3, r7, r3
 80022c8:	220e      	movs	r2, #14
 80022ca:	18ba      	adds	r2, r7, r2
 80022cc:	7812      	ldrb	r2, [r2, #0]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	701a      	strb	r2, [r3, #0]
      break;
 80022d2:	e031      	b.n	8002338 <TM1638_SetSingleDigit_HEX+0xe0>

    case 'B':
    case 'b':
      DigitDataHEX = HexTo7Seg[0x0B] | DecimalPoint;
 80022d4:	217c      	movs	r1, #124	; 0x7c
 80022d6:	230f      	movs	r3, #15
 80022d8:	18fb      	adds	r3, r7, r3
 80022da:	220e      	movs	r2, #14
 80022dc:	18ba      	adds	r2, r7, r2
 80022de:	7812      	ldrb	r2, [r2, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	701a      	strb	r2, [r3, #0]
      break;
 80022e4:	e028      	b.n	8002338 <TM1638_SetSingleDigit_HEX+0xe0>

    case 'C':
    case 'c':
      DigitDataHEX = HexTo7Seg[0x0C] | DecimalPoint;
 80022e6:	2139      	movs	r1, #57	; 0x39
 80022e8:	230f      	movs	r3, #15
 80022ea:	18fb      	adds	r3, r7, r3
 80022ec:	220e      	movs	r2, #14
 80022ee:	18ba      	adds	r2, r7, r2
 80022f0:	7812      	ldrb	r2, [r2, #0]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	701a      	strb	r2, [r3, #0]
      break;
 80022f6:	e01f      	b.n	8002338 <TM1638_SetSingleDigit_HEX+0xe0>

    case 'D':
    case 'd':
      DigitDataHEX = HexTo7Seg[0x0D] | DecimalPoint;
 80022f8:	215e      	movs	r1, #94	; 0x5e
 80022fa:	230f      	movs	r3, #15
 80022fc:	18fb      	adds	r3, r7, r3
 80022fe:	220e      	movs	r2, #14
 8002300:	18ba      	adds	r2, r7, r2
 8002302:	7812      	ldrb	r2, [r2, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	701a      	strb	r2, [r3, #0]
      break;
 8002308:	e016      	b.n	8002338 <TM1638_SetSingleDigit_HEX+0xe0>

    case 'E':
    case 'e':
      DigitDataHEX = HexTo7Seg[0x0E] | DecimalPoint;
 800230a:	2179      	movs	r1, #121	; 0x79
 800230c:	230f      	movs	r3, #15
 800230e:	18fb      	adds	r3, r7, r3
 8002310:	220e      	movs	r2, #14
 8002312:	18ba      	adds	r2, r7, r2
 8002314:	7812      	ldrb	r2, [r2, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	701a      	strb	r2, [r3, #0]
      break;
 800231a:	e00d      	b.n	8002338 <TM1638_SetSingleDigit_HEX+0xe0>

    case 'F':
    case 'f':
      DigitDataHEX = HexTo7Seg[0x0F] | DecimalPoint;
 800231c:	2171      	movs	r1, #113	; 0x71
 800231e:	230f      	movs	r3, #15
 8002320:	18fb      	adds	r3, r7, r3
 8002322:	220e      	movs	r2, #14
 8002324:	18ba      	adds	r2, r7, r2
 8002326:	7812      	ldrb	r2, [r2, #0]
 8002328:	430a      	orrs	r2, r1
 800232a:	701a      	strb	r2, [r3, #0]
      break;
 800232c:	e004      	b.n	8002338 <TM1638_SetSingleDigit_HEX+0xe0>

    default:
      DigitDataHEX = 0;
 800232e:	230f      	movs	r3, #15
 8002330:	18fb      	adds	r3, r7, r3
 8002332:	2200      	movs	r2, #0
 8002334:	701a      	strb	r2, [r3, #0]
      break;
 8002336:	46c0      	nop			; (mov r8, r8)
    }
  }

  return TM1638_SetSingleDigit(Handler, DigitDataHEX, DigitPos);
 8002338:	1cbb      	adds	r3, r7, #2
 800233a:	781a      	ldrb	r2, [r3, #0]
 800233c:	230f      	movs	r3, #15
 800233e:	18fb      	adds	r3, r7, r3
 8002340:	7819      	ldrb	r1, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	0018      	movs	r0, r3
 8002346:	f7ff fe86 	bl	8002056 <TM1638_SetSingleDigit>
 800234a:	0003      	movs	r3, r0
}
 800234c:	0018      	movs	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	b005      	add	sp, #20
 8002352:	bd90      	pop	{r4, r7, pc}
 8002354:	08002630 	.word	0x08002630
 8002358:	08002658 	.word	0x08002658

0800235c <TM1638_SetGPIO_OUT>:
 ==================================================================================
 */

static void
TM1638_SetGPIO_OUT(GPIO_TypeDef *GPIOx, uint32_t GPIO_Pin)
{
 800235c:	b590      	push	{r4, r7, lr}
 800235e:	b089      	sub	sp, #36	; 0x24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002366:	240c      	movs	r4, #12
 8002368:	193b      	adds	r3, r7, r4
 800236a:	0018      	movs	r0, r3
 800236c:	2314      	movs	r3, #20
 800236e:	001a      	movs	r2, r3
 8002370:	2100      	movs	r1, #0
 8002372:	f000 f92d 	bl	80025d0 <memset>
  GPIO_InitStruct.Pin = GPIO_Pin;
 8002376:	0021      	movs	r1, r4
 8002378:	187b      	adds	r3, r7, r1
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800237e:	187b      	adds	r3, r7, r1
 8002380:	2201      	movs	r2, #1
 8002382:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	187b      	adds	r3, r7, r1
 8002386:	2200      	movs	r2, #0
 8002388:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238a:	187b      	adds	r3, r7, r1
 800238c:	2200      	movs	r2, #0
 800238e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002390:	187a      	adds	r2, r7, r1
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	0011      	movs	r1, r2
 8002396:	0018      	movs	r0, r3
 8002398:	f7fe fa9a 	bl	80008d0 <HAL_GPIO_Init>
}
 800239c:	46c0      	nop			; (mov r8, r8)
 800239e:	46bd      	mov	sp, r7
 80023a0:	b009      	add	sp, #36	; 0x24
 80023a2:	bd90      	pop	{r4, r7, pc}

080023a4 <TM1638_SetGPIO_IN_PU>:
									
static void
TM1638_SetGPIO_IN_PU(GPIO_TypeDef *GPIOx, uint32_t GPIO_Pin)
{
 80023a4:	b590      	push	{r4, r7, lr}
 80023a6:	b089      	sub	sp, #36	; 0x24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ae:	240c      	movs	r4, #12
 80023b0:	193b      	adds	r3, r7, r4
 80023b2:	0018      	movs	r0, r3
 80023b4:	2314      	movs	r3, #20
 80023b6:	001a      	movs	r2, r3
 80023b8:	2100      	movs	r1, #0
 80023ba:	f000 f909 	bl	80025d0 <memset>
  GPIO_InitStruct.Pin = GPIO_Pin;
 80023be:	0021      	movs	r1, r4
 80023c0:	187b      	adds	r3, r7, r1
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c6:	187b      	adds	r3, r7, r1
 80023c8:	2200      	movs	r2, #0
 80023ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023cc:	187b      	adds	r3, r7, r1
 80023ce:	2201      	movs	r2, #1
 80023d0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d2:	187b      	adds	r3, r7, r1
 80023d4:	2200      	movs	r2, #0
 80023d6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80023d8:	187a      	adds	r2, r7, r1
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	0011      	movs	r1, r2
 80023de:	0018      	movs	r0, r3
 80023e0:	f7fe fa76 	bl	80008d0 <HAL_GPIO_Init>
}
 80023e4:	46c0      	nop			; (mov r8, r8)
 80023e6:	46bd      	mov	sp, r7
 80023e8:	b009      	add	sp, #36	; 0x24
 80023ea:	bd90      	pop	{r4, r7, pc}

080023ec <TM1638_PlatformInit>:


static void
TM1638_PlatformInit(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  TM1638_SetGPIO_OUT(TM1638_CLK_GPIO, TM1638_CLK_PIN);
 80023f0:	4b08      	ldr	r3, [pc, #32]	; (8002414 <TM1638_PlatformInit+0x28>)
 80023f2:	2120      	movs	r1, #32
 80023f4:	0018      	movs	r0, r3
 80023f6:	f7ff ffb1 	bl	800235c <TM1638_SetGPIO_OUT>
  TM1638_SetGPIO_OUT(TM1638_STB_GPIO, TM1638_STB_PIN);
 80023fa:	4b06      	ldr	r3, [pc, #24]	; (8002414 <TM1638_PlatformInit+0x28>)
 80023fc:	2140      	movs	r1, #64	; 0x40
 80023fe:	0018      	movs	r0, r3
 8002400:	f7ff ffac 	bl	800235c <TM1638_SetGPIO_OUT>
  TM1638_SetGPIO_OUT(TM1638_DIO_GPIO, TM1638_DIO_PIN);
 8002404:	4b03      	ldr	r3, [pc, #12]	; (8002414 <TM1638_PlatformInit+0x28>)
 8002406:	2110      	movs	r1, #16
 8002408:	0018      	movs	r0, r3
 800240a:	f7ff ffa7 	bl	800235c <TM1638_SetGPIO_OUT>
}
 800240e:	46c0      	nop			; (mov r8, r8)
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	48000400 	.word	0x48000400

08002418 <TM1638_PlatformDeInit>:

static void
TM1638_PlatformDeInit(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
}
 800241c:	46c0      	nop			; (mov r8, r8)
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <TM1638_DioConfigOut>:

static void
TM1638_DioConfigOut(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  TM1638_SetGPIO_OUT(TM1638_DIO_GPIO, TM1638_DIO_PIN);
 8002428:	4b03      	ldr	r3, [pc, #12]	; (8002438 <TM1638_DioConfigOut+0x14>)
 800242a:	2110      	movs	r1, #16
 800242c:	0018      	movs	r0, r3
 800242e:	f7ff ff95 	bl	800235c <TM1638_SetGPIO_OUT>
}
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	48000400 	.word	0x48000400

0800243c <TM1638_DioConfigIn>:

static void
TM1638_DioConfigIn(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  TM1638_SetGPIO_IN_PU(TM1638_DIO_GPIO, TM1638_DIO_PIN);
 8002440:	4b03      	ldr	r3, [pc, #12]	; (8002450 <TM1638_DioConfigIn+0x14>)
 8002442:	2110      	movs	r1, #16
 8002444:	0018      	movs	r0, r3
 8002446:	f7ff ffad 	bl	80023a4 <TM1638_SetGPIO_IN_PU>
}
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	48000400 	.word	0x48000400

08002454 <TM1638_DioWrite>:

static void
TM1638_DioWrite(uint8_t Level)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	0002      	movs	r2, r0
 800245c:	1dfb      	adds	r3, r7, #7
 800245e:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(TM1638_DIO_GPIO, TM1638_DIO_PIN, Level);
 8002460:	1dfb      	adds	r3, r7, #7
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	4804      	ldr	r0, [pc, #16]	; (8002478 <TM1638_DioWrite+0x24>)
 8002466:	001a      	movs	r2, r3
 8002468:	2110      	movs	r1, #16
 800246a:	f7fe fbbe 	bl	8000bea <HAL_GPIO_WritePin>
}
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	46bd      	mov	sp, r7
 8002472:	b002      	add	sp, #8
 8002474:	bd80      	pop	{r7, pc}
 8002476:	46c0      	nop			; (mov r8, r8)
 8002478:	48000400 	.word	0x48000400

0800247c <TM1638_DioRead>:

static uint8_t
TM1638_DioRead(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(TM1638_DIO_GPIO, TM1638_DIO_PIN);
 8002480:	4b04      	ldr	r3, [pc, #16]	; (8002494 <TM1638_DioRead+0x18>)
 8002482:	2110      	movs	r1, #16
 8002484:	0018      	movs	r0, r3
 8002486:	f7fe fb93 	bl	8000bb0 <HAL_GPIO_ReadPin>
 800248a:	0003      	movs	r3, r0
}
 800248c:	0018      	movs	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	46c0      	nop			; (mov r8, r8)
 8002494:	48000400 	.word	0x48000400

08002498 <TM1638_ClkWrite>:

static void
TM1638_ClkWrite(uint8_t Level)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	0002      	movs	r2, r0
 80024a0:	1dfb      	adds	r3, r7, #7
 80024a2:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(TM1638_CLK_GPIO, TM1638_CLK_PIN, Level);
 80024a4:	1dfb      	adds	r3, r7, #7
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	4804      	ldr	r0, [pc, #16]	; (80024bc <TM1638_ClkWrite+0x24>)
 80024aa:	001a      	movs	r2, r3
 80024ac:	2120      	movs	r1, #32
 80024ae:	f7fe fb9c 	bl	8000bea <HAL_GPIO_WritePin>
}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	46bd      	mov	sp, r7
 80024b6:	b002      	add	sp, #8
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	46c0      	nop			; (mov r8, r8)
 80024bc:	48000400 	.word	0x48000400

080024c0 <TM1638_StbWrite>:

static void
TM1638_StbWrite(uint8_t Level)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	0002      	movs	r2, r0
 80024c8:	1dfb      	adds	r3, r7, #7
 80024ca:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(TM1638_STB_GPIO, TM1638_STB_PIN, Level);
 80024cc:	1dfb      	adds	r3, r7, #7
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	4804      	ldr	r0, [pc, #16]	; (80024e4 <TM1638_StbWrite+0x24>)
 80024d2:	001a      	movs	r2, r3
 80024d4:	2140      	movs	r1, #64	; 0x40
 80024d6:	f7fe fb88 	bl	8000bea <HAL_GPIO_WritePin>
}
 80024da:	46c0      	nop			; (mov r8, r8)
 80024dc:	46bd      	mov	sp, r7
 80024de:	b002      	add	sp, #8
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	46c0      	nop			; (mov r8, r8)
 80024e4:	48000400 	.word	0x48000400

080024e8 <TM1638_DelayUs>:

static void
TM1638_DelayUs(uint8_t Delay)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	0002      	movs	r2, r0
 80024f0:	1dfb      	adds	r3, r7, #7
 80024f2:	701a      	strb	r2, [r3, #0]
  // TODO: Implement a proper delay function. This one is not accurate.
  for (uint32_t DelayCounter = 0; DelayCounter < 100 * Delay; DelayCounter++)
 80024f4:	2300      	movs	r3, #0
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	e002      	b.n	8002500 <TM1638_DelayUs+0x18>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	3301      	adds	r3, #1
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	1dfb      	adds	r3, r7, #7
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2264      	movs	r2, #100	; 0x64
 8002506:	4353      	muls	r3, r2
 8002508:	001a      	movs	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	4293      	cmp	r3, r2
 800250e:	d3f4      	bcc.n	80024fa <TM1638_DelayUs+0x12>
    DelayCounter = DelayCounter;
}
 8002510:	46c0      	nop			; (mov r8, r8)
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	46bd      	mov	sp, r7
 8002516:	b004      	add	sp, #16
 8002518:	bd80      	pop	{r7, pc}
	...

0800251c <TM1638_Platform_Init>:
 * @param  Handler: Pointer to handler
 * @retval None
 */
void
TM1638_Platform_Init(TM1638_Handler_t *Handler)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  Handler->PlatformInit = TM1638_PlatformInit;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a0f      	ldr	r2, [pc, #60]	; (8002564 <TM1638_Platform_Init+0x48>)
 8002528:	601a      	str	r2, [r3, #0]
  Handler->PlatformDeInit = TM1638_PlatformDeInit;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a0e      	ldr	r2, [pc, #56]	; (8002568 <TM1638_Platform_Init+0x4c>)
 800252e:	605a      	str	r2, [r3, #4]
  Handler->DioConfigOut = TM1638_DioConfigOut;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a0e      	ldr	r2, [pc, #56]	; (800256c <TM1638_Platform_Init+0x50>)
 8002534:	609a      	str	r2, [r3, #8]
  Handler->DioConfigIn = TM1638_DioConfigIn;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a0d      	ldr	r2, [pc, #52]	; (8002570 <TM1638_Platform_Init+0x54>)
 800253a:	60da      	str	r2, [r3, #12]
  Handler->DioWrite = TM1638_DioWrite;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a0d      	ldr	r2, [pc, #52]	; (8002574 <TM1638_Platform_Init+0x58>)
 8002540:	611a      	str	r2, [r3, #16]
  Handler->DioRead = TM1638_DioRead;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a0c      	ldr	r2, [pc, #48]	; (8002578 <TM1638_Platform_Init+0x5c>)
 8002546:	615a      	str	r2, [r3, #20]
  Handler->ClkWrite = TM1638_ClkWrite;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a0c      	ldr	r2, [pc, #48]	; (800257c <TM1638_Platform_Init+0x60>)
 800254c:	619a      	str	r2, [r3, #24]
  Handler->StbWrite = TM1638_StbWrite;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a0b      	ldr	r2, [pc, #44]	; (8002580 <TM1638_Platform_Init+0x64>)
 8002552:	61da      	str	r2, [r3, #28]
  Handler->DelayUs = TM1638_DelayUs;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a0b      	ldr	r2, [pc, #44]	; (8002584 <TM1638_Platform_Init+0x68>)
 8002558:	621a      	str	r2, [r3, #32]
}
 800255a:	46c0      	nop			; (mov r8, r8)
 800255c:	46bd      	mov	sp, r7
 800255e:	b002      	add	sp, #8
 8002560:	bd80      	pop	{r7, pc}
 8002562:	46c0      	nop			; (mov r8, r8)
 8002564:	080023ed 	.word	0x080023ed
 8002568:	08002419 	.word	0x08002419
 800256c:	08002425 	.word	0x08002425
 8002570:	0800243d 	.word	0x0800243d
 8002574:	08002455 	.word	0x08002455
 8002578:	0800247d 	.word	0x0800247d
 800257c:	08002499 	.word	0x08002499
 8002580:	080024c1 	.word	0x080024c1
 8002584:	080024e9 	.word	0x080024e9

08002588 <__libc_init_array>:
 8002588:	b570      	push	{r4, r5, r6, lr}
 800258a:	2600      	movs	r6, #0
 800258c:	4d0c      	ldr	r5, [pc, #48]	; (80025c0 <__libc_init_array+0x38>)
 800258e:	4c0d      	ldr	r4, [pc, #52]	; (80025c4 <__libc_init_array+0x3c>)
 8002590:	1b64      	subs	r4, r4, r5
 8002592:	10a4      	asrs	r4, r4, #2
 8002594:	42a6      	cmp	r6, r4
 8002596:	d109      	bne.n	80025ac <__libc_init_array+0x24>
 8002598:	2600      	movs	r6, #0
 800259a:	f000 f821 	bl	80025e0 <_init>
 800259e:	4d0a      	ldr	r5, [pc, #40]	; (80025c8 <__libc_init_array+0x40>)
 80025a0:	4c0a      	ldr	r4, [pc, #40]	; (80025cc <__libc_init_array+0x44>)
 80025a2:	1b64      	subs	r4, r4, r5
 80025a4:	10a4      	asrs	r4, r4, #2
 80025a6:	42a6      	cmp	r6, r4
 80025a8:	d105      	bne.n	80025b6 <__libc_init_array+0x2e>
 80025aa:	bd70      	pop	{r4, r5, r6, pc}
 80025ac:	00b3      	lsls	r3, r6, #2
 80025ae:	58eb      	ldr	r3, [r5, r3]
 80025b0:	4798      	blx	r3
 80025b2:	3601      	adds	r6, #1
 80025b4:	e7ee      	b.n	8002594 <__libc_init_array+0xc>
 80025b6:	00b3      	lsls	r3, r6, #2
 80025b8:	58eb      	ldr	r3, [r5, r3]
 80025ba:	4798      	blx	r3
 80025bc:	3601      	adds	r6, #1
 80025be:	e7f2      	b.n	80025a6 <__libc_init_array+0x1e>
 80025c0:	080026f0 	.word	0x080026f0
 80025c4:	080026f0 	.word	0x080026f0
 80025c8:	080026f0 	.word	0x080026f0
 80025cc:	080026f4 	.word	0x080026f4

080025d0 <memset>:
 80025d0:	0003      	movs	r3, r0
 80025d2:	1882      	adds	r2, r0, r2
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d100      	bne.n	80025da <memset+0xa>
 80025d8:	4770      	bx	lr
 80025da:	7019      	strb	r1, [r3, #0]
 80025dc:	3301      	adds	r3, #1
 80025de:	e7f9      	b.n	80025d4 <memset+0x4>

080025e0 <_init>:
 80025e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025e6:	bc08      	pop	{r3}
 80025e8:	469e      	mov	lr, r3
 80025ea:	4770      	bx	lr

080025ec <_fini>:
 80025ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ee:	46c0      	nop			; (mov r8, r8)
 80025f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025f2:	bc08      	pop	{r3}
 80025f4:	469e      	mov	lr, r3
 80025f6:	4770      	bx	lr
