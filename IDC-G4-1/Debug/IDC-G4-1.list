
IDC-G4-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004eb8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08004f78  08004f78  00014f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051a0  080051a0  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080051a0  080051a0  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051a0  080051a0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051a0  080051a0  000151a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051a4  080051a4  000151a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080051a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000074c  20000014  080051bc  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000760  080051bc  00020760  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa44  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f3  00000000  00000000  0002fa80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  00031d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d70  00000000  00000000  00032bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011018  00000000  00000000  00033928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001081f  00000000  00000000  00044940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00066bfb  00000000  00000000  0005515f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bbd5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000332c  00000000  00000000  000bbdac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004f60 	.word	0x08004f60

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08004f60 	.word	0x08004f60

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000408:	f000 fd0a 	bl	8000e20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800040c:	f000 f8f2 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000410:	f000 fa28 	bl	8000864 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000414:	f000 f9b0 	bl	8000778 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000418:	f000 f9f4 	bl	8000804 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800041c:	f000 f94c 	bl	80006b8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  TM1638_Platform_Init(&Handler);
 8000420:	4b69      	ldr	r3, [pc, #420]	; (80005c8 <main+0x1c4>)
 8000422:	0018      	movs	r0, r3
 8000424:	f004 fd30 	bl	8004e88 <TM1638_Platform_Init>
  TM1638_Init(&Handler, TM1638DisplayTypeComAnode);
 8000428:	4b67      	ldr	r3, [pc, #412]	; (80005c8 <main+0x1c4>)
 800042a:	2101      	movs	r1, #1
 800042c:	0018      	movs	r0, r3
 800042e:	f004 f9e1 	bl	80047f4 <TM1638_Init>
  TM1638_ConfigDisplay(&Handler, 4, TM1638DisplayStateON);
 8000432:	4b65      	ldr	r3, [pc, #404]	; (80005c8 <main+0x1c4>)
 8000434:	2201      	movs	r2, #1
 8000436:	2104      	movs	r1, #4
 8000438:	0018      	movs	r0, r3
 800043a:	f004 fa13 	bl	8004864 <TM1638_ConfigDisplay>

  // 使能定时器TIM3的更新中
  __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);
 800043e:	4b63      	ldr	r3, [pc, #396]	; (80005cc <main+0x1c8>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	68da      	ldr	r2, [r3, #12]
 8000444:	4b61      	ldr	r3, [pc, #388]	; (80005cc <main+0x1c8>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2101      	movs	r1, #1
 800044a:	430a      	orrs	r2, r1
 800044c:	60da      	str	r2, [r3, #12]
  // 启动定时器TIM3，开始计
  HAL_TIM_Base_Start_IT(&htim3);
 800044e:	4b5f      	ldr	r3, [pc, #380]	; (80005cc <main+0x1c8>)
 8000450:	0018      	movs	r0, r3
 8000452:	f001 fe33 	bl	80020bc <HAL_TIM_Base_Start_IT>
//     SEGGER_RTT_WriteString(0, (char*)rx_buf);
//     SEGGER_RTT_WriteString(0, "\n");
//
//     memset(rx_buf, 0, sizeof(rx_buf)); // 清空缓冲准备下一次接�???????

	  if(position_3d)
 8000456:	4b5e      	ldr	r3, [pc, #376]	; (80005d0 <main+0x1cc>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d00c      	beq.n	8000478 <main+0x74>
	  {

		  TM1638_SetSingleDigit_HEX(&Handler, 3, 2);  // 小时十位
 800045e:	4b5a      	ldr	r3, [pc, #360]	; (80005c8 <main+0x1c4>)
 8000460:	2202      	movs	r2, #2
 8000462:	2103      	movs	r1, #3
 8000464:	0018      	movs	r0, r3
 8000466:	f004 fb3f 	bl	8004ae8 <TM1638_SetSingleDigit_HEX>
		  TM1638_SetSingleDigit_HEX(&Handler, 0x0D, 1);  // 小时十位
 800046a:	4b57      	ldr	r3, [pc, #348]	; (80005c8 <main+0x1c4>)
 800046c:	2201      	movs	r2, #1
 800046e:	210d      	movs	r1, #13
 8000470:	0018      	movs	r0, r3
 8000472:	f004 fb39 	bl	8004ae8 <TM1638_SetSingleDigit_HEX>
 8000476:	e00b      	b.n	8000490 <main+0x8c>
	  }

	  else
	  {

		  TM1638_SetSingleDigit(&Handler, 0, 2);  // 小时十位
 8000478:	4b53      	ldr	r3, [pc, #332]	; (80005c8 <main+0x1c4>)
 800047a:	2202      	movs	r2, #2
 800047c:	2100      	movs	r1, #0
 800047e:	0018      	movs	r0, r3
 8000480:	f004 fa32 	bl	80048e8 <TM1638_SetSingleDigit>
		  TM1638_SetSingleDigit(&Handler, 0, 1);  // 小时十位
 8000484:	4b50      	ldr	r3, [pc, #320]	; (80005c8 <main+0x1c4>)
 8000486:	2201      	movs	r2, #1
 8000488:	2100      	movs	r1, #0
 800048a:	0018      	movs	r0, r3
 800048c:	f004 fa2c 	bl	80048e8 <TM1638_SetSingleDigit>

	  }


	    if (huart1.RxState == HAL_UART_STATE_READY && !HAL_UART_GetState(&huart1)) {
 8000490:	4b50      	ldr	r3, [pc, #320]	; (80005d4 <main+0x1d0>)
 8000492:	2280      	movs	r2, #128	; 0x80
 8000494:	589b      	ldr	r3, [r3, r2]
 8000496:	2b20      	cmp	r3, #32
 8000498:	d10f      	bne.n	80004ba <main+0xb6>
 800049a:	4b4e      	ldr	r3, [pc, #312]	; (80005d4 <main+0x1d0>)
 800049c:	0018      	movs	r0, r3
 800049e:	f002 fd48 	bl	8002f32 <HAL_UART_GetState>
 80004a2:	1e03      	subs	r3, r0, #0
 80004a4:	d109      	bne.n	80004ba <main+0xb6>
	        HAL_UART_Receive_IT(&huart1, &rx_buf[rx_index], 1);
 80004a6:	4b4c      	ldr	r3, [pc, #304]	; (80005d8 <main+0x1d4>)
 80004a8:	881b      	ldrh	r3, [r3, #0]
 80004aa:	001a      	movs	r2, r3
 80004ac:	4b4b      	ldr	r3, [pc, #300]	; (80005dc <main+0x1d8>)
 80004ae:	18d1      	adds	r1, r2, r3
 80004b0:	4b48      	ldr	r3, [pc, #288]	; (80005d4 <main+0x1d0>)
 80004b2:	2201      	movs	r2, #1
 80004b4:	0018      	movs	r0, r3
 80004b6:	f002 fa09 	bl	80028cc <HAL_UART_Receive_IT>
	    }

      TM1638_ScanKeys(&Handler, Keys);
 80004ba:	4b49      	ldr	r3, [pc, #292]	; (80005e0 <main+0x1dc>)
 80004bc:	681a      	ldr	r2, [r3, #0]
 80004be:	4b42      	ldr	r3, [pc, #264]	; (80005c8 <main+0x1c4>)
 80004c0:	0011      	movs	r1, r2
 80004c2:	0018      	movs	r0, r3
 80004c4:	f004 fb92 	bl	8004bec <TM1638_ScanKeys>
//        SEGGER_RTT_PutChar(0, (*Keys & (1 << i)) ? '1' : '0');
//    }
//    SEGGER_RTT_WriteString(0, "\n");

    // 判断按键第一位是否按�???????
    if (*Keys & 0x0001) {
 80004c8:	4b45      	ldr	r3, [pc, #276]	; (80005e0 <main+0x1dc>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	2201      	movs	r2, #1
 80004d0:	4013      	ands	r3, r2
 80004d2:	d00a      	beq.n	80004ea <main+0xe6>
        // 若按下，数码管第�???????位显�??????? 7
        TM1638_SetSingleDigit_HEX(&Handler, 7, 0);
 80004d4:	4b3c      	ldr	r3, [pc, #240]	; (80005c8 <main+0x1c4>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	2107      	movs	r1, #7
 80004da:	0018      	movs	r0, r3
 80004dc:	f004 fb04 	bl	8004ae8 <TM1638_SetSingleDigit_HEX>
        HAL_Delay(800);
 80004e0:	23c8      	movs	r3, #200	; 0xc8
 80004e2:	009b      	lsls	r3, r3, #2
 80004e4:	0018      	movs	r0, r3
 80004e6:	f000 fcff 	bl	8000ee8 <HAL_Delay>
    }

    // 判断按键第一位是否按�???????
    if (*Keys & 0x0002) {
 80004ea:	4b3d      	ldr	r3, [pc, #244]	; (80005e0 <main+0x1dc>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2202      	movs	r2, #2
 80004f2:	4013      	ands	r3, r2
 80004f4:	d00a      	beq.n	800050c <main+0x108>
        // 若按下，数码管第�???????位显�??????? 7
        TM1638_SetSingleDigit(&Handler, 0, 0);//没有HEX尾缀的这个函数，输入0的话是关闭数码管
 80004f6:	4b34      	ldr	r3, [pc, #208]	; (80005c8 <main+0x1c4>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	2100      	movs	r1, #0
 80004fc:	0018      	movs	r0, r3
 80004fe:	f004 f9f3 	bl	80048e8 <TM1638_SetSingleDigit>
        HAL_Delay(800);
 8000502:	23c8      	movs	r3, #200	; 0xc8
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	0018      	movs	r0, r3
 8000508:	f000 fcee 	bl	8000ee8 <HAL_Delay>
    //        TM1638_SetSingleDigit_HEX(&Handler, 0, i);
    //    }


    // �??查是否接收到有效�?? $GNRMC 语句
    if (gnrmcReceived) {
 800050c:	4b35      	ldr	r3, [pc, #212]	; (80005e4 <main+0x1e0>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d0a0      	beq.n	8000456 <main+0x52>
        // 转换为东八区时间
        hours = (hours + 8) % 24;
 8000514:	4b34      	ldr	r3, [pc, #208]	; (80005e8 <main+0x1e4>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	3308      	adds	r3, #8
 800051a:	2118      	movs	r1, #24
 800051c:	0018      	movs	r0, r3
 800051e:	f7ff ff6b 	bl	80003f8 <__aeabi_idivmod>
 8000522:	000b      	movs	r3, r1
 8000524:	001a      	movs	r2, r3
 8000526:	4b30      	ldr	r3, [pc, #192]	; (80005e8 <main+0x1e4>)
 8000528:	601a      	str	r2, [r3, #0]

        // 将时间显示在数码管后四位，修正显示顺�??
        TM1638_SetSingleDigit_HEX(&Handler, minutes % 10, 4);  // 分钟个位
 800052a:	4b30      	ldr	r3, [pc, #192]	; (80005ec <main+0x1e8>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	210a      	movs	r1, #10
 8000530:	0018      	movs	r0, r3
 8000532:	f7ff ff61 	bl	80003f8 <__aeabi_idivmod>
 8000536:	000b      	movs	r3, r1
 8000538:	b2d9      	uxtb	r1, r3
 800053a:	4b23      	ldr	r3, [pc, #140]	; (80005c8 <main+0x1c4>)
 800053c:	2204      	movs	r2, #4
 800053e:	0018      	movs	r0, r3
 8000540:	f004 fad2 	bl	8004ae8 <TM1638_SetSingleDigit_HEX>
        TM1638_SetSingleDigit_HEX(&Handler, minutes / 10, 5);  // 分钟十位
 8000544:	4b29      	ldr	r3, [pc, #164]	; (80005ec <main+0x1e8>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	210a      	movs	r1, #10
 800054a:	0018      	movs	r0, r3
 800054c:	f7ff fe6e 	bl	800022c <__divsi3>
 8000550:	0003      	movs	r3, r0
 8000552:	b2d9      	uxtb	r1, r3
 8000554:	4b1c      	ldr	r3, [pc, #112]	; (80005c8 <main+0x1c4>)
 8000556:	2205      	movs	r2, #5
 8000558:	0018      	movs	r0, r3
 800055a:	f004 fac5 	bl	8004ae8 <TM1638_SetSingleDigit_HEX>
        //TM1638_SetSingleDigit_HEX(&Handler, hours % 10, 6);  // 小时个位
        // 根据小数点状态设置第 6 位小数点
        if (decimalPointState) {
 800055e:	4b24      	ldr	r3, [pc, #144]	; (80005f0 <main+0x1ec>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d012      	beq.n	800058c <main+0x188>
            TM1638_SetSingleDigit_HEX(&Handler, hours %10 | TM1638DecimalPoint, 6);
 8000566:	4b20      	ldr	r3, [pc, #128]	; (80005e8 <main+0x1e4>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	210a      	movs	r1, #10
 800056c:	0018      	movs	r0, r3
 800056e:	f7ff ff43 	bl	80003f8 <__aeabi_idivmod>
 8000572:	000b      	movs	r3, r1
 8000574:	b25b      	sxtb	r3, r3
 8000576:	2280      	movs	r2, #128	; 0x80
 8000578:	4252      	negs	r2, r2
 800057a:	4313      	orrs	r3, r2
 800057c:	b25b      	sxtb	r3, r3
 800057e:	b2d9      	uxtb	r1, r3
 8000580:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <main+0x1c4>)
 8000582:	2206      	movs	r2, #6
 8000584:	0018      	movs	r0, r3
 8000586:	f004 faaf 	bl	8004ae8 <TM1638_SetSingleDigit_HEX>
 800058a:	e00c      	b.n	80005a6 <main+0x1a2>
        } else {
            TM1638_SetSingleDigit_HEX(&Handler, hours % 10, 6);
 800058c:	4b16      	ldr	r3, [pc, #88]	; (80005e8 <main+0x1e4>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	210a      	movs	r1, #10
 8000592:	0018      	movs	r0, r3
 8000594:	f7ff ff30 	bl	80003f8 <__aeabi_idivmod>
 8000598:	000b      	movs	r3, r1
 800059a:	b2d9      	uxtb	r1, r3
 800059c:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <main+0x1c4>)
 800059e:	2206      	movs	r2, #6
 80005a0:	0018      	movs	r0, r3
 80005a2:	f004 faa1 	bl	8004ae8 <TM1638_SetSingleDigit_HEX>
        }
        TM1638_SetSingleDigit_HEX(&Handler, hours / 10, 7);  // 小时十位
 80005a6:	4b10      	ldr	r3, [pc, #64]	; (80005e8 <main+0x1e4>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	210a      	movs	r1, #10
 80005ac:	0018      	movs	r0, r3
 80005ae:	f7ff fe3d 	bl	800022c <__divsi3>
 80005b2:	0003      	movs	r3, r0
 80005b4:	b2d9      	uxtb	r1, r3
 80005b6:	4b04      	ldr	r3, [pc, #16]	; (80005c8 <main+0x1c4>)
 80005b8:	2207      	movs	r2, #7
 80005ba:	0018      	movs	r0, r3
 80005bc:	f004 fa94 	bl	8004ae8 <TM1638_SetSingleDigit_HEX>



        // 重置标志�??
        gnrmcReceived = false;
 80005c0:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <main+0x1e0>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	701a      	strb	r2, [r3, #0]
	  if(position_3d)
 80005c6:	e746      	b.n	8000456 <main+0x52>
 80005c8:	2000026c 	.word	0x2000026c
 80005cc:	20000034 	.word	0x20000034
 80005d0:	20000264 	.word	0x20000264
 80005d4:	2000007c 	.word	0x2000007c
 80005d8:	20000258 	.word	0x20000258
 80005dc:	20000190 	.word	0x20000190
 80005e0:	20000000 	.word	0x20000000
 80005e4:	2000025a 	.word	0x2000025a
 80005e8:	2000025c 	.word	0x2000025c
 80005ec:	20000260 	.word	0x20000260
 80005f0:	20000004 	.word	0x20000004

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b590      	push	{r4, r7, lr}
 80005f6:	b095      	sub	sp, #84	; 0x54
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	2420      	movs	r4, #32
 80005fc:	193b      	adds	r3, r7, r4
 80005fe:	0018      	movs	r0, r3
 8000600:	2330      	movs	r3, #48	; 0x30
 8000602:	001a      	movs	r2, r3
 8000604:	2100      	movs	r1, #0
 8000606:	f004 fca2 	bl	8004f4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060a:	2310      	movs	r3, #16
 800060c:	18fb      	adds	r3, r7, r3
 800060e:	0018      	movs	r0, r3
 8000610:	2310      	movs	r3, #16
 8000612:	001a      	movs	r2, r3
 8000614:	2100      	movs	r1, #0
 8000616:	f004 fc9a 	bl	8004f4e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800061a:	003b      	movs	r3, r7
 800061c:	0018      	movs	r0, r3
 800061e:	2310      	movs	r3, #16
 8000620:	001a      	movs	r2, r3
 8000622:	2100      	movs	r1, #0
 8000624:	f004 fc93 	bl	8004f4e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000628:	0021      	movs	r1, r4
 800062a:	187b      	adds	r3, r7, r1
 800062c:	2201      	movs	r2, #1
 800062e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000630:	187b      	adds	r3, r7, r1
 8000632:	2201      	movs	r2, #1
 8000634:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000636:	187b      	adds	r3, r7, r1
 8000638:	2202      	movs	r2, #2
 800063a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063c:	187b      	adds	r3, r7, r1
 800063e:	2280      	movs	r2, #128	; 0x80
 8000640:	0252      	lsls	r2, r2, #9
 8000642:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2280      	movs	r2, #128	; 0x80
 8000648:	0352      	lsls	r2, r2, #13
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800064c:	187b      	adds	r3, r7, r1
 800064e:	2200      	movs	r2, #0
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000652:	187b      	adds	r3, r7, r1
 8000654:	0018      	movs	r0, r3
 8000656:	f000 ff8d 	bl	8001574 <HAL_RCC_OscConfig>
 800065a:	1e03      	subs	r3, r0, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800065e:	f000 fa9d 	bl	8000b9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	2110      	movs	r1, #16
 8000664:	187b      	adds	r3, r7, r1
 8000666:	2207      	movs	r2, #7
 8000668:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066a:	187b      	adds	r3, r7, r1
 800066c:	2202      	movs	r2, #2
 800066e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000670:	187b      	adds	r3, r7, r1
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000676:	187b      	adds	r3, r7, r1
 8000678:	2200      	movs	r2, #0
 800067a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800067c:	187b      	adds	r3, r7, r1
 800067e:	2101      	movs	r1, #1
 8000680:	0018      	movs	r0, r3
 8000682:	f001 fa91 	bl	8001ba8 <HAL_RCC_ClockConfig>
 8000686:	1e03      	subs	r3, r0, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800068a:	f000 fa87 	bl	8000b9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800068e:	003b      	movs	r3, r7
 8000690:	2201      	movs	r2, #1
 8000692:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8000694:	003b      	movs	r3, r7
 8000696:	2201      	movs	r2, #1
 8000698:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800069a:	003b      	movs	r3, r7
 800069c:	0018      	movs	r0, r3
 800069e:	f001 fbef 	bl	8001e80 <HAL_RCCEx_PeriphCLKConfig>
 80006a2:	1e03      	subs	r3, r0, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006a6:	f000 fa79 	bl	8000b9c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80006aa:	f001 fb4b 	bl	8001d44 <HAL_RCC_EnableCSS>
}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	46bd      	mov	sp, r7
 80006b2:	b015      	add	sp, #84	; 0x54
 80006b4:	bd90      	pop	{r4, r7, pc}
	...

080006b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006be:	2308      	movs	r3, #8
 80006c0:	18fb      	adds	r3, r7, r3
 80006c2:	0018      	movs	r0, r3
 80006c4:	2310      	movs	r3, #16
 80006c6:	001a      	movs	r2, r3
 80006c8:	2100      	movs	r1, #0
 80006ca:	f004 fc40 	bl	8004f4e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ce:	003b      	movs	r3, r7
 80006d0:	0018      	movs	r0, r3
 80006d2:	2308      	movs	r3, #8
 80006d4:	001a      	movs	r2, r3
 80006d6:	2100      	movs	r1, #0
 80006d8:	f004 fc39 	bl	8004f4e <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006dc:	4b22      	ldr	r3, [pc, #136]	; (8000768 <MX_TIM3_Init+0xb0>)
 80006de:	4a23      	ldr	r2, [pc, #140]	; (800076c <MX_TIM3_Init+0xb4>)
 80006e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4799;
 80006e2:	4b21      	ldr	r3, [pc, #132]	; (8000768 <MX_TIM3_Init+0xb0>)
 80006e4:	4a22      	ldr	r2, [pc, #136]	; (8000770 <MX_TIM3_Init+0xb8>)
 80006e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <MX_TIM3_Init+0xb0>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80006ee:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <MX_TIM3_Init+0xb0>)
 80006f0:	4a20      	ldr	r2, [pc, #128]	; (8000774 <MX_TIM3_Init+0xbc>)
 80006f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f4:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <MX_TIM3_Init+0xb0>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006fa:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <MX_TIM3_Init+0xb0>)
 80006fc:	2280      	movs	r2, #128	; 0x80
 80006fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000700:	4b19      	ldr	r3, [pc, #100]	; (8000768 <MX_TIM3_Init+0xb0>)
 8000702:	0018      	movs	r0, r3
 8000704:	f001 fc8a 	bl	800201c <HAL_TIM_Base_Init>
 8000708:	1e03      	subs	r3, r0, #0
 800070a:	d001      	beq.n	8000710 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800070c:	f000 fa46 	bl	8000b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000710:	2108      	movs	r1, #8
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2280      	movs	r2, #128	; 0x80
 8000716:	0152      	lsls	r2, r2, #5
 8000718:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800071a:	187a      	adds	r2, r7, r1
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <MX_TIM3_Init+0xb0>)
 800071e:	0011      	movs	r1, r2
 8000720:	0018      	movs	r0, r3
 8000722:	f001 fe05 	bl	8002330 <HAL_TIM_ConfigClockSource>
 8000726:	1e03      	subs	r3, r0, #0
 8000728:	d001      	beq.n	800072e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800072a:	f000 fa37 	bl	8000b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800072e:	003b      	movs	r3, r7
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000734:	003b      	movs	r3, r7
 8000736:	2200      	movs	r2, #0
 8000738:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800073a:	003a      	movs	r2, r7
 800073c:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <MX_TIM3_Init+0xb0>)
 800073e:	0011      	movs	r1, r2
 8000740:	0018      	movs	r0, r3
 8000742:	f002 f807 	bl	8002754 <HAL_TIMEx_MasterConfigSynchronization>
 8000746:	1e03      	subs	r3, r0, #0
 8000748:	d001      	beq.n	800074e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800074a:	f000 fa27 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800074e:	2200      	movs	r2, #0
 8000750:	2101      	movs	r1, #1
 8000752:	2010      	movs	r0, #16
 8000754:	f000 fc98 	bl	8001088 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000758:	2010      	movs	r0, #16
 800075a:	f000 fcaa 	bl	80010b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM3_Init 2 */

}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	46bd      	mov	sp, r7
 8000762:	b006      	add	sp, #24
 8000764:	bd80      	pop	{r7, pc}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	20000034 	.word	0x20000034
 800076c:	40000400 	.word	0x40000400
 8000770:	000012bf 	.word	0x000012bf
 8000774:	000003e7 	.word	0x000003e7

08000778 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800077c:	4b1d      	ldr	r3, [pc, #116]	; (80007f4 <MX_USART1_UART_Init+0x7c>)
 800077e:	4a1e      	ldr	r2, [pc, #120]	; (80007f8 <MX_USART1_UART_Init+0x80>)
 8000780:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000782:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <MX_USART1_UART_Init+0x7c>)
 8000784:	22e1      	movs	r2, #225	; 0xe1
 8000786:	0252      	lsls	r2, r2, #9
 8000788:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <MX_USART1_UART_Init+0x7c>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000790:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <MX_USART1_UART_Init+0x7c>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000796:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <MX_USART1_UART_Init+0x7c>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800079c:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <MX_USART1_UART_Init+0x7c>)
 800079e:	220c      	movs	r2, #12
 80007a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_USART1_UART_Init+0x7c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <MX_USART1_UART_Init+0x7c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ae:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_USART1_UART_Init+0x7c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_USART1_UART_Init+0x7c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <MX_USART1_UART_Init+0x7c>)
 80007bc:	0018      	movs	r0, r3
 80007be:	f002 f831 	bl	8002824 <HAL_UART_Init>
 80007c2:	1e03      	subs	r3, r0, #0
 80007c4:	d001      	beq.n	80007ca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007c6:	f000 f9e9 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  // �??启接收中�??
  // 确保UART中断优先级高于定时器中断
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2100      	movs	r1, #0
 80007ce:	201b      	movs	r0, #27
 80007d0:	f000 fc5a 	bl	8001088 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80007d4:	201b      	movs	r0, #27
 80007d6:	f000 fc6c 	bl	80010b2 <HAL_NVIC_EnableIRQ>
  HAL_UART_Receive_IT(&huart1, &rx_buf[rx_index], 1);
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_USART1_UART_Init+0x84>)
 80007dc:	881b      	ldrh	r3, [r3, #0]
 80007de:	001a      	movs	r2, r3
 80007e0:	4b07      	ldr	r3, [pc, #28]	; (8000800 <MX_USART1_UART_Init+0x88>)
 80007e2:	18d1      	adds	r1, r2, r3
 80007e4:	4b03      	ldr	r3, [pc, #12]	; (80007f4 <MX_USART1_UART_Init+0x7c>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	0018      	movs	r0, r3
 80007ea:	f002 f86f 	bl	80028cc <HAL_UART_Receive_IT>
  /* USER CODE END USART1_Init 2 */

}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	2000007c 	.word	0x2000007c
 80007f8:	40013800 	.word	0x40013800
 80007fc:	20000258 	.word	0x20000258
 8000800:	20000190 	.word	0x20000190

08000804 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000808:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_USART2_UART_Init+0x58>)
 800080a:	4a15      	ldr	r2, [pc, #84]	; (8000860 <MX_USART2_UART_Init+0x5c>)
 800080c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800080e:	4b13      	ldr	r3, [pc, #76]	; (800085c <MX_USART2_UART_Init+0x58>)
 8000810:	2296      	movs	r2, #150	; 0x96
 8000812:	0212      	lsls	r2, r2, #8
 8000814:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_USART2_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_USART2_UART_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_USART2_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_USART2_UART_Init+0x58>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <MX_USART2_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_USART2_UART_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <MX_USART2_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_USART2_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000846:	4b05      	ldr	r3, [pc, #20]	; (800085c <MX_USART2_UART_Init+0x58>)
 8000848:	0018      	movs	r0, r3
 800084a:	f001 ffeb 	bl	8002824 <HAL_UART_Init>
 800084e:	1e03      	subs	r3, r0, #0
 8000850:	d001      	beq.n	8000856 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000852:	f000 f9a3 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000104 	.word	0x20000104
 8000860:	40004400 	.word	0x40004400

08000864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b08b      	sub	sp, #44	; 0x2c
 8000868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	2414      	movs	r4, #20
 800086c:	193b      	adds	r3, r7, r4
 800086e:	0018      	movs	r0, r3
 8000870:	2314      	movs	r3, #20
 8000872:	001a      	movs	r2, r3
 8000874:	2100      	movs	r1, #0
 8000876:	f004 fb6a 	bl	8004f4e <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087a:	4b40      	ldr	r3, [pc, #256]	; (800097c <MX_GPIO_Init+0x118>)
 800087c:	695a      	ldr	r2, [r3, #20]
 800087e:	4b3f      	ldr	r3, [pc, #252]	; (800097c <MX_GPIO_Init+0x118>)
 8000880:	2180      	movs	r1, #128	; 0x80
 8000882:	0309      	lsls	r1, r1, #12
 8000884:	430a      	orrs	r2, r1
 8000886:	615a      	str	r2, [r3, #20]
 8000888:	4b3c      	ldr	r3, [pc, #240]	; (800097c <MX_GPIO_Init+0x118>)
 800088a:	695a      	ldr	r2, [r3, #20]
 800088c:	2380      	movs	r3, #128	; 0x80
 800088e:	031b      	lsls	r3, r3, #12
 8000890:	4013      	ands	r3, r2
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000896:	4b39      	ldr	r3, [pc, #228]	; (800097c <MX_GPIO_Init+0x118>)
 8000898:	695a      	ldr	r2, [r3, #20]
 800089a:	4b38      	ldr	r3, [pc, #224]	; (800097c <MX_GPIO_Init+0x118>)
 800089c:	2180      	movs	r1, #128	; 0x80
 800089e:	03c9      	lsls	r1, r1, #15
 80008a0:	430a      	orrs	r2, r1
 80008a2:	615a      	str	r2, [r3, #20]
 80008a4:	4b35      	ldr	r3, [pc, #212]	; (800097c <MX_GPIO_Init+0x118>)
 80008a6:	695a      	ldr	r2, [r3, #20]
 80008a8:	2380      	movs	r3, #128	; 0x80
 80008aa:	03db      	lsls	r3, r3, #15
 80008ac:	4013      	ands	r3, r2
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	4b32      	ldr	r3, [pc, #200]	; (800097c <MX_GPIO_Init+0x118>)
 80008b4:	695a      	ldr	r2, [r3, #20]
 80008b6:	4b31      	ldr	r3, [pc, #196]	; (800097c <MX_GPIO_Init+0x118>)
 80008b8:	2180      	movs	r1, #128	; 0x80
 80008ba:	0289      	lsls	r1, r1, #10
 80008bc:	430a      	orrs	r2, r1
 80008be:	615a      	str	r2, [r3, #20]
 80008c0:	4b2e      	ldr	r3, [pc, #184]	; (800097c <MX_GPIO_Init+0x118>)
 80008c2:	695a      	ldr	r2, [r3, #20]
 80008c4:	2380      	movs	r3, #128	; 0x80
 80008c6:	029b      	lsls	r3, r3, #10
 80008c8:	4013      	ands	r3, r2
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	4b2b      	ldr	r3, [pc, #172]	; (800097c <MX_GPIO_Init+0x118>)
 80008d0:	695a      	ldr	r2, [r3, #20]
 80008d2:	4b2a      	ldr	r3, [pc, #168]	; (800097c <MX_GPIO_Init+0x118>)
 80008d4:	2180      	movs	r1, #128	; 0x80
 80008d6:	02c9      	lsls	r1, r1, #11
 80008d8:	430a      	orrs	r2, r1
 80008da:	615a      	str	r2, [r3, #20]
 80008dc:	4b27      	ldr	r3, [pc, #156]	; (800097c <MX_GPIO_Init+0x118>)
 80008de:	695a      	ldr	r2, [r3, #20]
 80008e0:	2380      	movs	r3, #128	; 0x80
 80008e2:	02db      	lsls	r3, r3, #11
 80008e4:	4013      	ands	r3, r2
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80008ea:	2380      	movs	r3, #128	; 0x80
 80008ec:	019b      	lsls	r3, r3, #6
 80008ee:	4824      	ldr	r0, [pc, #144]	; (8000980 <MX_GPIO_Init+0x11c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	0019      	movs	r1, r3
 80008f4:	f000 fe05 	bl	8001502 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80008f8:	4b22      	ldr	r3, [pc, #136]	; (8000984 <MX_GPIO_Init+0x120>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	2170      	movs	r1, #112	; 0x70
 80008fe:	0018      	movs	r0, r3
 8000900:	f000 fdff 	bl	8001502 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000904:	193b      	adds	r3, r7, r4
 8000906:	2280      	movs	r2, #128	; 0x80
 8000908:	0192      	lsls	r2, r2, #6
 800090a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	193b      	adds	r3, r7, r4
 800090e:	2201      	movs	r2, #1
 8000910:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	193b      	adds	r3, r7, r4
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	193b      	adds	r3, r7, r4
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800091e:	193b      	adds	r3, r7, r4
 8000920:	4a17      	ldr	r2, [pc, #92]	; (8000980 <MX_GPIO_Init+0x11c>)
 8000922:	0019      	movs	r1, r3
 8000924:	0010      	movs	r0, r2
 8000926:	f000 fc5f 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800092a:	0021      	movs	r1, r4
 800092c:	187b      	adds	r3, r7, r1
 800092e:	2280      	movs	r2, #128	; 0x80
 8000930:	0112      	lsls	r2, r2, #4
 8000932:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000934:	000c      	movs	r4, r1
 8000936:	193b      	adds	r3, r7, r4
 8000938:	2200      	movs	r2, #0
 800093a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	193b      	adds	r3, r7, r4
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000942:	193b      	adds	r3, r7, r4
 8000944:	4a0f      	ldr	r2, [pc, #60]	; (8000984 <MX_GPIO_Init+0x120>)
 8000946:	0019      	movs	r1, r3
 8000948:	0010      	movs	r0, r2
 800094a:	f000 fc4d 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800094e:	0021      	movs	r1, r4
 8000950:	187b      	adds	r3, r7, r1
 8000952:	2270      	movs	r2, #112	; 0x70
 8000954:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000956:	187b      	adds	r3, r7, r1
 8000958:	2201      	movs	r2, #1
 800095a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	187b      	adds	r3, r7, r1
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	187b      	adds	r3, r7, r1
 8000964:	2200      	movs	r2, #0
 8000966:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000968:	187b      	adds	r3, r7, r1
 800096a:	4a06      	ldr	r2, [pc, #24]	; (8000984 <MX_GPIO_Init+0x120>)
 800096c:	0019      	movs	r1, r3
 800096e:	0010      	movs	r0, r2
 8000970:	f000 fc3a 	bl	80011e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000974:	46c0      	nop			; (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	b00b      	add	sp, #44	; 0x2c
 800097a:	bd90      	pop	{r4, r7, pc}
 800097c:	40021000 	.word	0x40021000
 8000980:	48000800 	.word	0x48000800
 8000984:	48000400 	.word	0x48000400

08000988 <HAL_UART_ErrorCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
    if (huart == &huart1) {
 8000990:	687a      	ldr	r2, [r7, #4]
 8000992:	4b23      	ldr	r3, [pc, #140]	; (8000a20 <HAL_UART_ErrorCallback+0x98>)
 8000994:	429a      	cmp	r2, r3
 8000996:	d13e      	bne.n	8000a16 <HAL_UART_ErrorCallback+0x8e>
        // 读取错误标志
        uint32_t error_flags = huart->ErrorCode;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2284      	movs	r2, #132	; 0x84
 800099c:	589b      	ldr	r3, [r3, r2]
 800099e:	60fb      	str	r3, [r7, #12]

        // 打印具体错误类型
        if (error_flags & HAL_UART_ERROR_PE) {
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	2201      	movs	r2, #1
 80009a4:	4013      	ands	r3, r2
 80009a6:	d004      	beq.n	80009b2 <HAL_UART_ErrorCallback+0x2a>
            SEGGER_RTT_WriteString(0, "UART Parity Error\n");
 80009a8:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <HAL_UART_ErrorCallback+0x9c>)
 80009aa:	0019      	movs	r1, r3
 80009ac:	2000      	movs	r0, #0
 80009ae:	f003 fa7f 	bl	8003eb0 <SEGGER_RTT_WriteString>
        }
        if (error_flags & HAL_UART_ERROR_FE) {
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	2204      	movs	r2, #4
 80009b6:	4013      	ands	r3, r2
 80009b8:	d004      	beq.n	80009c4 <HAL_UART_ErrorCallback+0x3c>
            SEGGER_RTT_WriteString(0, "UART Framing Error\n");
 80009ba:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <HAL_UART_ErrorCallback+0xa0>)
 80009bc:	0019      	movs	r1, r3
 80009be:	2000      	movs	r0, #0
 80009c0:	f003 fa76 	bl	8003eb0 <SEGGER_RTT_WriteString>
        }
        if (error_flags & HAL_UART_ERROR_NE) {
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	2202      	movs	r2, #2
 80009c8:	4013      	ands	r3, r2
 80009ca:	d004      	beq.n	80009d6 <HAL_UART_ErrorCallback+0x4e>
            SEGGER_RTT_WriteString(0, "UART Noise Error\n");
 80009cc:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <HAL_UART_ErrorCallback+0xa4>)
 80009ce:	0019      	movs	r1, r3
 80009d0:	2000      	movs	r0, #0
 80009d2:	f003 fa6d 	bl	8003eb0 <SEGGER_RTT_WriteString>
        }
        if (error_flags & HAL_UART_ERROR_ORE) {
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	2208      	movs	r2, #8
 80009da:	4013      	ands	r3, r2
 80009dc:	d004      	beq.n	80009e8 <HAL_UART_ErrorCallback+0x60>
            SEGGER_RTT_WriteString(0, "UART Overrun Error\n");
 80009de:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <HAL_UART_ErrorCallback+0xa8>)
 80009e0:	0019      	movs	r1, r3
 80009e2:	2000      	movs	r0, #0
 80009e4:	f003 fa64 	bl	8003eb0 <SEGGER_RTT_WriteString>
        }

        // 清除错误标志
        __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_PE | UART_FLAG_FE | UART_FLAG_NE | UART_FLAG_ORE);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	220f      	movs	r2, #15
 80009ee:	621a      	str	r2, [r3, #32]

        // 重新启动接收
        rx_index = 0;
 80009f0:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <HAL_UART_ErrorCallback+0xac>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	801a      	strh	r2, [r3, #0]
        memset(rx_buf, 0, RX_BUF_SIZE);
 80009f6:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <HAL_UART_ErrorCallback+0xb0>)
 80009f8:	22c8      	movs	r2, #200	; 0xc8
 80009fa:	2100      	movs	r1, #0
 80009fc:	0018      	movs	r0, r3
 80009fe:	f004 faa6 	bl	8004f4e <memset>
        HAL_UART_Receive_IT(&huart1, &rx_buf[rx_index], 1);
 8000a02:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <HAL_UART_ErrorCallback+0xac>)
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	001a      	movs	r2, r3
 8000a08:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <HAL_UART_ErrorCallback+0xb0>)
 8000a0a:	18d1      	adds	r1, r2, r3
 8000a0c:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <HAL_UART_ErrorCallback+0x98>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	0018      	movs	r0, r3
 8000a12:	f001 ff5b 	bl	80028cc <HAL_UART_Receive_IT>
    }
}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	b004      	add	sp, #16
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	2000007c 	.word	0x2000007c
 8000a24:	08004f78 	.word	0x08004f78
 8000a28:	08004f8c 	.word	0x08004f8c
 8000a2c:	08004fa0 	.word	0x08004fa0
 8000a30:	08004fb4 	.word	0x08004fb4
 8000a34:	20000258 	.word	0x20000258
 8000a38:	20000190 	.word	0x20000190

08000a3c <HAL_TIM_PeriodElapsedCallback>:

// 定时器中断处理函�???????
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
    if (htim == &htim3) {
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	4b24      	ldr	r3, [pc, #144]	; (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d141      	bne.n	8000ad0 <HAL_TIM_PeriodElapsedCallback+0x94>

        timer_counter++;
 8000a4c:	4b23      	ldr	r3, [pc, #140]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	1c5a      	adds	r2, r3, #1
 8000a52:	4b22      	ldr	r3, [pc, #136]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000a54:	601a      	str	r2, [r3, #0]
        blinkCounter++;
 8000a56:	4b22      	ldr	r3, [pc, #136]	; (8000ae0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	1c5a      	adds	r2, r3, #1
 8000a5c:	4b20      	ldr	r3, [pc, #128]	; (8000ae0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000a5e:	601a      	str	r2, [r3, #0]

        if (timer_counter >= 5) {
 8000a60:	4b1e      	ldr	r3, [pc, #120]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b04      	cmp	r3, #4
 8000a66:	d91e      	bls.n	8000aa6 <HAL_TIM_PeriodElapsedCallback+0x6a>
            // 在这里添�??????? 1 秒间隔执行的代码
          //  SEGGER_RTT_WriteString(0, "Timer interrupt occurred!\n");
            timer_counter = 0;
 8000a68:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
            HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000a6e:	2380      	movs	r3, #128	; 0x80
 8000a70:	019b      	lsls	r3, r3, #6
 8000a72:	4a1c      	ldr	r2, [pc, #112]	; (8000ae4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000a74:	0019      	movs	r1, r3
 8000a76:	0010      	movs	r0, r2
 8000a78:	f000 fd60 	bl	800153c <HAL_GPIO_TogglePin>

    	    position_3d = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);
 8000a7c:	2380      	movs	r3, #128	; 0x80
 8000a7e:	011b      	lsls	r3, r3, #4
 8000a80:	4a19      	ldr	r2, [pc, #100]	; (8000ae8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000a82:	0019      	movs	r1, r3
 8000a84:	0010      	movs	r0, r2
 8000a86:	f000 fd1f 	bl	80014c8 <HAL_GPIO_ReadPin>
 8000a8a:	0003      	movs	r3, r0
 8000a8c:	1e5a      	subs	r2, r3, #1
 8000a8e:	4193      	sbcs	r3, r2
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4b16      	ldr	r3, [pc, #88]	; (8000aec <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000a94:	701a      	strb	r2, [r3, #0]
    	    SEGGER_RTT_printf(0, "position_3d Voltage: %d\r\n", (int)position_3d);
 8000a96:	4b15      	ldr	r3, [pc, #84]	; (8000aec <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	001a      	movs	r2, r3
 8000a9c:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000a9e:	0019      	movs	r1, r3
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f003 fd57 	bl	8004554 <SEGGER_RTT_printf>


        }

        if (blinkCounter >= 7) {  // 50 是主循环中的延时时间
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2b06      	cmp	r3, #6
 8000aac:	d910      	bls.n	8000ad0 <HAL_TIM_PeriodElapsedCallback+0x94>
            blinkCounter = 0;
 8000aae:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
            decimalPointState = !decimalPointState;  // 切换小数点状�??
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	1e5a      	subs	r2, r3, #1
 8000aba:	4193      	sbcs	r3, r2
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	2201      	movs	r2, #1
 8000ac0:	4053      	eors	r3, r2
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	1c1a      	adds	r2, r3, #0
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	4013      	ands	r3, r2
 8000aca:	b2da      	uxtb	r2, r3
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000ace:	701a      	strb	r2, [r3, #0]
          //  SEGGER_RTT_WriteString(0, "occurred!\n");
        }
    }
}
 8000ad0:	46c0      	nop			; (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	b002      	add	sp, #8
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000034 	.word	0x20000034
 8000adc:	2000018c 	.word	0x2000018c
 8000ae0:	20000268 	.word	0x20000268
 8000ae4:	48000800 	.word	0x48000800
 8000ae8:	48000400 	.word	0x48000400
 8000aec:	20000264 	.word	0x20000264
 8000af0:	08004fc8 	.word	0x08004fc8
 8000af4:	20000004 	.word	0x20000004

08000af8 <HAL_UART_RxCpltCallback>:

// UART接收中断回调函数
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
    if (huart == &huart1) {
 8000b00:	687a      	ldr	r2, [r7, #4]
 8000b02:	4b21      	ldr	r3, [pc, #132]	; (8000b88 <HAL_UART_RxCpltCallback+0x90>)
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d13a      	bne.n	8000b7e <HAL_UART_RxCpltCallback+0x86>
        // 处理接收到的字节
        if (rx_buf[rx_index] == '\n' || rx_index >= RX_BUF_SIZE - 1) {
 8000b08:	4b20      	ldr	r3, [pc, #128]	; (8000b8c <HAL_UART_RxCpltCallback+0x94>)
 8000b0a:	881b      	ldrh	r3, [r3, #0]
 8000b0c:	001a      	movs	r2, r3
 8000b0e:	4b20      	ldr	r3, [pc, #128]	; (8000b90 <HAL_UART_RxCpltCallback+0x98>)
 8000b10:	5c9b      	ldrb	r3, [r3, r2]
 8000b12:	2b0a      	cmp	r3, #10
 8000b14:	d003      	beq.n	8000b1e <HAL_UART_RxCpltCallback+0x26>
 8000b16:	4b1d      	ldr	r3, [pc, #116]	; (8000b8c <HAL_UART_RxCpltCallback+0x94>)
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	2bc6      	cmp	r3, #198	; 0xc6
 8000b1c:	d918      	bls.n	8000b50 <HAL_UART_RxCpltCallback+0x58>
            // 打印接收到的数据
            SEGGER_RTT_WriteString(0, "Received via UART: ");
 8000b1e:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <HAL_UART_RxCpltCallback+0x9c>)
 8000b20:	0019      	movs	r1, r3
 8000b22:	2000      	movs	r0, #0
 8000b24:	f003 f9c4 	bl	8003eb0 <SEGGER_RTT_WriteString>
            SEGGER_RTT_WriteString(0, (char*)rx_buf);
 8000b28:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <HAL_UART_RxCpltCallback+0x98>)
 8000b2a:	0019      	movs	r1, r3
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	f003 f9bf 	bl	8003eb0 <SEGGER_RTT_WriteString>
            SEGGER_RTT_WriteString(0, "\n");
 8000b32:	4b19      	ldr	r3, [pc, #100]	; (8000b98 <HAL_UART_RxCpltCallback+0xa0>)
 8000b34:	0019      	movs	r1, r3
 8000b36:	2000      	movs	r0, #0
 8000b38:	f003 f9ba 	bl	8003eb0 <SEGGER_RTT_WriteString>
//            }



            // 清空缓冲区
            memset(rx_buf, 0, RX_BUF_SIZE);
 8000b3c:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <HAL_UART_RxCpltCallback+0x98>)
 8000b3e:	22c8      	movs	r2, #200	; 0xc8
 8000b40:	2100      	movs	r1, #0
 8000b42:	0018      	movs	r0, r3
 8000b44:	f004 fa03 	bl	8004f4e <memset>
            rx_index = 0;
 8000b48:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <HAL_UART_RxCpltCallback+0x94>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	801a      	strh	r2, [r3, #0]
 8000b4e:	e005      	b.n	8000b5c <HAL_UART_RxCpltCallback+0x64>
        } else {
            // 接收下一个字节数据
            rx_index++;
 8000b50:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <HAL_UART_RxCpltCallback+0x94>)
 8000b52:	881b      	ldrh	r3, [r3, #0]
 8000b54:	3301      	adds	r3, #1
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <HAL_UART_RxCpltCallback+0x94>)
 8000b5a:	801a      	strh	r2, [r3, #0]
        }

        // 确保索引不越界
        if (rx_index >= RX_BUF_SIZE) {
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <HAL_UART_RxCpltCallback+0x94>)
 8000b5e:	881b      	ldrh	r3, [r3, #0]
 8000b60:	2bc7      	cmp	r3, #199	; 0xc7
 8000b62:	d902      	bls.n	8000b6a <HAL_UART_RxCpltCallback+0x72>
            rx_index = 0;
 8000b64:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <HAL_UART_RxCpltCallback+0x94>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	801a      	strh	r2, [r3, #0]
        }

        // 重新启用接收中断
        HAL_UART_Receive_IT(&huart1, &rx_buf[rx_index], 1);
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <HAL_UART_RxCpltCallback+0x94>)
 8000b6c:	881b      	ldrh	r3, [r3, #0]
 8000b6e:	001a      	movs	r2, r3
 8000b70:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <HAL_UART_RxCpltCallback+0x98>)
 8000b72:	18d1      	adds	r1, r2, r3
 8000b74:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <HAL_UART_RxCpltCallback+0x90>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f001 fea7 	bl	80028cc <HAL_UART_Receive_IT>
    }
}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	b002      	add	sp, #8
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	2000007c 	.word	0x2000007c
 8000b8c:	20000258 	.word	0x20000258
 8000b90:	20000190 	.word	0x20000190
 8000b94:	08004fe4 	.word	0x08004fe4
 8000b98:	08004ff8 	.word	0x08004ff8

08000b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba0:	b672      	cpsid	i
}
 8000ba2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <Error_Handler+0x8>
	...

08000ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bae:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <HAL_MspInit+0x44>)
 8000bb0:	699a      	ldr	r2, [r3, #24]
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <HAL_MspInit+0x44>)
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	619a      	str	r2, [r3, #24]
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <HAL_MspInit+0x44>)
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <HAL_MspInit+0x44>)
 8000bc8:	69da      	ldr	r2, [r3, #28]
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <HAL_MspInit+0x44>)
 8000bcc:	2180      	movs	r1, #128	; 0x80
 8000bce:	0549      	lsls	r1, r1, #21
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	61da      	str	r2, [r3, #28]
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <HAL_MspInit+0x44>)
 8000bd6:	69da      	ldr	r2, [r3, #28]
 8000bd8:	2380      	movs	r3, #128	; 0x80
 8000bda:	055b      	lsls	r3, r3, #21
 8000bdc:	4013      	ands	r3, r2
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b002      	add	sp, #8
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	40021000 	.word	0x40021000

08000bf0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a0d      	ldr	r2, [pc, #52]	; (8000c34 <HAL_TIM_Base_MspInit+0x44>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d113      	bne.n	8000c2a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c02:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <HAL_TIM_Base_MspInit+0x48>)
 8000c04:	69da      	ldr	r2, [r3, #28]
 8000c06:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <HAL_TIM_Base_MspInit+0x48>)
 8000c08:	2102      	movs	r1, #2
 8000c0a:	430a      	orrs	r2, r1
 8000c0c:	61da      	str	r2, [r3, #28]
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <HAL_TIM_Base_MspInit+0x48>)
 8000c10:	69db      	ldr	r3, [r3, #28]
 8000c12:	2202      	movs	r2, #2
 8000c14:	4013      	ands	r3, r2
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	2010      	movs	r0, #16
 8000c20:	f000 fa32 	bl	8001088 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c24:	2010      	movs	r0, #16
 8000c26:	f000 fa44 	bl	80010b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	b004      	add	sp, #16
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	40000400 	.word	0x40000400
 8000c38:	40021000 	.word	0x40021000

08000c3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c3c:	b590      	push	{r4, r7, lr}
 8000c3e:	b08d      	sub	sp, #52	; 0x34
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	241c      	movs	r4, #28
 8000c46:	193b      	adds	r3, r7, r4
 8000c48:	0018      	movs	r0, r3
 8000c4a:	2314      	movs	r3, #20
 8000c4c:	001a      	movs	r2, r3
 8000c4e:	2100      	movs	r1, #0
 8000c50:	f004 f97d 	bl	8004f4e <memset>
  if(huart->Instance==USART1)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a3d      	ldr	r2, [pc, #244]	; (8000d50 <HAL_UART_MspInit+0x114>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d13c      	bne.n	8000cd8 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c5e:	4b3d      	ldr	r3, [pc, #244]	; (8000d54 <HAL_UART_MspInit+0x118>)
 8000c60:	699a      	ldr	r2, [r3, #24]
 8000c62:	4b3c      	ldr	r3, [pc, #240]	; (8000d54 <HAL_UART_MspInit+0x118>)
 8000c64:	2180      	movs	r1, #128	; 0x80
 8000c66:	01c9      	lsls	r1, r1, #7
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	619a      	str	r2, [r3, #24]
 8000c6c:	4b39      	ldr	r3, [pc, #228]	; (8000d54 <HAL_UART_MspInit+0x118>)
 8000c6e:	699a      	ldr	r2, [r3, #24]
 8000c70:	2380      	movs	r3, #128	; 0x80
 8000c72:	01db      	lsls	r3, r3, #7
 8000c74:	4013      	ands	r3, r2
 8000c76:	61bb      	str	r3, [r7, #24]
 8000c78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	4b36      	ldr	r3, [pc, #216]	; (8000d54 <HAL_UART_MspInit+0x118>)
 8000c7c:	695a      	ldr	r2, [r3, #20]
 8000c7e:	4b35      	ldr	r3, [pc, #212]	; (8000d54 <HAL_UART_MspInit+0x118>)
 8000c80:	2180      	movs	r1, #128	; 0x80
 8000c82:	0289      	lsls	r1, r1, #10
 8000c84:	430a      	orrs	r2, r1
 8000c86:	615a      	str	r2, [r3, #20]
 8000c88:	4b32      	ldr	r3, [pc, #200]	; (8000d54 <HAL_UART_MspInit+0x118>)
 8000c8a:	695a      	ldr	r2, [r3, #20]
 8000c8c:	2380      	movs	r3, #128	; 0x80
 8000c8e:	029b      	lsls	r3, r3, #10
 8000c90:	4013      	ands	r3, r2
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c96:	193b      	adds	r3, r7, r4
 8000c98:	22c0      	movs	r2, #192	; 0xc0
 8000c9a:	00d2      	lsls	r2, r2, #3
 8000c9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	0021      	movs	r1, r4
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	2202      	movs	r2, #2
 8000ca4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	187b      	adds	r3, r7, r1
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cac:	187b      	adds	r3, r7, r1
 8000cae:	2203      	movs	r2, #3
 8000cb0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000cb2:	187b      	adds	r3, r7, r1
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb8:	187a      	adds	r2, r7, r1
 8000cba:	2390      	movs	r3, #144	; 0x90
 8000cbc:	05db      	lsls	r3, r3, #23
 8000cbe:	0011      	movs	r1, r2
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f000 fa91 	bl	80011e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	201b      	movs	r0, #27
 8000ccc:	f000 f9dc 	bl	8001088 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cd0:	201b      	movs	r0, #27
 8000cd2:	f000 f9ee 	bl	80010b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cd6:	e037      	b.n	8000d48 <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART2)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a1e      	ldr	r2, [pc, #120]	; (8000d58 <HAL_UART_MspInit+0x11c>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d132      	bne.n	8000d48 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ce2:	4b1c      	ldr	r3, [pc, #112]	; (8000d54 <HAL_UART_MspInit+0x118>)
 8000ce4:	69da      	ldr	r2, [r3, #28]
 8000ce6:	4b1b      	ldr	r3, [pc, #108]	; (8000d54 <HAL_UART_MspInit+0x118>)
 8000ce8:	2180      	movs	r1, #128	; 0x80
 8000cea:	0289      	lsls	r1, r1, #10
 8000cec:	430a      	orrs	r2, r1
 8000cee:	61da      	str	r2, [r3, #28]
 8000cf0:	4b18      	ldr	r3, [pc, #96]	; (8000d54 <HAL_UART_MspInit+0x118>)
 8000cf2:	69da      	ldr	r2, [r3, #28]
 8000cf4:	2380      	movs	r3, #128	; 0x80
 8000cf6:	029b      	lsls	r3, r3, #10
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <HAL_UART_MspInit+0x118>)
 8000d00:	695a      	ldr	r2, [r3, #20]
 8000d02:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <HAL_UART_MspInit+0x118>)
 8000d04:	2180      	movs	r1, #128	; 0x80
 8000d06:	0289      	lsls	r1, r1, #10
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	615a      	str	r2, [r3, #20]
 8000d0c:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <HAL_UART_MspInit+0x118>)
 8000d0e:	695a      	ldr	r2, [r3, #20]
 8000d10:	2380      	movs	r3, #128	; 0x80
 8000d12:	029b      	lsls	r3, r3, #10
 8000d14:	4013      	ands	r3, r2
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d1a:	211c      	movs	r1, #28
 8000d1c:	187b      	adds	r3, r7, r1
 8000d1e:	220c      	movs	r2, #12
 8000d20:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	187b      	adds	r3, r7, r1
 8000d24:	2202      	movs	r2, #2
 8000d26:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	187b      	adds	r3, r7, r1
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	2203      	movs	r2, #3
 8000d32:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	2201      	movs	r2, #1
 8000d38:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3a:	187a      	adds	r2, r7, r1
 8000d3c:	2390      	movs	r3, #144	; 0x90
 8000d3e:	05db      	lsls	r3, r3, #23
 8000d40:	0011      	movs	r1, r2
 8000d42:	0018      	movs	r0, r3
 8000d44:	f000 fa50 	bl	80011e8 <HAL_GPIO_Init>
}
 8000d48:	46c0      	nop			; (mov r8, r8)
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	b00d      	add	sp, #52	; 0x34
 8000d4e:	bd90      	pop	{r4, r7, pc}
 8000d50:	40013800 	.word	0x40013800
 8000d54:	40021000 	.word	0x40021000
 8000d58:	40004400 	.word	0x40004400

08000d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000d60:	f001 f874 	bl	8001e4c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <NMI_Handler+0x8>

08000d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <HardFault_Handler+0x4>

08000d6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d70:	46c0      	nop			; (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d84:	f000 f894 	bl	8000eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d88:	46c0      	nop			; (mov r8, r8)
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d94:	4b03      	ldr	r3, [pc, #12]	; (8000da4 <TIM3_IRQHandler+0x14>)
 8000d96:	0018      	movs	r0, r3
 8000d98:	f001 f9dc 	bl	8002154 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d9c:	46c0      	nop			; (mov r8, r8)
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	20000034 	.word	0x20000034

08000da8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000dac:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <USART1_IRQHandler+0x14>)
 8000dae:	0018      	movs	r0, r3
 8000db0:	f001 fde4 	bl	800297c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000db4:	46c0      	nop			; (mov r8, r8)
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	2000007c 	.word	0x2000007c

08000dc0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000dc4:	46c0      	nop			; (mov r8, r8)
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dcc:	480d      	ldr	r0, [pc, #52]	; (8000e04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dd0:	f7ff fff6 	bl	8000dc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dd4:	480c      	ldr	r0, [pc, #48]	; (8000e08 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dd6:	490d      	ldr	r1, [pc, #52]	; (8000e0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dd8:	4a0d      	ldr	r2, [pc, #52]	; (8000e10 <LoopForever+0xe>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ddc:	e002      	b.n	8000de4 <LoopCopyDataInit>

08000dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de2:	3304      	adds	r3, #4

08000de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de8:	d3f9      	bcc.n	8000dde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dea:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dec:	4c0a      	ldr	r4, [pc, #40]	; (8000e18 <LoopForever+0x16>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df0:	e001      	b.n	8000df6 <LoopFillZerobss>

08000df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df4:	3204      	adds	r2, #4

08000df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df8:	d3fb      	bcc.n	8000df2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dfa:	f004 f87b 	bl	8004ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dfe:	f7ff fb01 	bl	8000404 <main>

08000e02 <LoopForever>:

LoopForever:
    b LoopForever
 8000e02:	e7fe      	b.n	8000e02 <LoopForever>
  ldr   r0, =_estack
 8000e04:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e0c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000e10:	080051a8 	.word	0x080051a8
  ldr r2, =_sbss
 8000e14:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000e18:	20000760 	.word	0x20000760

08000e1c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e1c:	e7fe      	b.n	8000e1c <ADC1_IRQHandler>
	...

08000e20 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e24:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <HAL_Init+0x24>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_Init+0x24>)
 8000e2a:	2110      	movs	r1, #16
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000e30:	2003      	movs	r0, #3
 8000e32:	f000 f809 	bl	8000e48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e36:	f7ff feb7 	bl	8000ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e3a:	2300      	movs	r3, #0
}
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	40022000 	.word	0x40022000

08000e48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e50:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <HAL_InitTick+0x5c>)
 8000e52:	681c      	ldr	r4, [r3, #0]
 8000e54:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <HAL_InitTick+0x60>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	0019      	movs	r1, r3
 8000e5a:	23fa      	movs	r3, #250	; 0xfa
 8000e5c:	0098      	lsls	r0, r3, #2
 8000e5e:	f7ff f95b 	bl	8000118 <__udivsi3>
 8000e62:	0003      	movs	r3, r0
 8000e64:	0019      	movs	r1, r3
 8000e66:	0020      	movs	r0, r4
 8000e68:	f7ff f956 	bl	8000118 <__udivsi3>
 8000e6c:	0003      	movs	r3, r0
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f000 f92f 	bl	80010d2 <HAL_SYSTICK_Config>
 8000e74:	1e03      	subs	r3, r0, #0
 8000e76:	d001      	beq.n	8000e7c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e00f      	b.n	8000e9c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b03      	cmp	r3, #3
 8000e80:	d80b      	bhi.n	8000e9a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	2301      	movs	r3, #1
 8000e86:	425b      	negs	r3, r3
 8000e88:	2200      	movs	r2, #0
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f000 f8fc 	bl	8001088 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_InitTick+0x64>)
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000e96:	2300      	movs	r3, #0
 8000e98:	e000      	b.n	8000e9c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
}
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	b003      	add	sp, #12
 8000ea2:	bd90      	pop	{r4, r7, pc}
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	20000010 	.word	0x20000010
 8000eac:	2000000c 	.word	0x2000000c

08000eb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <HAL_IncTick+0x1c>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	001a      	movs	r2, r3
 8000eba:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <HAL_IncTick+0x20>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	18d2      	adds	r2, r2, r3
 8000ec0:	4b03      	ldr	r3, [pc, #12]	; (8000ed0 <HAL_IncTick+0x20>)
 8000ec2:	601a      	str	r2, [r3, #0]
}
 8000ec4:	46c0      	nop			; (mov r8, r8)
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	20000010 	.word	0x20000010
 8000ed0:	200002a4 	.word	0x200002a4

08000ed4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b02      	ldr	r3, [pc, #8]	; (8000ee4 <HAL_GetTick+0x10>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	0018      	movs	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	200002a4 	.word	0x200002a4

08000ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef0:	f7ff fff0 	bl	8000ed4 <HAL_GetTick>
 8000ef4:	0003      	movs	r3, r0
 8000ef6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	3301      	adds	r3, #1
 8000f00:	d005      	beq.n	8000f0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f02:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_Delay+0x44>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	001a      	movs	r2, r3
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	189b      	adds	r3, r3, r2
 8000f0c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	f7ff ffe0 	bl	8000ed4 <HAL_GetTick>
 8000f14:	0002      	movs	r2, r0
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d8f7      	bhi.n	8000f10 <HAL_Delay+0x28>
  {
  }
}
 8000f20:	46c0      	nop			; (mov r8, r8)
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	46bd      	mov	sp, r7
 8000f26:	b004      	add	sp, #16
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	20000010 	.word	0x20000010

08000f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	0002      	movs	r2, r0
 8000f38:	1dfb      	adds	r3, r7, #7
 8000f3a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f3c:	1dfb      	adds	r3, r7, #7
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b7f      	cmp	r3, #127	; 0x7f
 8000f42:	d809      	bhi.n	8000f58 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f44:	1dfb      	adds	r3, r7, #7
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	001a      	movs	r2, r3
 8000f4a:	231f      	movs	r3, #31
 8000f4c:	401a      	ands	r2, r3
 8000f4e:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <__NVIC_EnableIRQ+0x30>)
 8000f50:	2101      	movs	r1, #1
 8000f52:	4091      	lsls	r1, r2
 8000f54:	000a      	movs	r2, r1
 8000f56:	601a      	str	r2, [r3, #0]
  }
}
 8000f58:	46c0      	nop			; (mov r8, r8)
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	b002      	add	sp, #8
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	e000e100 	.word	0xe000e100

08000f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f64:	b590      	push	{r4, r7, lr}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	0002      	movs	r2, r0
 8000f6c:	6039      	str	r1, [r7, #0]
 8000f6e:	1dfb      	adds	r3, r7, #7
 8000f70:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f72:	1dfb      	adds	r3, r7, #7
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b7f      	cmp	r3, #127	; 0x7f
 8000f78:	d828      	bhi.n	8000fcc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f7a:	4a2f      	ldr	r2, [pc, #188]	; (8001038 <__NVIC_SetPriority+0xd4>)
 8000f7c:	1dfb      	adds	r3, r7, #7
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	b25b      	sxtb	r3, r3
 8000f82:	089b      	lsrs	r3, r3, #2
 8000f84:	33c0      	adds	r3, #192	; 0xc0
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	589b      	ldr	r3, [r3, r2]
 8000f8a:	1dfa      	adds	r2, r7, #7
 8000f8c:	7812      	ldrb	r2, [r2, #0]
 8000f8e:	0011      	movs	r1, r2
 8000f90:	2203      	movs	r2, #3
 8000f92:	400a      	ands	r2, r1
 8000f94:	00d2      	lsls	r2, r2, #3
 8000f96:	21ff      	movs	r1, #255	; 0xff
 8000f98:	4091      	lsls	r1, r2
 8000f9a:	000a      	movs	r2, r1
 8000f9c:	43d2      	mvns	r2, r2
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	019b      	lsls	r3, r3, #6
 8000fa6:	22ff      	movs	r2, #255	; 0xff
 8000fa8:	401a      	ands	r2, r3
 8000faa:	1dfb      	adds	r3, r7, #7
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	0018      	movs	r0, r3
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	4003      	ands	r3, r0
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fb8:	481f      	ldr	r0, [pc, #124]	; (8001038 <__NVIC_SetPriority+0xd4>)
 8000fba:	1dfb      	adds	r3, r7, #7
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	b25b      	sxtb	r3, r3
 8000fc0:	089b      	lsrs	r3, r3, #2
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	33c0      	adds	r3, #192	; 0xc0
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000fca:	e031      	b.n	8001030 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fcc:	4a1b      	ldr	r2, [pc, #108]	; (800103c <__NVIC_SetPriority+0xd8>)
 8000fce:	1dfb      	adds	r3, r7, #7
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	0019      	movs	r1, r3
 8000fd4:	230f      	movs	r3, #15
 8000fd6:	400b      	ands	r3, r1
 8000fd8:	3b08      	subs	r3, #8
 8000fda:	089b      	lsrs	r3, r3, #2
 8000fdc:	3306      	adds	r3, #6
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	18d3      	adds	r3, r2, r3
 8000fe2:	3304      	adds	r3, #4
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	1dfa      	adds	r2, r7, #7
 8000fe8:	7812      	ldrb	r2, [r2, #0]
 8000fea:	0011      	movs	r1, r2
 8000fec:	2203      	movs	r2, #3
 8000fee:	400a      	ands	r2, r1
 8000ff0:	00d2      	lsls	r2, r2, #3
 8000ff2:	21ff      	movs	r1, #255	; 0xff
 8000ff4:	4091      	lsls	r1, r2
 8000ff6:	000a      	movs	r2, r1
 8000ff8:	43d2      	mvns	r2, r2
 8000ffa:	401a      	ands	r2, r3
 8000ffc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	019b      	lsls	r3, r3, #6
 8001002:	22ff      	movs	r2, #255	; 0xff
 8001004:	401a      	ands	r2, r3
 8001006:	1dfb      	adds	r3, r7, #7
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	0018      	movs	r0, r3
 800100c:	2303      	movs	r3, #3
 800100e:	4003      	ands	r3, r0
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001014:	4809      	ldr	r0, [pc, #36]	; (800103c <__NVIC_SetPriority+0xd8>)
 8001016:	1dfb      	adds	r3, r7, #7
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	001c      	movs	r4, r3
 800101c:	230f      	movs	r3, #15
 800101e:	4023      	ands	r3, r4
 8001020:	3b08      	subs	r3, #8
 8001022:	089b      	lsrs	r3, r3, #2
 8001024:	430a      	orrs	r2, r1
 8001026:	3306      	adds	r3, #6
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	18c3      	adds	r3, r0, r3
 800102c:	3304      	adds	r3, #4
 800102e:	601a      	str	r2, [r3, #0]
}
 8001030:	46c0      	nop			; (mov r8, r8)
 8001032:	46bd      	mov	sp, r7
 8001034:	b003      	add	sp, #12
 8001036:	bd90      	pop	{r4, r7, pc}
 8001038:	e000e100 	.word	0xe000e100
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	1e5a      	subs	r2, r3, #1
 800104c:	2380      	movs	r3, #128	; 0x80
 800104e:	045b      	lsls	r3, r3, #17
 8001050:	429a      	cmp	r2, r3
 8001052:	d301      	bcc.n	8001058 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001054:	2301      	movs	r3, #1
 8001056:	e010      	b.n	800107a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001058:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <SysTick_Config+0x44>)
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	3a01      	subs	r2, #1
 800105e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001060:	2301      	movs	r3, #1
 8001062:	425b      	negs	r3, r3
 8001064:	2103      	movs	r1, #3
 8001066:	0018      	movs	r0, r3
 8001068:	f7ff ff7c 	bl	8000f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <SysTick_Config+0x44>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001072:	4b04      	ldr	r3, [pc, #16]	; (8001084 <SysTick_Config+0x44>)
 8001074:	2207      	movs	r2, #7
 8001076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001078:	2300      	movs	r3, #0
}
 800107a:	0018      	movs	r0, r3
 800107c:	46bd      	mov	sp, r7
 800107e:	b002      	add	sp, #8
 8001080:	bd80      	pop	{r7, pc}
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	e000e010 	.word	0xe000e010

08001088 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	60b9      	str	r1, [r7, #8]
 8001090:	607a      	str	r2, [r7, #4]
 8001092:	210f      	movs	r1, #15
 8001094:	187b      	adds	r3, r7, r1
 8001096:	1c02      	adds	r2, r0, #0
 8001098:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	187b      	adds	r3, r7, r1
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	b25b      	sxtb	r3, r3
 80010a2:	0011      	movs	r1, r2
 80010a4:	0018      	movs	r0, r3
 80010a6:	f7ff ff5d 	bl	8000f64 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	46bd      	mov	sp, r7
 80010ae:	b004      	add	sp, #16
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	0002      	movs	r2, r0
 80010ba:	1dfb      	adds	r3, r7, #7
 80010bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010be:	1dfb      	adds	r3, r7, #7
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	b25b      	sxtb	r3, r3
 80010c4:	0018      	movs	r0, r3
 80010c6:	f7ff ff33 	bl	8000f30 <__NVIC_EnableIRQ>
}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b002      	add	sp, #8
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	0018      	movs	r0, r3
 80010de:	f7ff ffaf 	bl	8001040 <SysTick_Config>
 80010e2:	0003      	movs	r3, r0
}
 80010e4:	0018      	movs	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	b002      	add	sp, #8
 80010ea:	bd80      	pop	{r7, pc}

080010ec <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2221      	movs	r2, #33	; 0x21
 80010f8:	5c9b      	ldrb	r3, [r3, r2]
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d008      	beq.n	8001112 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2204      	movs	r2, #4
 8001104:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2220      	movs	r2, #32
 800110a:	2100      	movs	r1, #0
 800110c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e020      	b.n	8001154 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	210e      	movs	r1, #14
 800111e:	438a      	bics	r2, r1
 8001120:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2101      	movs	r1, #1
 800112e:	438a      	bics	r2, r1
 8001130:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800113a:	2101      	movs	r1, #1
 800113c:	4091      	lsls	r1, r2
 800113e:	000a      	movs	r2, r1
 8001140:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2221      	movs	r2, #33	; 0x21
 8001146:	2101      	movs	r1, #1
 8001148:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2220      	movs	r2, #32
 800114e:	2100      	movs	r1, #0
 8001150:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001152:	2300      	movs	r3, #0
}
 8001154:	0018      	movs	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	b002      	add	sp, #8
 800115a:	bd80      	pop	{r7, pc}

0800115c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001164:	210f      	movs	r1, #15
 8001166:	187b      	adds	r3, r7, r1
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2221      	movs	r2, #33	; 0x21
 8001170:	5c9b      	ldrb	r3, [r3, r2]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d006      	beq.n	8001186 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2204      	movs	r2, #4
 800117c:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800117e:	187b      	adds	r3, r7, r1
 8001180:	2201      	movs	r2, #1
 8001182:	701a      	strb	r2, [r3, #0]
 8001184:	e028      	b.n	80011d8 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	210e      	movs	r1, #14
 8001192:	438a      	bics	r2, r1
 8001194:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2101      	movs	r1, #1
 80011a2:	438a      	bics	r2, r1
 80011a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ae:	2101      	movs	r1, #1
 80011b0:	4091      	lsls	r1, r2
 80011b2:	000a      	movs	r2, r1
 80011b4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2221      	movs	r2, #33	; 0x21
 80011ba:	2101      	movs	r1, #1
 80011bc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2220      	movs	r2, #32
 80011c2:	2100      	movs	r1, #0
 80011c4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d004      	beq.n	80011d8 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	0010      	movs	r0, r2
 80011d6:	4798      	blx	r3
    }
  }
  return status;
 80011d8:	230f      	movs	r3, #15
 80011da:	18fb      	adds	r3, r7, r3
 80011dc:	781b      	ldrb	r3, [r3, #0]
}
 80011de:	0018      	movs	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b004      	add	sp, #16
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f6:	e14f      	b.n	8001498 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2101      	movs	r1, #1
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	4091      	lsls	r1, r2
 8001202:	000a      	movs	r2, r1
 8001204:	4013      	ands	r3, r2
 8001206:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d100      	bne.n	8001210 <HAL_GPIO_Init+0x28>
 800120e:	e140      	b.n	8001492 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	2203      	movs	r2, #3
 8001216:	4013      	ands	r3, r2
 8001218:	2b01      	cmp	r3, #1
 800121a:	d005      	beq.n	8001228 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	2203      	movs	r2, #3
 8001222:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001224:	2b02      	cmp	r3, #2
 8001226:	d130      	bne.n	800128a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	2203      	movs	r2, #3
 8001234:	409a      	lsls	r2, r3
 8001236:	0013      	movs	r3, r2
 8001238:	43da      	mvns	r2, r3
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	4013      	ands	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	68da      	ldr	r2, [r3, #12]
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	409a      	lsls	r2, r3
 800124a:	0013      	movs	r3, r2
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4313      	orrs	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800125e:	2201      	movs	r2, #1
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	409a      	lsls	r2, r3
 8001264:	0013      	movs	r3, r2
 8001266:	43da      	mvns	r2, r3
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	4013      	ands	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	091b      	lsrs	r3, r3, #4
 8001274:	2201      	movs	r2, #1
 8001276:	401a      	ands	r2, r3
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	409a      	lsls	r2, r3
 800127c:	0013      	movs	r3, r2
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2203      	movs	r2, #3
 8001290:	4013      	ands	r3, r2
 8001292:	2b03      	cmp	r3, #3
 8001294:	d017      	beq.n	80012c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	2203      	movs	r2, #3
 80012a2:	409a      	lsls	r2, r3
 80012a4:	0013      	movs	r3, r2
 80012a6:	43da      	mvns	r2, r3
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	409a      	lsls	r2, r3
 80012b8:	0013      	movs	r3, r2
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4313      	orrs	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2203      	movs	r2, #3
 80012cc:	4013      	ands	r3, r2
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d123      	bne.n	800131a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	08da      	lsrs	r2, r3, #3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3208      	adds	r2, #8
 80012da:	0092      	lsls	r2, r2, #2
 80012dc:	58d3      	ldr	r3, [r2, r3]
 80012de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	2207      	movs	r2, #7
 80012e4:	4013      	ands	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	220f      	movs	r2, #15
 80012ea:	409a      	lsls	r2, r3
 80012ec:	0013      	movs	r3, r2
 80012ee:	43da      	mvns	r2, r3
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	4013      	ands	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	691a      	ldr	r2, [r3, #16]
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	2107      	movs	r1, #7
 80012fe:	400b      	ands	r3, r1
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	409a      	lsls	r2, r3
 8001304:	0013      	movs	r3, r2
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	08da      	lsrs	r2, r3, #3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3208      	adds	r2, #8
 8001314:	0092      	lsls	r2, r2, #2
 8001316:	6939      	ldr	r1, [r7, #16]
 8001318:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	2203      	movs	r2, #3
 8001326:	409a      	lsls	r2, r3
 8001328:	0013      	movs	r3, r2
 800132a:	43da      	mvns	r2, r3
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2203      	movs	r2, #3
 8001338:	401a      	ands	r2, r3
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	409a      	lsls	r2, r3
 8001340:	0013      	movs	r3, r2
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	23c0      	movs	r3, #192	; 0xc0
 8001354:	029b      	lsls	r3, r3, #10
 8001356:	4013      	ands	r3, r2
 8001358:	d100      	bne.n	800135c <HAL_GPIO_Init+0x174>
 800135a:	e09a      	b.n	8001492 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135c:	4b54      	ldr	r3, [pc, #336]	; (80014b0 <HAL_GPIO_Init+0x2c8>)
 800135e:	699a      	ldr	r2, [r3, #24]
 8001360:	4b53      	ldr	r3, [pc, #332]	; (80014b0 <HAL_GPIO_Init+0x2c8>)
 8001362:	2101      	movs	r1, #1
 8001364:	430a      	orrs	r2, r1
 8001366:	619a      	str	r2, [r3, #24]
 8001368:	4b51      	ldr	r3, [pc, #324]	; (80014b0 <HAL_GPIO_Init+0x2c8>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	2201      	movs	r2, #1
 800136e:	4013      	ands	r3, r2
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001374:	4a4f      	ldr	r2, [pc, #316]	; (80014b4 <HAL_GPIO_Init+0x2cc>)
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	089b      	lsrs	r3, r3, #2
 800137a:	3302      	adds	r3, #2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	589b      	ldr	r3, [r3, r2]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	2203      	movs	r2, #3
 8001386:	4013      	ands	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	220f      	movs	r2, #15
 800138c:	409a      	lsls	r2, r3
 800138e:	0013      	movs	r3, r2
 8001390:	43da      	mvns	r2, r3
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	2390      	movs	r3, #144	; 0x90
 800139c:	05db      	lsls	r3, r3, #23
 800139e:	429a      	cmp	r2, r3
 80013a0:	d013      	beq.n	80013ca <HAL_GPIO_Init+0x1e2>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a44      	ldr	r2, [pc, #272]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d00d      	beq.n	80013c6 <HAL_GPIO_Init+0x1de>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a43      	ldr	r2, [pc, #268]	; (80014bc <HAL_GPIO_Init+0x2d4>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d007      	beq.n	80013c2 <HAL_GPIO_Init+0x1da>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a42      	ldr	r2, [pc, #264]	; (80014c0 <HAL_GPIO_Init+0x2d8>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d101      	bne.n	80013be <HAL_GPIO_Init+0x1d6>
 80013ba:	2303      	movs	r3, #3
 80013bc:	e006      	b.n	80013cc <HAL_GPIO_Init+0x1e4>
 80013be:	2305      	movs	r3, #5
 80013c0:	e004      	b.n	80013cc <HAL_GPIO_Init+0x1e4>
 80013c2:	2302      	movs	r3, #2
 80013c4:	e002      	b.n	80013cc <HAL_GPIO_Init+0x1e4>
 80013c6:	2301      	movs	r3, #1
 80013c8:	e000      	b.n	80013cc <HAL_GPIO_Init+0x1e4>
 80013ca:	2300      	movs	r3, #0
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	2103      	movs	r1, #3
 80013d0:	400a      	ands	r2, r1
 80013d2:	0092      	lsls	r2, r2, #2
 80013d4:	4093      	lsls	r3, r2
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4313      	orrs	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013dc:	4935      	ldr	r1, [pc, #212]	; (80014b4 <HAL_GPIO_Init+0x2cc>)
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	089b      	lsrs	r3, r3, #2
 80013e2:	3302      	adds	r3, #2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ea:	4b36      	ldr	r3, [pc, #216]	; (80014c4 <HAL_GPIO_Init+0x2dc>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	43da      	mvns	r2, r3
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	4013      	ands	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	2380      	movs	r3, #128	; 0x80
 8001400:	035b      	lsls	r3, r3, #13
 8001402:	4013      	ands	r3, r2
 8001404:	d003      	beq.n	800140e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4313      	orrs	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800140e:	4b2d      	ldr	r3, [pc, #180]	; (80014c4 <HAL_GPIO_Init+0x2dc>)
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001414:	4b2b      	ldr	r3, [pc, #172]	; (80014c4 <HAL_GPIO_Init+0x2dc>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	43da      	mvns	r2, r3
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4013      	ands	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	2380      	movs	r3, #128	; 0x80
 800142a:	039b      	lsls	r3, r3, #14
 800142c:	4013      	ands	r3, r2
 800142e:	d003      	beq.n	8001438 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	4313      	orrs	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001438:	4b22      	ldr	r3, [pc, #136]	; (80014c4 <HAL_GPIO_Init+0x2dc>)
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800143e:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <HAL_GPIO_Init+0x2dc>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	43da      	mvns	r2, r3
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	4013      	ands	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	2380      	movs	r3, #128	; 0x80
 8001454:	029b      	lsls	r3, r3, #10
 8001456:	4013      	ands	r3, r2
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4313      	orrs	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001462:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <HAL_GPIO_Init+0x2dc>)
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001468:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <HAL_GPIO_Init+0x2dc>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	43da      	mvns	r2, r3
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	025b      	lsls	r3, r3, #9
 8001480:	4013      	ands	r3, r2
 8001482:	d003      	beq.n	800148c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800148c:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <HAL_GPIO_Init+0x2dc>)
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	3301      	adds	r3, #1
 8001496:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	40da      	lsrs	r2, r3
 80014a0:	1e13      	subs	r3, r2, #0
 80014a2:	d000      	beq.n	80014a6 <HAL_GPIO_Init+0x2be>
 80014a4:	e6a8      	b.n	80011f8 <HAL_GPIO_Init+0x10>
  } 
}
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	46c0      	nop			; (mov r8, r8)
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b006      	add	sp, #24
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40010000 	.word	0x40010000
 80014b8:	48000400 	.word	0x48000400
 80014bc:	48000800 	.word	0x48000800
 80014c0:	48000c00 	.word	0x48000c00
 80014c4:	40010400 	.word	0x40010400

080014c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	000a      	movs	r2, r1
 80014d2:	1cbb      	adds	r3, r7, #2
 80014d4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	1cba      	adds	r2, r7, #2
 80014dc:	8812      	ldrh	r2, [r2, #0]
 80014de:	4013      	ands	r3, r2
 80014e0:	d004      	beq.n	80014ec <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80014e2:	230f      	movs	r3, #15
 80014e4:	18fb      	adds	r3, r7, r3
 80014e6:	2201      	movs	r2, #1
 80014e8:	701a      	strb	r2, [r3, #0]
 80014ea:	e003      	b.n	80014f4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014ec:	230f      	movs	r3, #15
 80014ee:	18fb      	adds	r3, r7, r3
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80014f4:	230f      	movs	r3, #15
 80014f6:	18fb      	adds	r3, r7, r3
 80014f8:	781b      	ldrb	r3, [r3, #0]
  }
 80014fa:	0018      	movs	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	b004      	add	sp, #16
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
 800150a:	0008      	movs	r0, r1
 800150c:	0011      	movs	r1, r2
 800150e:	1cbb      	adds	r3, r7, #2
 8001510:	1c02      	adds	r2, r0, #0
 8001512:	801a      	strh	r2, [r3, #0]
 8001514:	1c7b      	adds	r3, r7, #1
 8001516:	1c0a      	adds	r2, r1, #0
 8001518:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800151a:	1c7b      	adds	r3, r7, #1
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d004      	beq.n	800152c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001522:	1cbb      	adds	r3, r7, #2
 8001524:	881a      	ldrh	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800152a:	e003      	b.n	8001534 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800152c:	1cbb      	adds	r3, r7, #2
 800152e:	881a      	ldrh	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001534:	46c0      	nop			; (mov r8, r8)
 8001536:	46bd      	mov	sp, r7
 8001538:	b002      	add	sp, #8
 800153a:	bd80      	pop	{r7, pc}

0800153c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	000a      	movs	r2, r1
 8001546:	1cbb      	adds	r3, r7, #2
 8001548:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001550:	1cbb      	adds	r3, r7, #2
 8001552:	881b      	ldrh	r3, [r3, #0]
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	4013      	ands	r3, r2
 8001558:	041a      	lsls	r2, r3, #16
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	43db      	mvns	r3, r3
 800155e:	1cb9      	adds	r1, r7, #2
 8001560:	8809      	ldrh	r1, [r1, #0]
 8001562:	400b      	ands	r3, r1
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	619a      	str	r2, [r3, #24]
}
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	46bd      	mov	sp, r7
 800156e:	b004      	add	sp, #16
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b088      	sub	sp, #32
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d101      	bne.n	8001586 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e301      	b.n	8001b8a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2201      	movs	r2, #1
 800158c:	4013      	ands	r3, r2
 800158e:	d100      	bne.n	8001592 <HAL_RCC_OscConfig+0x1e>
 8001590:	e08d      	b.n	80016ae <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001592:	4bc3      	ldr	r3, [pc, #780]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	220c      	movs	r2, #12
 8001598:	4013      	ands	r3, r2
 800159a:	2b04      	cmp	r3, #4
 800159c:	d00e      	beq.n	80015bc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800159e:	4bc0      	ldr	r3, [pc, #768]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	220c      	movs	r2, #12
 80015a4:	4013      	ands	r3, r2
 80015a6:	2b08      	cmp	r3, #8
 80015a8:	d116      	bne.n	80015d8 <HAL_RCC_OscConfig+0x64>
 80015aa:	4bbd      	ldr	r3, [pc, #756]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	2380      	movs	r3, #128	; 0x80
 80015b0:	025b      	lsls	r3, r3, #9
 80015b2:	401a      	ands	r2, r3
 80015b4:	2380      	movs	r3, #128	; 0x80
 80015b6:	025b      	lsls	r3, r3, #9
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d10d      	bne.n	80015d8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015bc:	4bb8      	ldr	r3, [pc, #736]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	2380      	movs	r3, #128	; 0x80
 80015c2:	029b      	lsls	r3, r3, #10
 80015c4:	4013      	ands	r3, r2
 80015c6:	d100      	bne.n	80015ca <HAL_RCC_OscConfig+0x56>
 80015c8:	e070      	b.n	80016ac <HAL_RCC_OscConfig+0x138>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d000      	beq.n	80015d4 <HAL_RCC_OscConfig+0x60>
 80015d2:	e06b      	b.n	80016ac <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e2d8      	b.n	8001b8a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d107      	bne.n	80015f0 <HAL_RCC_OscConfig+0x7c>
 80015e0:	4baf      	ldr	r3, [pc, #700]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4bae      	ldr	r3, [pc, #696]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 80015e6:	2180      	movs	r1, #128	; 0x80
 80015e8:	0249      	lsls	r1, r1, #9
 80015ea:	430a      	orrs	r2, r1
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	e02f      	b.n	8001650 <HAL_RCC_OscConfig+0xdc>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d10c      	bne.n	8001612 <HAL_RCC_OscConfig+0x9e>
 80015f8:	4ba9      	ldr	r3, [pc, #676]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4ba8      	ldr	r3, [pc, #672]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 80015fe:	49a9      	ldr	r1, [pc, #676]	; (80018a4 <HAL_RCC_OscConfig+0x330>)
 8001600:	400a      	ands	r2, r1
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	4ba6      	ldr	r3, [pc, #664]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4ba5      	ldr	r3, [pc, #660]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 800160a:	49a7      	ldr	r1, [pc, #668]	; (80018a8 <HAL_RCC_OscConfig+0x334>)
 800160c:	400a      	ands	r2, r1
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	e01e      	b.n	8001650 <HAL_RCC_OscConfig+0xdc>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b05      	cmp	r3, #5
 8001618:	d10e      	bne.n	8001638 <HAL_RCC_OscConfig+0xc4>
 800161a:	4ba1      	ldr	r3, [pc, #644]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	4ba0      	ldr	r3, [pc, #640]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 8001620:	2180      	movs	r1, #128	; 0x80
 8001622:	02c9      	lsls	r1, r1, #11
 8001624:	430a      	orrs	r2, r1
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	4b9d      	ldr	r3, [pc, #628]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	4b9c      	ldr	r3, [pc, #624]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 800162e:	2180      	movs	r1, #128	; 0x80
 8001630:	0249      	lsls	r1, r1, #9
 8001632:	430a      	orrs	r2, r1
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	e00b      	b.n	8001650 <HAL_RCC_OscConfig+0xdc>
 8001638:	4b99      	ldr	r3, [pc, #612]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b98      	ldr	r3, [pc, #608]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 800163e:	4999      	ldr	r1, [pc, #612]	; (80018a4 <HAL_RCC_OscConfig+0x330>)
 8001640:	400a      	ands	r2, r1
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	4b96      	ldr	r3, [pc, #600]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b95      	ldr	r3, [pc, #596]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 800164a:	4997      	ldr	r1, [pc, #604]	; (80018a8 <HAL_RCC_OscConfig+0x334>)
 800164c:	400a      	ands	r2, r1
 800164e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d014      	beq.n	8001682 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001658:	f7ff fc3c 	bl	8000ed4 <HAL_GetTick>
 800165c:	0003      	movs	r3, r0
 800165e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001662:	f7ff fc37 	bl	8000ed4 <HAL_GetTick>
 8001666:	0002      	movs	r2, r0
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b64      	cmp	r3, #100	; 0x64
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e28a      	b.n	8001b8a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001674:	4b8a      	ldr	r3, [pc, #552]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	2380      	movs	r3, #128	; 0x80
 800167a:	029b      	lsls	r3, r3, #10
 800167c:	4013      	ands	r3, r2
 800167e:	d0f0      	beq.n	8001662 <HAL_RCC_OscConfig+0xee>
 8001680:	e015      	b.n	80016ae <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001682:	f7ff fc27 	bl	8000ed4 <HAL_GetTick>
 8001686:	0003      	movs	r3, r0
 8001688:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800168c:	f7ff fc22 	bl	8000ed4 <HAL_GetTick>
 8001690:	0002      	movs	r2, r0
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b64      	cmp	r3, #100	; 0x64
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e275      	b.n	8001b8a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800169e:	4b80      	ldr	r3, [pc, #512]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	2380      	movs	r3, #128	; 0x80
 80016a4:	029b      	lsls	r3, r3, #10
 80016a6:	4013      	ands	r3, r2
 80016a8:	d1f0      	bne.n	800168c <HAL_RCC_OscConfig+0x118>
 80016aa:	e000      	b.n	80016ae <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ac:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2202      	movs	r2, #2
 80016b4:	4013      	ands	r3, r2
 80016b6:	d100      	bne.n	80016ba <HAL_RCC_OscConfig+0x146>
 80016b8:	e069      	b.n	800178e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016ba:	4b79      	ldr	r3, [pc, #484]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	220c      	movs	r2, #12
 80016c0:	4013      	ands	r3, r2
 80016c2:	d00b      	beq.n	80016dc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016c4:	4b76      	ldr	r3, [pc, #472]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	220c      	movs	r2, #12
 80016ca:	4013      	ands	r3, r2
 80016cc:	2b08      	cmp	r3, #8
 80016ce:	d11c      	bne.n	800170a <HAL_RCC_OscConfig+0x196>
 80016d0:	4b73      	ldr	r3, [pc, #460]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	2380      	movs	r3, #128	; 0x80
 80016d6:	025b      	lsls	r3, r3, #9
 80016d8:	4013      	ands	r3, r2
 80016da:	d116      	bne.n	800170a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016dc:	4b70      	ldr	r3, [pc, #448]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2202      	movs	r2, #2
 80016e2:	4013      	ands	r3, r2
 80016e4:	d005      	beq.n	80016f2 <HAL_RCC_OscConfig+0x17e>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d001      	beq.n	80016f2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e24b      	b.n	8001b8a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f2:	4b6b      	ldr	r3, [pc, #428]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	22f8      	movs	r2, #248	; 0xf8
 80016f8:	4393      	bics	r3, r2
 80016fa:	0019      	movs	r1, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	691b      	ldr	r3, [r3, #16]
 8001700:	00da      	lsls	r2, r3, #3
 8001702:	4b67      	ldr	r3, [pc, #412]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 8001704:	430a      	orrs	r2, r1
 8001706:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001708:	e041      	b.n	800178e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d024      	beq.n	800175c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001712:	4b63      	ldr	r3, [pc, #396]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	4b62      	ldr	r3, [pc, #392]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 8001718:	2101      	movs	r1, #1
 800171a:	430a      	orrs	r2, r1
 800171c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171e:	f7ff fbd9 	bl	8000ed4 <HAL_GetTick>
 8001722:	0003      	movs	r3, r0
 8001724:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001728:	f7ff fbd4 	bl	8000ed4 <HAL_GetTick>
 800172c:	0002      	movs	r2, r0
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e227      	b.n	8001b8a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800173a:	4b59      	ldr	r3, [pc, #356]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2202      	movs	r2, #2
 8001740:	4013      	ands	r3, r2
 8001742:	d0f1      	beq.n	8001728 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001744:	4b56      	ldr	r3, [pc, #344]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	22f8      	movs	r2, #248	; 0xf8
 800174a:	4393      	bics	r3, r2
 800174c:	0019      	movs	r1, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	00da      	lsls	r2, r3, #3
 8001754:	4b52      	ldr	r3, [pc, #328]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 8001756:	430a      	orrs	r2, r1
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	e018      	b.n	800178e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800175c:	4b50      	ldr	r3, [pc, #320]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4b4f      	ldr	r3, [pc, #316]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 8001762:	2101      	movs	r1, #1
 8001764:	438a      	bics	r2, r1
 8001766:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001768:	f7ff fbb4 	bl	8000ed4 <HAL_GetTick>
 800176c:	0003      	movs	r3, r0
 800176e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001772:	f7ff fbaf 	bl	8000ed4 <HAL_GetTick>
 8001776:	0002      	movs	r2, r0
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e202      	b.n	8001b8a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001784:	4b46      	ldr	r3, [pc, #280]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2202      	movs	r2, #2
 800178a:	4013      	ands	r3, r2
 800178c:	d1f1      	bne.n	8001772 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2208      	movs	r2, #8
 8001794:	4013      	ands	r3, r2
 8001796:	d036      	beq.n	8001806 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69db      	ldr	r3, [r3, #28]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d019      	beq.n	80017d4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017a0:	4b3f      	ldr	r3, [pc, #252]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 80017a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017a4:	4b3e      	ldr	r3, [pc, #248]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 80017a6:	2101      	movs	r1, #1
 80017a8:	430a      	orrs	r2, r1
 80017aa:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ac:	f7ff fb92 	bl	8000ed4 <HAL_GetTick>
 80017b0:	0003      	movs	r3, r0
 80017b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017b6:	f7ff fb8d 	bl	8000ed4 <HAL_GetTick>
 80017ba:	0002      	movs	r2, r0
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e1e0      	b.n	8001b8a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017c8:	4b35      	ldr	r3, [pc, #212]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 80017ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017cc:	2202      	movs	r2, #2
 80017ce:	4013      	ands	r3, r2
 80017d0:	d0f1      	beq.n	80017b6 <HAL_RCC_OscConfig+0x242>
 80017d2:	e018      	b.n	8001806 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017d4:	4b32      	ldr	r3, [pc, #200]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 80017d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017d8:	4b31      	ldr	r3, [pc, #196]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 80017da:	2101      	movs	r1, #1
 80017dc:	438a      	bics	r2, r1
 80017de:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e0:	f7ff fb78 	bl	8000ed4 <HAL_GetTick>
 80017e4:	0003      	movs	r3, r0
 80017e6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ea:	f7ff fb73 	bl	8000ed4 <HAL_GetTick>
 80017ee:	0002      	movs	r2, r0
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e1c6      	b.n	8001b8a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017fc:	4b28      	ldr	r3, [pc, #160]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 80017fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001800:	2202      	movs	r2, #2
 8001802:	4013      	ands	r3, r2
 8001804:	d1f1      	bne.n	80017ea <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2204      	movs	r2, #4
 800180c:	4013      	ands	r3, r2
 800180e:	d100      	bne.n	8001812 <HAL_RCC_OscConfig+0x29e>
 8001810:	e0b4      	b.n	800197c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001812:	201f      	movs	r0, #31
 8001814:	183b      	adds	r3, r7, r0
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800181a:	4b21      	ldr	r3, [pc, #132]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 800181c:	69da      	ldr	r2, [r3, #28]
 800181e:	2380      	movs	r3, #128	; 0x80
 8001820:	055b      	lsls	r3, r3, #21
 8001822:	4013      	ands	r3, r2
 8001824:	d110      	bne.n	8001848 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001826:	4b1e      	ldr	r3, [pc, #120]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 8001828:	69da      	ldr	r2, [r3, #28]
 800182a:	4b1d      	ldr	r3, [pc, #116]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 800182c:	2180      	movs	r1, #128	; 0x80
 800182e:	0549      	lsls	r1, r1, #21
 8001830:	430a      	orrs	r2, r1
 8001832:	61da      	str	r2, [r3, #28]
 8001834:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 8001836:	69da      	ldr	r2, [r3, #28]
 8001838:	2380      	movs	r3, #128	; 0x80
 800183a:	055b      	lsls	r3, r3, #21
 800183c:	4013      	ands	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001842:	183b      	adds	r3, r7, r0
 8001844:	2201      	movs	r2, #1
 8001846:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001848:	4b18      	ldr	r3, [pc, #96]	; (80018ac <HAL_RCC_OscConfig+0x338>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	2380      	movs	r3, #128	; 0x80
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	4013      	ands	r3, r2
 8001852:	d11a      	bne.n	800188a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001854:	4b15      	ldr	r3, [pc, #84]	; (80018ac <HAL_RCC_OscConfig+0x338>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b14      	ldr	r3, [pc, #80]	; (80018ac <HAL_RCC_OscConfig+0x338>)
 800185a:	2180      	movs	r1, #128	; 0x80
 800185c:	0049      	lsls	r1, r1, #1
 800185e:	430a      	orrs	r2, r1
 8001860:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001862:	f7ff fb37 	bl	8000ed4 <HAL_GetTick>
 8001866:	0003      	movs	r3, r0
 8001868:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800186c:	f7ff fb32 	bl	8000ed4 <HAL_GetTick>
 8001870:	0002      	movs	r2, r0
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b64      	cmp	r3, #100	; 0x64
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e185      	b.n	8001b8a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800187e:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <HAL_RCC_OscConfig+0x338>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	2380      	movs	r3, #128	; 0x80
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	4013      	ands	r3, r2
 8001888:	d0f0      	beq.n	800186c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d10e      	bne.n	80018b0 <HAL_RCC_OscConfig+0x33c>
 8001892:	4b03      	ldr	r3, [pc, #12]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 8001894:	6a1a      	ldr	r2, [r3, #32]
 8001896:	4b02      	ldr	r3, [pc, #8]	; (80018a0 <HAL_RCC_OscConfig+0x32c>)
 8001898:	2101      	movs	r1, #1
 800189a:	430a      	orrs	r2, r1
 800189c:	621a      	str	r2, [r3, #32]
 800189e:	e035      	b.n	800190c <HAL_RCC_OscConfig+0x398>
 80018a0:	40021000 	.word	0x40021000
 80018a4:	fffeffff 	.word	0xfffeffff
 80018a8:	fffbffff 	.word	0xfffbffff
 80018ac:	40007000 	.word	0x40007000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d10c      	bne.n	80018d2 <HAL_RCC_OscConfig+0x35e>
 80018b8:	4bb6      	ldr	r3, [pc, #728]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 80018ba:	6a1a      	ldr	r2, [r3, #32]
 80018bc:	4bb5      	ldr	r3, [pc, #724]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 80018be:	2101      	movs	r1, #1
 80018c0:	438a      	bics	r2, r1
 80018c2:	621a      	str	r2, [r3, #32]
 80018c4:	4bb3      	ldr	r3, [pc, #716]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 80018c6:	6a1a      	ldr	r2, [r3, #32]
 80018c8:	4bb2      	ldr	r3, [pc, #712]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 80018ca:	2104      	movs	r1, #4
 80018cc:	438a      	bics	r2, r1
 80018ce:	621a      	str	r2, [r3, #32]
 80018d0:	e01c      	b.n	800190c <HAL_RCC_OscConfig+0x398>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	2b05      	cmp	r3, #5
 80018d8:	d10c      	bne.n	80018f4 <HAL_RCC_OscConfig+0x380>
 80018da:	4bae      	ldr	r3, [pc, #696]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 80018dc:	6a1a      	ldr	r2, [r3, #32]
 80018de:	4bad      	ldr	r3, [pc, #692]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 80018e0:	2104      	movs	r1, #4
 80018e2:	430a      	orrs	r2, r1
 80018e4:	621a      	str	r2, [r3, #32]
 80018e6:	4bab      	ldr	r3, [pc, #684]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 80018e8:	6a1a      	ldr	r2, [r3, #32]
 80018ea:	4baa      	ldr	r3, [pc, #680]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 80018ec:	2101      	movs	r1, #1
 80018ee:	430a      	orrs	r2, r1
 80018f0:	621a      	str	r2, [r3, #32]
 80018f2:	e00b      	b.n	800190c <HAL_RCC_OscConfig+0x398>
 80018f4:	4ba7      	ldr	r3, [pc, #668]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 80018f6:	6a1a      	ldr	r2, [r3, #32]
 80018f8:	4ba6      	ldr	r3, [pc, #664]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 80018fa:	2101      	movs	r1, #1
 80018fc:	438a      	bics	r2, r1
 80018fe:	621a      	str	r2, [r3, #32]
 8001900:	4ba4      	ldr	r3, [pc, #656]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 8001902:	6a1a      	ldr	r2, [r3, #32]
 8001904:	4ba3      	ldr	r3, [pc, #652]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 8001906:	2104      	movs	r1, #4
 8001908:	438a      	bics	r2, r1
 800190a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d014      	beq.n	800193e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001914:	f7ff fade 	bl	8000ed4 <HAL_GetTick>
 8001918:	0003      	movs	r3, r0
 800191a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800191c:	e009      	b.n	8001932 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800191e:	f7ff fad9 	bl	8000ed4 <HAL_GetTick>
 8001922:	0002      	movs	r2, r0
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	4a9b      	ldr	r2, [pc, #620]	; (8001b98 <HAL_RCC_OscConfig+0x624>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e12b      	b.n	8001b8a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001932:	4b98      	ldr	r3, [pc, #608]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	2202      	movs	r2, #2
 8001938:	4013      	ands	r3, r2
 800193a:	d0f0      	beq.n	800191e <HAL_RCC_OscConfig+0x3aa>
 800193c:	e013      	b.n	8001966 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193e:	f7ff fac9 	bl	8000ed4 <HAL_GetTick>
 8001942:	0003      	movs	r3, r0
 8001944:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001946:	e009      	b.n	800195c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001948:	f7ff fac4 	bl	8000ed4 <HAL_GetTick>
 800194c:	0002      	movs	r2, r0
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	4a91      	ldr	r2, [pc, #580]	; (8001b98 <HAL_RCC_OscConfig+0x624>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e116      	b.n	8001b8a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800195c:	4b8d      	ldr	r3, [pc, #564]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	2202      	movs	r2, #2
 8001962:	4013      	ands	r3, r2
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001966:	231f      	movs	r3, #31
 8001968:	18fb      	adds	r3, r7, r3
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d105      	bne.n	800197c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001970:	4b88      	ldr	r3, [pc, #544]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 8001972:	69da      	ldr	r2, [r3, #28]
 8001974:	4b87      	ldr	r3, [pc, #540]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 8001976:	4989      	ldr	r1, [pc, #548]	; (8001b9c <HAL_RCC_OscConfig+0x628>)
 8001978:	400a      	ands	r2, r1
 800197a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2210      	movs	r2, #16
 8001982:	4013      	ands	r3, r2
 8001984:	d063      	beq.n	8001a4e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d12a      	bne.n	80019e4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800198e:	4b81      	ldr	r3, [pc, #516]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 8001990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001992:	4b80      	ldr	r3, [pc, #512]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 8001994:	2104      	movs	r1, #4
 8001996:	430a      	orrs	r2, r1
 8001998:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800199a:	4b7e      	ldr	r3, [pc, #504]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 800199c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800199e:	4b7d      	ldr	r3, [pc, #500]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 80019a0:	2101      	movs	r1, #1
 80019a2:	430a      	orrs	r2, r1
 80019a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a6:	f7ff fa95 	bl	8000ed4 <HAL_GetTick>
 80019aa:	0003      	movs	r3, r0
 80019ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80019b0:	f7ff fa90 	bl	8000ed4 <HAL_GetTick>
 80019b4:	0002      	movs	r2, r0
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e0e3      	b.n	8001b8a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80019c2:	4b74      	ldr	r3, [pc, #464]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 80019c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019c6:	2202      	movs	r2, #2
 80019c8:	4013      	ands	r3, r2
 80019ca:	d0f1      	beq.n	80019b0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80019cc:	4b71      	ldr	r3, [pc, #452]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 80019ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d0:	22f8      	movs	r2, #248	; 0xf8
 80019d2:	4393      	bics	r3, r2
 80019d4:	0019      	movs	r1, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	00da      	lsls	r2, r3, #3
 80019dc:	4b6d      	ldr	r3, [pc, #436]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 80019de:	430a      	orrs	r2, r1
 80019e0:	635a      	str	r2, [r3, #52]	; 0x34
 80019e2:	e034      	b.n	8001a4e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	3305      	adds	r3, #5
 80019ea:	d111      	bne.n	8001a10 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80019ec:	4b69      	ldr	r3, [pc, #420]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 80019ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019f0:	4b68      	ldr	r3, [pc, #416]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 80019f2:	2104      	movs	r1, #4
 80019f4:	438a      	bics	r2, r1
 80019f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80019f8:	4b66      	ldr	r3, [pc, #408]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 80019fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019fc:	22f8      	movs	r2, #248	; 0xf8
 80019fe:	4393      	bics	r3, r2
 8001a00:	0019      	movs	r1, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	00da      	lsls	r2, r3, #3
 8001a08:	4b62      	ldr	r3, [pc, #392]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	635a      	str	r2, [r3, #52]	; 0x34
 8001a0e:	e01e      	b.n	8001a4e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a10:	4b60      	ldr	r3, [pc, #384]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 8001a12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a14:	4b5f      	ldr	r3, [pc, #380]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 8001a16:	2104      	movs	r1, #4
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001a1c:	4b5d      	ldr	r3, [pc, #372]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 8001a1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a20:	4b5c      	ldr	r3, [pc, #368]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 8001a22:	2101      	movs	r1, #1
 8001a24:	438a      	bics	r2, r1
 8001a26:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a28:	f7ff fa54 	bl	8000ed4 <HAL_GetTick>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a32:	f7ff fa4f 	bl	8000ed4 <HAL_GetTick>
 8001a36:	0002      	movs	r2, r0
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e0a2      	b.n	8001b8a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a44:	4b53      	ldr	r3, [pc, #332]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 8001a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a48:	2202      	movs	r2, #2
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d1f1      	bne.n	8001a32 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d100      	bne.n	8001a58 <HAL_RCC_OscConfig+0x4e4>
 8001a56:	e097      	b.n	8001b88 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a58:	4b4e      	ldr	r3, [pc, #312]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	220c      	movs	r2, #12
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d100      	bne.n	8001a66 <HAL_RCC_OscConfig+0x4f2>
 8001a64:	e06b      	b.n	8001b3e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a1b      	ldr	r3, [r3, #32]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d14c      	bne.n	8001b08 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a6e:	4b49      	ldr	r3, [pc, #292]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	4b48      	ldr	r3, [pc, #288]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 8001a74:	494a      	ldr	r1, [pc, #296]	; (8001ba0 <HAL_RCC_OscConfig+0x62c>)
 8001a76:	400a      	ands	r2, r1
 8001a78:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7a:	f7ff fa2b 	bl	8000ed4 <HAL_GetTick>
 8001a7e:	0003      	movs	r3, r0
 8001a80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a84:	f7ff fa26 	bl	8000ed4 <HAL_GetTick>
 8001a88:	0002      	movs	r2, r0
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e079      	b.n	8001b8a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a96:	4b3f      	ldr	r3, [pc, #252]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	2380      	movs	r3, #128	; 0x80
 8001a9c:	049b      	lsls	r3, r3, #18
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d1f0      	bne.n	8001a84 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aa2:	4b3c      	ldr	r3, [pc, #240]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 8001aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa6:	220f      	movs	r2, #15
 8001aa8:	4393      	bics	r3, r2
 8001aaa:	0019      	movs	r1, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ab0:	4b38      	ldr	r3, [pc, #224]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ab6:	4b37      	ldr	r3, [pc, #220]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	4a3a      	ldr	r2, [pc, #232]	; (8001ba4 <HAL_RCC_OscConfig+0x630>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	0019      	movs	r1, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	4b32      	ldr	r3, [pc, #200]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 8001acc:	430a      	orrs	r2, r1
 8001ace:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ad0:	4b30      	ldr	r3, [pc, #192]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4b2f      	ldr	r3, [pc, #188]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 8001ad6:	2180      	movs	r1, #128	; 0x80
 8001ad8:	0449      	lsls	r1, r1, #17
 8001ada:	430a      	orrs	r2, r1
 8001adc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ade:	f7ff f9f9 	bl	8000ed4 <HAL_GetTick>
 8001ae2:	0003      	movs	r3, r0
 8001ae4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae8:	f7ff f9f4 	bl	8000ed4 <HAL_GetTick>
 8001aec:	0002      	movs	r2, r0
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e047      	b.n	8001b8a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001afa:	4b26      	ldr	r3, [pc, #152]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	2380      	movs	r3, #128	; 0x80
 8001b00:	049b      	lsls	r3, r3, #18
 8001b02:	4013      	ands	r3, r2
 8001b04:	d0f0      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x574>
 8001b06:	e03f      	b.n	8001b88 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b08:	4b22      	ldr	r3, [pc, #136]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4b21      	ldr	r3, [pc, #132]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 8001b0e:	4924      	ldr	r1, [pc, #144]	; (8001ba0 <HAL_RCC_OscConfig+0x62c>)
 8001b10:	400a      	ands	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b14:	f7ff f9de 	bl	8000ed4 <HAL_GetTick>
 8001b18:	0003      	movs	r3, r0
 8001b1a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b1e:	f7ff f9d9 	bl	8000ed4 <HAL_GetTick>
 8001b22:	0002      	movs	r2, r0
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e02c      	b.n	8001b8a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b30:	4b18      	ldr	r3, [pc, #96]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	2380      	movs	r3, #128	; 0x80
 8001b36:	049b      	lsls	r3, r3, #18
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d1f0      	bne.n	8001b1e <HAL_RCC_OscConfig+0x5aa>
 8001b3c:	e024      	b.n	8001b88 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a1b      	ldr	r3, [r3, #32]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d101      	bne.n	8001b4a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e01f      	b.n	8001b8a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001b4a:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001b50:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <HAL_RCC_OscConfig+0x620>)
 8001b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b54:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	025b      	lsls	r3, r3, #9
 8001b5c:	401a      	ands	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d10e      	bne.n	8001b84 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	220f      	movs	r2, #15
 8001b6a:	401a      	ands	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d107      	bne.n	8001b84 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001b74:	697a      	ldr	r2, [r7, #20]
 8001b76:	23f0      	movs	r3, #240	; 0xf0
 8001b78:	039b      	lsls	r3, r3, #14
 8001b7a:	401a      	ands	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d001      	beq.n	8001b88 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e000      	b.n	8001b8a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	b008      	add	sp, #32
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	40021000 	.word	0x40021000
 8001b98:	00001388 	.word	0x00001388
 8001b9c:	efffffff 	.word	0xefffffff
 8001ba0:	feffffff 	.word	0xfeffffff
 8001ba4:	ffc2ffff 	.word	0xffc2ffff

08001ba8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e0b3      	b.n	8001d24 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bbc:	4b5b      	ldr	r3, [pc, #364]	; (8001d2c <HAL_RCC_ClockConfig+0x184>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d911      	bls.n	8001bee <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bca:	4b58      	ldr	r3, [pc, #352]	; (8001d2c <HAL_RCC_ClockConfig+0x184>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	4393      	bics	r3, r2
 8001bd2:	0019      	movs	r1, r3
 8001bd4:	4b55      	ldr	r3, [pc, #340]	; (8001d2c <HAL_RCC_ClockConfig+0x184>)
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bdc:	4b53      	ldr	r3, [pc, #332]	; (8001d2c <HAL_RCC_ClockConfig+0x184>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2201      	movs	r2, #1
 8001be2:	4013      	ands	r3, r2
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d001      	beq.n	8001bee <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e09a      	b.n	8001d24 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d015      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2204      	movs	r2, #4
 8001bfe:	4013      	ands	r3, r2
 8001c00:	d006      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c02:	4b4b      	ldr	r3, [pc, #300]	; (8001d30 <HAL_RCC_ClockConfig+0x188>)
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	4b4a      	ldr	r3, [pc, #296]	; (8001d30 <HAL_RCC_ClockConfig+0x188>)
 8001c08:	21e0      	movs	r1, #224	; 0xe0
 8001c0a:	00c9      	lsls	r1, r1, #3
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c10:	4b47      	ldr	r3, [pc, #284]	; (8001d30 <HAL_RCC_ClockConfig+0x188>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	22f0      	movs	r2, #240	; 0xf0
 8001c16:	4393      	bics	r3, r2
 8001c18:	0019      	movs	r1, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	4b44      	ldr	r3, [pc, #272]	; (8001d30 <HAL_RCC_ClockConfig+0x188>)
 8001c20:	430a      	orrs	r2, r1
 8001c22:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	d040      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d107      	bne.n	8001c46 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c36:	4b3e      	ldr	r3, [pc, #248]	; (8001d30 <HAL_RCC_ClockConfig+0x188>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	2380      	movs	r3, #128	; 0x80
 8001c3c:	029b      	lsls	r3, r3, #10
 8001c3e:	4013      	ands	r3, r2
 8001c40:	d114      	bne.n	8001c6c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e06e      	b.n	8001d24 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d107      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c4e:	4b38      	ldr	r3, [pc, #224]	; (8001d30 <HAL_RCC_ClockConfig+0x188>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	2380      	movs	r3, #128	; 0x80
 8001c54:	049b      	lsls	r3, r3, #18
 8001c56:	4013      	ands	r3, r2
 8001c58:	d108      	bne.n	8001c6c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e062      	b.n	8001d24 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c5e:	4b34      	ldr	r3, [pc, #208]	; (8001d30 <HAL_RCC_ClockConfig+0x188>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2202      	movs	r2, #2
 8001c64:	4013      	ands	r3, r2
 8001c66:	d101      	bne.n	8001c6c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e05b      	b.n	8001d24 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c6c:	4b30      	ldr	r3, [pc, #192]	; (8001d30 <HAL_RCC_ClockConfig+0x188>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2203      	movs	r2, #3
 8001c72:	4393      	bics	r3, r2
 8001c74:	0019      	movs	r1, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685a      	ldr	r2, [r3, #4]
 8001c7a:	4b2d      	ldr	r3, [pc, #180]	; (8001d30 <HAL_RCC_ClockConfig+0x188>)
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c80:	f7ff f928 	bl	8000ed4 <HAL_GetTick>
 8001c84:	0003      	movs	r3, r0
 8001c86:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c88:	e009      	b.n	8001c9e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c8a:	f7ff f923 	bl	8000ed4 <HAL_GetTick>
 8001c8e:	0002      	movs	r2, r0
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	4a27      	ldr	r2, [pc, #156]	; (8001d34 <HAL_RCC_ClockConfig+0x18c>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e042      	b.n	8001d24 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9e:	4b24      	ldr	r3, [pc, #144]	; (8001d30 <HAL_RCC_ClockConfig+0x188>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	220c      	movs	r2, #12
 8001ca4:	401a      	ands	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d1ec      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cb0:	4b1e      	ldr	r3, [pc, #120]	; (8001d2c <HAL_RCC_ClockConfig+0x184>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d211      	bcs.n	8001ce2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cbe:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <HAL_RCC_ClockConfig+0x184>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	4393      	bics	r3, r2
 8001cc6:	0019      	movs	r1, r3
 8001cc8:	4b18      	ldr	r3, [pc, #96]	; (8001d2c <HAL_RCC_ClockConfig+0x184>)
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd0:	4b16      	ldr	r3, [pc, #88]	; (8001d2c <HAL_RCC_ClockConfig+0x184>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d001      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e020      	b.n	8001d24 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2204      	movs	r2, #4
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d009      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001cec:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <HAL_RCC_ClockConfig+0x188>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	4a11      	ldr	r2, [pc, #68]	; (8001d38 <HAL_RCC_ClockConfig+0x190>)
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	0019      	movs	r1, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68da      	ldr	r2, [r3, #12]
 8001cfa:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <HAL_RCC_ClockConfig+0x188>)
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d00:	f000 f82e 	bl	8001d60 <HAL_RCC_GetSysClockFreq>
 8001d04:	0001      	movs	r1, r0
 8001d06:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <HAL_RCC_ClockConfig+0x188>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	091b      	lsrs	r3, r3, #4
 8001d0c:	220f      	movs	r2, #15
 8001d0e:	4013      	ands	r3, r2
 8001d10:	4a0a      	ldr	r2, [pc, #40]	; (8001d3c <HAL_RCC_ClockConfig+0x194>)
 8001d12:	5cd3      	ldrb	r3, [r2, r3]
 8001d14:	000a      	movs	r2, r1
 8001d16:	40da      	lsrs	r2, r3
 8001d18:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <HAL_RCC_ClockConfig+0x198>)
 8001d1a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d1c:	2003      	movs	r0, #3
 8001d1e:	f7ff f893 	bl	8000e48 <HAL_InitTick>
  
  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	0018      	movs	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	b004      	add	sp, #16
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40022000 	.word	0x40022000
 8001d30:	40021000 	.word	0x40021000
 8001d34:	00001388 	.word	0x00001388
 8001d38:	fffff8ff 	.word	0xfffff8ff
 8001d3c:	08005014 	.word	0x08005014
 8001d40:	20000008 	.word	0x20000008

08001d44 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to 
  *         the Cortex-M0 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8001d48:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <HAL_RCC_EnableCSS+0x18>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4b03      	ldr	r3, [pc, #12]	; (8001d5c <HAL_RCC_EnableCSS+0x18>)
 8001d4e:	2180      	movs	r1, #128	; 0x80
 8001d50:	0309      	lsls	r1, r1, #12
 8001d52:	430a      	orrs	r2, r1
 8001d54:	601a      	str	r2, [r3, #0]
}
 8001d56:	46c0      	nop			; (mov r8, r8)
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40021000 	.word	0x40021000

08001d60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	2300      	movs	r3, #0
 8001d74:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001d7a:	4b20      	ldr	r3, [pc, #128]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	220c      	movs	r2, #12
 8001d84:	4013      	ands	r3, r2
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	d002      	beq.n	8001d90 <HAL_RCC_GetSysClockFreq+0x30>
 8001d8a:	2b08      	cmp	r3, #8
 8001d8c:	d003      	beq.n	8001d96 <HAL_RCC_GetSysClockFreq+0x36>
 8001d8e:	e02c      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d90:	4b1b      	ldr	r3, [pc, #108]	; (8001e00 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d92:	613b      	str	r3, [r7, #16]
      break;
 8001d94:	e02c      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	0c9b      	lsrs	r3, r3, #18
 8001d9a:	220f      	movs	r2, #15
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	4a19      	ldr	r2, [pc, #100]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001da0:	5cd3      	ldrb	r3, [r2, r3]
 8001da2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001da4:	4b15      	ldr	r3, [pc, #84]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da8:	220f      	movs	r2, #15
 8001daa:	4013      	ands	r3, r2
 8001dac:	4a16      	ldr	r2, [pc, #88]	; (8001e08 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001dae:	5cd3      	ldrb	r3, [r2, r3]
 8001db0:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	2380      	movs	r3, #128	; 0x80
 8001db6:	025b      	lsls	r3, r3, #9
 8001db8:	4013      	ands	r3, r2
 8001dba:	d009      	beq.n	8001dd0 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001dbc:	68b9      	ldr	r1, [r7, #8]
 8001dbe:	4810      	ldr	r0, [pc, #64]	; (8001e00 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001dc0:	f7fe f9aa 	bl	8000118 <__udivsi3>
 8001dc4:	0003      	movs	r3, r0
 8001dc6:	001a      	movs	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4353      	muls	r3, r2
 8001dcc:	617b      	str	r3, [r7, #20]
 8001dce:	e009      	b.n	8001de4 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001dd0:	6879      	ldr	r1, [r7, #4]
 8001dd2:	000a      	movs	r2, r1
 8001dd4:	0152      	lsls	r2, r2, #5
 8001dd6:	1a52      	subs	r2, r2, r1
 8001dd8:	0193      	lsls	r3, r2, #6
 8001dda:	1a9b      	subs	r3, r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	185b      	adds	r3, r3, r1
 8001de0:	021b      	lsls	r3, r3, #8
 8001de2:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	613b      	str	r3, [r7, #16]
      break;
 8001de8:	e002      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001dea:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001dec:	613b      	str	r3, [r7, #16]
      break;
 8001dee:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001df0:	693b      	ldr	r3, [r7, #16]
}
 8001df2:	0018      	movs	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	b006      	add	sp, #24
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	46c0      	nop			; (mov r8, r8)
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	007a1200 	.word	0x007a1200
 8001e04:	0800502c 	.word	0x0800502c
 8001e08:	0800503c 	.word	0x0800503c

08001e0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e10:	4b02      	ldr	r3, [pc, #8]	; (8001e1c <HAL_RCC_GetHCLKFreq+0x10>)
 8001e12:	681b      	ldr	r3, [r3, #0]
}
 8001e14:	0018      	movs	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	46c0      	nop			; (mov r8, r8)
 8001e1c:	20000008 	.word	0x20000008

08001e20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001e24:	f7ff fff2 	bl	8001e0c <HAL_RCC_GetHCLKFreq>
 8001e28:	0001      	movs	r1, r0
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	0a1b      	lsrs	r3, r3, #8
 8001e30:	2207      	movs	r2, #7
 8001e32:	4013      	ands	r3, r2
 8001e34:	4a04      	ldr	r2, [pc, #16]	; (8001e48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e36:	5cd3      	ldrb	r3, [r2, r3]
 8001e38:	40d9      	lsrs	r1, r3
 8001e3a:	000b      	movs	r3, r1
}    
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	40021000 	.word	0x40021000
 8001e48:	08005024 	.word	0x08005024

08001e4c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8001e50:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <HAL_RCC_NMI_IRQHandler+0x20>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2280      	movs	r2, #128	; 0x80
 8001e56:	4013      	ands	r3, r2
 8001e58:	2b80      	cmp	r3, #128	; 0x80
 8001e5a:	d104      	bne.n	8001e66 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8001e5c:	f000 f80a 	bl	8001e74 <HAL_RCC_CSSCallback>
    
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8001e60:	4b03      	ldr	r3, [pc, #12]	; (8001e70 <HAL_RCC_NMI_IRQHandler+0x24>)
 8001e62:	2280      	movs	r2, #128	; 0x80
 8001e64:	701a      	strb	r2, [r3, #0]
  }
}
 8001e66:	46c0      	nop			; (mov r8, r8)
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	4002100a 	.word	0x4002100a

08001e74 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */ 
}
 8001e78:	46c0      	nop			; (mov r8, r8)
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	2380      	movs	r3, #128	; 0x80
 8001e96:	025b      	lsls	r3, r3, #9
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d100      	bne.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001e9c:	e08e      	b.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001e9e:	2017      	movs	r0, #23
 8001ea0:	183b      	adds	r3, r7, r0
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ea6:	4b57      	ldr	r3, [pc, #348]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ea8:	69da      	ldr	r2, [r3, #28]
 8001eaa:	2380      	movs	r3, #128	; 0x80
 8001eac:	055b      	lsls	r3, r3, #21
 8001eae:	4013      	ands	r3, r2
 8001eb0:	d110      	bne.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001eb2:	4b54      	ldr	r3, [pc, #336]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001eb4:	69da      	ldr	r2, [r3, #28]
 8001eb6:	4b53      	ldr	r3, [pc, #332]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001eb8:	2180      	movs	r1, #128	; 0x80
 8001eba:	0549      	lsls	r1, r1, #21
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	61da      	str	r2, [r3, #28]
 8001ec0:	4b50      	ldr	r3, [pc, #320]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ec2:	69da      	ldr	r2, [r3, #28]
 8001ec4:	2380      	movs	r3, #128	; 0x80
 8001ec6:	055b      	lsls	r3, r3, #21
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ece:	183b      	adds	r3, r7, r0
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed4:	4b4c      	ldr	r3, [pc, #304]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	2380      	movs	r3, #128	; 0x80
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	4013      	ands	r3, r2
 8001ede:	d11a      	bne.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ee0:	4b49      	ldr	r3, [pc, #292]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4b48      	ldr	r3, [pc, #288]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001ee6:	2180      	movs	r1, #128	; 0x80
 8001ee8:	0049      	lsls	r1, r1, #1
 8001eea:	430a      	orrs	r2, r1
 8001eec:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eee:	f7fe fff1 	bl	8000ed4 <HAL_GetTick>
 8001ef2:	0003      	movs	r3, r0
 8001ef4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef6:	e008      	b.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef8:	f7fe ffec 	bl	8000ed4 <HAL_GetTick>
 8001efc:	0002      	movs	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b64      	cmp	r3, #100	; 0x64
 8001f04:	d901      	bls.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e077      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0a:	4b3f      	ldr	r3, [pc, #252]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	2380      	movs	r3, #128	; 0x80
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	4013      	ands	r3, r2
 8001f14:	d0f0      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f16:	4b3b      	ldr	r3, [pc, #236]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f18:	6a1a      	ldr	r2, [r3, #32]
 8001f1a:	23c0      	movs	r3, #192	; 0xc0
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4013      	ands	r3, r2
 8001f20:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d034      	beq.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	23c0      	movs	r3, #192	; 0xc0
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4013      	ands	r3, r2
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d02c      	beq.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f38:	4b32      	ldr	r3, [pc, #200]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	4a33      	ldr	r2, [pc, #204]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f42:	4b30      	ldr	r3, [pc, #192]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f44:	6a1a      	ldr	r2, [r3, #32]
 8001f46:	4b2f      	ldr	r3, [pc, #188]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f48:	2180      	movs	r1, #128	; 0x80
 8001f4a:	0249      	lsls	r1, r1, #9
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f50:	4b2c      	ldr	r3, [pc, #176]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f52:	6a1a      	ldr	r2, [r3, #32]
 8001f54:	4b2b      	ldr	r3, [pc, #172]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f56:	492e      	ldr	r1, [pc, #184]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001f58:	400a      	ands	r2, r1
 8001f5a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f5c:	4b29      	ldr	r3, [pc, #164]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2201      	movs	r2, #1
 8001f66:	4013      	ands	r3, r2
 8001f68:	d013      	beq.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6a:	f7fe ffb3 	bl	8000ed4 <HAL_GetTick>
 8001f6e:	0003      	movs	r3, r0
 8001f70:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f72:	e009      	b.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f74:	f7fe ffae 	bl	8000ed4 <HAL_GetTick>
 8001f78:	0002      	movs	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	4a25      	ldr	r2, [pc, #148]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e038      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f88:	4b1e      	ldr	r3, [pc, #120]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	2202      	movs	r2, #2
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d0f0      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f92:	4b1c      	ldr	r3, [pc, #112]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	4a1d      	ldr	r2, [pc, #116]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001f98:	4013      	ands	r3, r2
 8001f9a:	0019      	movs	r1, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	4b18      	ldr	r3, [pc, #96]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fa6:	2317      	movs	r3, #23
 8001fa8:	18fb      	adds	r3, r7, r3
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d105      	bne.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb0:	4b14      	ldr	r3, [pc, #80]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001fb2:	69da      	ldr	r2, [r3, #28]
 8001fb4:	4b13      	ldr	r3, [pc, #76]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001fb6:	4918      	ldr	r1, [pc, #96]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001fb8:	400a      	ands	r2, r1
 8001fba:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	d009      	beq.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fc6:	4b0f      	ldr	r3, [pc, #60]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	2203      	movs	r2, #3
 8001fcc:	4393      	bics	r3, r2
 8001fce:	0019      	movs	r1, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2220      	movs	r2, #32
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	d009      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fe4:	4b07      	ldr	r3, [pc, #28]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe8:	2210      	movs	r2, #16
 8001fea:	4393      	bics	r3, r2
 8001fec:	0019      	movs	r1, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68da      	ldr	r2, [r3, #12]
 8001ff2:	4b04      	ldr	r3, [pc, #16]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	b006      	add	sp, #24
 8002000:	bd80      	pop	{r7, pc}
 8002002:	46c0      	nop			; (mov r8, r8)
 8002004:	40021000 	.word	0x40021000
 8002008:	40007000 	.word	0x40007000
 800200c:	fffffcff 	.word	0xfffffcff
 8002010:	fffeffff 	.word	0xfffeffff
 8002014:	00001388 	.word	0x00001388
 8002018:	efffffff 	.word	0xefffffff

0800201c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e042      	b.n	80020b4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	223d      	movs	r2, #61	; 0x3d
 8002032:	5c9b      	ldrb	r3, [r3, r2]
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d107      	bne.n	800204a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	223c      	movs	r2, #60	; 0x3c
 800203e:	2100      	movs	r1, #0
 8002040:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	0018      	movs	r0, r3
 8002046:	f7fe fdd3 	bl	8000bf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	223d      	movs	r2, #61	; 0x3d
 800204e:	2102      	movs	r1, #2
 8002050:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	3304      	adds	r3, #4
 800205a:	0019      	movs	r1, r3
 800205c:	0010      	movs	r0, r2
 800205e:	f000 fa5b 	bl	8002518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2246      	movs	r2, #70	; 0x46
 8002066:	2101      	movs	r1, #1
 8002068:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	223e      	movs	r2, #62	; 0x3e
 800206e:	2101      	movs	r1, #1
 8002070:	5499      	strb	r1, [r3, r2]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	223f      	movs	r2, #63	; 0x3f
 8002076:	2101      	movs	r1, #1
 8002078:	5499      	strb	r1, [r3, r2]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2240      	movs	r2, #64	; 0x40
 800207e:	2101      	movs	r1, #1
 8002080:	5499      	strb	r1, [r3, r2]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2241      	movs	r2, #65	; 0x41
 8002086:	2101      	movs	r1, #1
 8002088:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2242      	movs	r2, #66	; 0x42
 800208e:	2101      	movs	r1, #1
 8002090:	5499      	strb	r1, [r3, r2]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2243      	movs	r2, #67	; 0x43
 8002096:	2101      	movs	r1, #1
 8002098:	5499      	strb	r1, [r3, r2]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2244      	movs	r2, #68	; 0x44
 800209e:	2101      	movs	r1, #1
 80020a0:	5499      	strb	r1, [r3, r2]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2245      	movs	r2, #69	; 0x45
 80020a6:	2101      	movs	r1, #1
 80020a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	223d      	movs	r2, #61	; 0x3d
 80020ae:	2101      	movs	r1, #1
 80020b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	0018      	movs	r0, r3
 80020b6:	46bd      	mov	sp, r7
 80020b8:	b002      	add	sp, #8
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	223d      	movs	r2, #61	; 0x3d
 80020c8:	5c9b      	ldrb	r3, [r3, r2]
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d001      	beq.n	80020d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e035      	b.n	8002140 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	223d      	movs	r2, #61	; 0x3d
 80020d8:	2102      	movs	r1, #2
 80020da:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2101      	movs	r1, #1
 80020e8:	430a      	orrs	r2, r1
 80020ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a15      	ldr	r2, [pc, #84]	; (8002148 <HAL_TIM_Base_Start_IT+0x8c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d009      	beq.n	800210a <HAL_TIM_Base_Start_IT+0x4e>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a14      	ldr	r2, [pc, #80]	; (800214c <HAL_TIM_Base_Start_IT+0x90>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d004      	beq.n	800210a <HAL_TIM_Base_Start_IT+0x4e>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a12      	ldr	r2, [pc, #72]	; (8002150 <HAL_TIM_Base_Start_IT+0x94>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d111      	bne.n	800212e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	2207      	movs	r2, #7
 8002112:	4013      	ands	r3, r2
 8002114:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2b06      	cmp	r3, #6
 800211a:	d010      	beq.n	800213e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2101      	movs	r1, #1
 8002128:	430a      	orrs	r2, r1
 800212a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800212c:	e007      	b.n	800213e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2101      	movs	r1, #1
 800213a:	430a      	orrs	r2, r1
 800213c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	0018      	movs	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	b004      	add	sp, #16
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40012c00 	.word	0x40012c00
 800214c:	40000400 	.word	0x40000400
 8002150:	40014000 	.word	0x40014000

08002154 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	2202      	movs	r2, #2
 8002170:	4013      	ands	r3, r2
 8002172:	d021      	beq.n	80021b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2202      	movs	r2, #2
 8002178:	4013      	ands	r3, r2
 800217a:	d01d      	beq.n	80021b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2203      	movs	r2, #3
 8002182:	4252      	negs	r2, r2
 8002184:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	2203      	movs	r2, #3
 8002194:	4013      	ands	r3, r2
 8002196:	d004      	beq.n	80021a2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	0018      	movs	r0, r3
 800219c:	f000 f9a4 	bl	80024e8 <HAL_TIM_IC_CaptureCallback>
 80021a0:	e007      	b.n	80021b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	0018      	movs	r0, r3
 80021a6:	f000 f997 	bl	80024d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	0018      	movs	r0, r3
 80021ae:	f000 f9a3 	bl	80024f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	2204      	movs	r2, #4
 80021bc:	4013      	ands	r3, r2
 80021be:	d022      	beq.n	8002206 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2204      	movs	r2, #4
 80021c4:	4013      	ands	r3, r2
 80021c6:	d01e      	beq.n	8002206 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2205      	movs	r2, #5
 80021ce:	4252      	negs	r2, r2
 80021d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2202      	movs	r2, #2
 80021d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	699a      	ldr	r2, [r3, #24]
 80021de:	23c0      	movs	r3, #192	; 0xc0
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4013      	ands	r3, r2
 80021e4:	d004      	beq.n	80021f0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	0018      	movs	r0, r3
 80021ea:	f000 f97d 	bl	80024e8 <HAL_TIM_IC_CaptureCallback>
 80021ee:	e007      	b.n	8002200 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	0018      	movs	r0, r3
 80021f4:	f000 f970 	bl	80024d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	0018      	movs	r0, r3
 80021fc:	f000 f97c 	bl	80024f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	2208      	movs	r2, #8
 800220a:	4013      	ands	r3, r2
 800220c:	d021      	beq.n	8002252 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2208      	movs	r2, #8
 8002212:	4013      	ands	r3, r2
 8002214:	d01d      	beq.n	8002252 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2209      	movs	r2, #9
 800221c:	4252      	negs	r2, r2
 800221e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2204      	movs	r2, #4
 8002224:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	2203      	movs	r2, #3
 800222e:	4013      	ands	r3, r2
 8002230:	d004      	beq.n	800223c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	0018      	movs	r0, r3
 8002236:	f000 f957 	bl	80024e8 <HAL_TIM_IC_CaptureCallback>
 800223a:	e007      	b.n	800224c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	0018      	movs	r0, r3
 8002240:	f000 f94a 	bl	80024d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	0018      	movs	r0, r3
 8002248:	f000 f956 	bl	80024f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	2210      	movs	r2, #16
 8002256:	4013      	ands	r3, r2
 8002258:	d022      	beq.n	80022a0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2210      	movs	r2, #16
 800225e:	4013      	ands	r3, r2
 8002260:	d01e      	beq.n	80022a0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2211      	movs	r2, #17
 8002268:	4252      	negs	r2, r2
 800226a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2208      	movs	r2, #8
 8002270:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	69da      	ldr	r2, [r3, #28]
 8002278:	23c0      	movs	r3, #192	; 0xc0
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4013      	ands	r3, r2
 800227e:	d004      	beq.n	800228a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	0018      	movs	r0, r3
 8002284:	f000 f930 	bl	80024e8 <HAL_TIM_IC_CaptureCallback>
 8002288:	e007      	b.n	800229a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	0018      	movs	r0, r3
 800228e:	f000 f923 	bl	80024d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	0018      	movs	r0, r3
 8002296:	f000 f92f 	bl	80024f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	2201      	movs	r2, #1
 80022a4:	4013      	ands	r3, r2
 80022a6:	d00c      	beq.n	80022c2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2201      	movs	r2, #1
 80022ac:	4013      	ands	r3, r2
 80022ae:	d008      	beq.n	80022c2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2202      	movs	r2, #2
 80022b6:	4252      	negs	r2, r2
 80022b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	0018      	movs	r0, r3
 80022be:	f7fe fbbd 	bl	8000a3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	2280      	movs	r2, #128	; 0x80
 80022c6:	4013      	ands	r3, r2
 80022c8:	d00c      	beq.n	80022e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2280      	movs	r2, #128	; 0x80
 80022ce:	4013      	ands	r3, r2
 80022d0:	d008      	beq.n	80022e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2281      	movs	r2, #129	; 0x81
 80022d8:	4252      	negs	r2, r2
 80022da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	0018      	movs	r0, r3
 80022e0:	f000 fa98 	bl	8002814 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2240      	movs	r2, #64	; 0x40
 80022e8:	4013      	ands	r3, r2
 80022ea:	d00c      	beq.n	8002306 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2240      	movs	r2, #64	; 0x40
 80022f0:	4013      	ands	r3, r2
 80022f2:	d008      	beq.n	8002306 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2241      	movs	r2, #65	; 0x41
 80022fa:	4252      	negs	r2, r2
 80022fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	0018      	movs	r0, r3
 8002302:	f000 f901 	bl	8002508 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	2220      	movs	r2, #32
 800230a:	4013      	ands	r3, r2
 800230c:	d00c      	beq.n	8002328 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2220      	movs	r2, #32
 8002312:	4013      	ands	r3, r2
 8002314:	d008      	beq.n	8002328 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2221      	movs	r2, #33	; 0x21
 800231c:	4252      	negs	r2, r2
 800231e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	0018      	movs	r0, r3
 8002324:	f000 fa6e 	bl	8002804 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002328:	46c0      	nop			; (mov r8, r8)
 800232a:	46bd      	mov	sp, r7
 800232c:	b004      	add	sp, #16
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800233a:	230f      	movs	r3, #15
 800233c:	18fb      	adds	r3, r7, r3
 800233e:	2200      	movs	r2, #0
 8002340:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	223c      	movs	r2, #60	; 0x3c
 8002346:	5c9b      	ldrb	r3, [r3, r2]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d101      	bne.n	8002350 <HAL_TIM_ConfigClockSource+0x20>
 800234c:	2302      	movs	r3, #2
 800234e:	e0bc      	b.n	80024ca <HAL_TIM_ConfigClockSource+0x19a>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	223c      	movs	r2, #60	; 0x3c
 8002354:	2101      	movs	r1, #1
 8002356:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	223d      	movs	r2, #61	; 0x3d
 800235c:	2102      	movs	r1, #2
 800235e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2277      	movs	r2, #119	; 0x77
 800236c:	4393      	bics	r3, r2
 800236e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	4a58      	ldr	r2, [pc, #352]	; (80024d4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002374:	4013      	ands	r3, r2
 8002376:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68ba      	ldr	r2, [r7, #8]
 800237e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2280      	movs	r2, #128	; 0x80
 8002386:	0192      	lsls	r2, r2, #6
 8002388:	4293      	cmp	r3, r2
 800238a:	d040      	beq.n	800240e <HAL_TIM_ConfigClockSource+0xde>
 800238c:	2280      	movs	r2, #128	; 0x80
 800238e:	0192      	lsls	r2, r2, #6
 8002390:	4293      	cmp	r3, r2
 8002392:	d900      	bls.n	8002396 <HAL_TIM_ConfigClockSource+0x66>
 8002394:	e088      	b.n	80024a8 <HAL_TIM_ConfigClockSource+0x178>
 8002396:	2280      	movs	r2, #128	; 0x80
 8002398:	0152      	lsls	r2, r2, #5
 800239a:	4293      	cmp	r3, r2
 800239c:	d100      	bne.n	80023a0 <HAL_TIM_ConfigClockSource+0x70>
 800239e:	e088      	b.n	80024b2 <HAL_TIM_ConfigClockSource+0x182>
 80023a0:	2280      	movs	r2, #128	; 0x80
 80023a2:	0152      	lsls	r2, r2, #5
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d900      	bls.n	80023aa <HAL_TIM_ConfigClockSource+0x7a>
 80023a8:	e07e      	b.n	80024a8 <HAL_TIM_ConfigClockSource+0x178>
 80023aa:	2b70      	cmp	r3, #112	; 0x70
 80023ac:	d018      	beq.n	80023e0 <HAL_TIM_ConfigClockSource+0xb0>
 80023ae:	d900      	bls.n	80023b2 <HAL_TIM_ConfigClockSource+0x82>
 80023b0:	e07a      	b.n	80024a8 <HAL_TIM_ConfigClockSource+0x178>
 80023b2:	2b60      	cmp	r3, #96	; 0x60
 80023b4:	d04f      	beq.n	8002456 <HAL_TIM_ConfigClockSource+0x126>
 80023b6:	d900      	bls.n	80023ba <HAL_TIM_ConfigClockSource+0x8a>
 80023b8:	e076      	b.n	80024a8 <HAL_TIM_ConfigClockSource+0x178>
 80023ba:	2b50      	cmp	r3, #80	; 0x50
 80023bc:	d03b      	beq.n	8002436 <HAL_TIM_ConfigClockSource+0x106>
 80023be:	d900      	bls.n	80023c2 <HAL_TIM_ConfigClockSource+0x92>
 80023c0:	e072      	b.n	80024a8 <HAL_TIM_ConfigClockSource+0x178>
 80023c2:	2b40      	cmp	r3, #64	; 0x40
 80023c4:	d057      	beq.n	8002476 <HAL_TIM_ConfigClockSource+0x146>
 80023c6:	d900      	bls.n	80023ca <HAL_TIM_ConfigClockSource+0x9a>
 80023c8:	e06e      	b.n	80024a8 <HAL_TIM_ConfigClockSource+0x178>
 80023ca:	2b30      	cmp	r3, #48	; 0x30
 80023cc:	d063      	beq.n	8002496 <HAL_TIM_ConfigClockSource+0x166>
 80023ce:	d86b      	bhi.n	80024a8 <HAL_TIM_ConfigClockSource+0x178>
 80023d0:	2b20      	cmp	r3, #32
 80023d2:	d060      	beq.n	8002496 <HAL_TIM_ConfigClockSource+0x166>
 80023d4:	d868      	bhi.n	80024a8 <HAL_TIM_ConfigClockSource+0x178>
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d05d      	beq.n	8002496 <HAL_TIM_ConfigClockSource+0x166>
 80023da:	2b10      	cmp	r3, #16
 80023dc:	d05b      	beq.n	8002496 <HAL_TIM_ConfigClockSource+0x166>
 80023de:	e063      	b.n	80024a8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6818      	ldr	r0, [r3, #0]
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	6899      	ldr	r1, [r3, #8]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f000 f990 	bl	8002714 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	2277      	movs	r2, #119	; 0x77
 8002400:	4313      	orrs	r3, r2
 8002402:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	609a      	str	r2, [r3, #8]
      break;
 800240c:	e052      	b.n	80024b4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6818      	ldr	r0, [r3, #0]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	6899      	ldr	r1, [r3, #8]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	f000 f979 	bl	8002714 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2180      	movs	r1, #128	; 0x80
 800242e:	01c9      	lsls	r1, r1, #7
 8002430:	430a      	orrs	r2, r1
 8002432:	609a      	str	r2, [r3, #8]
      break;
 8002434:	e03e      	b.n	80024b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6818      	ldr	r0, [r3, #0]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	6859      	ldr	r1, [r3, #4]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	001a      	movs	r2, r3
 8002444:	f000 f8ec 	bl	8002620 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2150      	movs	r1, #80	; 0x50
 800244e:	0018      	movs	r0, r3
 8002450:	f000 f946 	bl	80026e0 <TIM_ITRx_SetConfig>
      break;
 8002454:	e02e      	b.n	80024b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6818      	ldr	r0, [r3, #0]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	6859      	ldr	r1, [r3, #4]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	001a      	movs	r2, r3
 8002464:	f000 f90a 	bl	800267c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2160      	movs	r1, #96	; 0x60
 800246e:	0018      	movs	r0, r3
 8002470:	f000 f936 	bl	80026e0 <TIM_ITRx_SetConfig>
      break;
 8002474:	e01e      	b.n	80024b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6818      	ldr	r0, [r3, #0]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	6859      	ldr	r1, [r3, #4]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	001a      	movs	r2, r3
 8002484:	f000 f8cc 	bl	8002620 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2140      	movs	r1, #64	; 0x40
 800248e:	0018      	movs	r0, r3
 8002490:	f000 f926 	bl	80026e0 <TIM_ITRx_SetConfig>
      break;
 8002494:	e00e      	b.n	80024b4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	0019      	movs	r1, r3
 80024a0:	0010      	movs	r0, r2
 80024a2:	f000 f91d 	bl	80026e0 <TIM_ITRx_SetConfig>
      break;
 80024a6:	e005      	b.n	80024b4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80024a8:	230f      	movs	r3, #15
 80024aa:	18fb      	adds	r3, r7, r3
 80024ac:	2201      	movs	r2, #1
 80024ae:	701a      	strb	r2, [r3, #0]
      break;
 80024b0:	e000      	b.n	80024b4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80024b2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	223d      	movs	r2, #61	; 0x3d
 80024b8:	2101      	movs	r1, #1
 80024ba:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	223c      	movs	r2, #60	; 0x3c
 80024c0:	2100      	movs	r1, #0
 80024c2:	5499      	strb	r1, [r3, r2]

  return status;
 80024c4:	230f      	movs	r3, #15
 80024c6:	18fb      	adds	r3, r7, r3
 80024c8:	781b      	ldrb	r3, [r3, #0]
}
 80024ca:	0018      	movs	r0, r3
 80024cc:	46bd      	mov	sp, r7
 80024ce:	b004      	add	sp, #16
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	ffff00ff 	.word	0xffff00ff

080024d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024e0:	46c0      	nop			; (mov r8, r8)
 80024e2:	46bd      	mov	sp, r7
 80024e4:	b002      	add	sp, #8
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024f0:	46c0      	nop			; (mov r8, r8)
 80024f2:	46bd      	mov	sp, r7
 80024f4:	b002      	add	sp, #8
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002500:	46c0      	nop			; (mov r8, r8)
 8002502:	46bd      	mov	sp, r7
 8002504:	b002      	add	sp, #8
 8002506:	bd80      	pop	{r7, pc}

08002508 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002510:	46c0      	nop			; (mov r8, r8)
 8002512:	46bd      	mov	sp, r7
 8002514:	b002      	add	sp, #8
 8002516:	bd80      	pop	{r7, pc}

08002518 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a36      	ldr	r2, [pc, #216]	; (8002604 <TIM_Base_SetConfig+0xec>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d003      	beq.n	8002538 <TIM_Base_SetConfig+0x20>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a35      	ldr	r2, [pc, #212]	; (8002608 <TIM_Base_SetConfig+0xf0>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d108      	bne.n	800254a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2270      	movs	r2, #112	; 0x70
 800253c:	4393      	bics	r3, r2
 800253e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	4313      	orrs	r3, r2
 8002548:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a2d      	ldr	r2, [pc, #180]	; (8002604 <TIM_Base_SetConfig+0xec>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d013      	beq.n	800257a <TIM_Base_SetConfig+0x62>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a2c      	ldr	r2, [pc, #176]	; (8002608 <TIM_Base_SetConfig+0xf0>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d00f      	beq.n	800257a <TIM_Base_SetConfig+0x62>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a2b      	ldr	r2, [pc, #172]	; (800260c <TIM_Base_SetConfig+0xf4>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d00b      	beq.n	800257a <TIM_Base_SetConfig+0x62>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a2a      	ldr	r2, [pc, #168]	; (8002610 <TIM_Base_SetConfig+0xf8>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d007      	beq.n	800257a <TIM_Base_SetConfig+0x62>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a29      	ldr	r2, [pc, #164]	; (8002614 <TIM_Base_SetConfig+0xfc>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d003      	beq.n	800257a <TIM_Base_SetConfig+0x62>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a28      	ldr	r2, [pc, #160]	; (8002618 <TIM_Base_SetConfig+0x100>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d108      	bne.n	800258c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	4a27      	ldr	r2, [pc, #156]	; (800261c <TIM_Base_SetConfig+0x104>)
 800257e:	4013      	ands	r3, r2
 8002580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	4313      	orrs	r3, r2
 800258a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2280      	movs	r2, #128	; 0x80
 8002590:	4393      	bics	r3, r2
 8002592:	001a      	movs	r2, r3
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	4313      	orrs	r3, r2
 800259a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a13      	ldr	r2, [pc, #76]	; (8002604 <TIM_Base_SetConfig+0xec>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d00b      	beq.n	80025d2 <TIM_Base_SetConfig+0xba>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a14      	ldr	r2, [pc, #80]	; (8002610 <TIM_Base_SetConfig+0xf8>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d007      	beq.n	80025d2 <TIM_Base_SetConfig+0xba>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a13      	ldr	r2, [pc, #76]	; (8002614 <TIM_Base_SetConfig+0xfc>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d003      	beq.n	80025d2 <TIM_Base_SetConfig+0xba>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a12      	ldr	r2, [pc, #72]	; (8002618 <TIM_Base_SetConfig+0x100>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d103      	bne.n	80025da <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	691a      	ldr	r2, [r3, #16]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	2201      	movs	r2, #1
 80025e6:	4013      	ands	r3, r2
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d106      	bne.n	80025fa <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	2201      	movs	r2, #1
 80025f2:	4393      	bics	r3, r2
 80025f4:	001a      	movs	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	611a      	str	r2, [r3, #16]
  }
}
 80025fa:	46c0      	nop			; (mov r8, r8)
 80025fc:	46bd      	mov	sp, r7
 80025fe:	b004      	add	sp, #16
 8002600:	bd80      	pop	{r7, pc}
 8002602:	46c0      	nop			; (mov r8, r8)
 8002604:	40012c00 	.word	0x40012c00
 8002608:	40000400 	.word	0x40000400
 800260c:	40002000 	.word	0x40002000
 8002610:	40014000 	.word	0x40014000
 8002614:	40014400 	.word	0x40014400
 8002618:	40014800 	.word	0x40014800
 800261c:	fffffcff 	.word	0xfffffcff

08002620 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	2201      	movs	r2, #1
 8002638:	4393      	bics	r3, r2
 800263a:	001a      	movs	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	22f0      	movs	r2, #240	; 0xf0
 800264a:	4393      	bics	r3, r2
 800264c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	4313      	orrs	r3, r2
 8002656:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	220a      	movs	r2, #10
 800265c:	4393      	bics	r3, r2
 800265e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	4313      	orrs	r3, r2
 8002666:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	621a      	str	r2, [r3, #32]
}
 8002674:	46c0      	nop			; (mov r8, r8)
 8002676:	46bd      	mov	sp, r7
 8002678:	b006      	add	sp, #24
 800267a:	bd80      	pop	{r7, pc}

0800267c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	2210      	movs	r2, #16
 8002694:	4393      	bics	r3, r2
 8002696:	001a      	movs	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4a0d      	ldr	r2, [pc, #52]	; (80026dc <TIM_TI2_ConfigInputStage+0x60>)
 80026a6:	4013      	ands	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	031b      	lsls	r3, r3, #12
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	22a0      	movs	r2, #160	; 0xa0
 80026b8:	4393      	bics	r3, r2
 80026ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	011b      	lsls	r3, r3, #4
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	621a      	str	r2, [r3, #32]
}
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	46bd      	mov	sp, r7
 80026d6:	b006      	add	sp, #24
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	46c0      	nop			; (mov r8, r8)
 80026dc:	ffff0fff 	.word	0xffff0fff

080026e0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2270      	movs	r2, #112	; 0x70
 80026f4:	4393      	bics	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	2207      	movs	r2, #7
 8002700:	4313      	orrs	r3, r2
 8002702:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	609a      	str	r2, [r3, #8]
}
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	46bd      	mov	sp, r7
 800270e:	b004      	add	sp, #16
 8002710:	bd80      	pop	{r7, pc}
	...

08002714 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
 8002720:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	4a09      	ldr	r2, [pc, #36]	; (8002750 <TIM_ETR_SetConfig+0x3c>)
 800272c:	4013      	ands	r3, r2
 800272e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	021a      	lsls	r2, r3, #8
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	431a      	orrs	r2, r3
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	4313      	orrs	r3, r2
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	4313      	orrs	r3, r2
 8002740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	609a      	str	r2, [r3, #8]
}
 8002748:	46c0      	nop			; (mov r8, r8)
 800274a:	46bd      	mov	sp, r7
 800274c:	b006      	add	sp, #24
 800274e:	bd80      	pop	{r7, pc}
 8002750:	ffff00ff 	.word	0xffff00ff

08002754 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	223c      	movs	r2, #60	; 0x3c
 8002762:	5c9b      	ldrb	r3, [r3, r2]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d101      	bne.n	800276c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002768:	2302      	movs	r3, #2
 800276a:	e041      	b.n	80027f0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	223c      	movs	r2, #60	; 0x3c
 8002770:	2101      	movs	r1, #1
 8002772:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	223d      	movs	r2, #61	; 0x3d
 8002778:	2102      	movs	r1, #2
 800277a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2270      	movs	r2, #112	; 0x70
 8002790:	4393      	bics	r3, r2
 8002792:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	4313      	orrs	r3, r2
 800279c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a13      	ldr	r2, [pc, #76]	; (80027f8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d009      	beq.n	80027c4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a11      	ldr	r2, [pc, #68]	; (80027fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d004      	beq.n	80027c4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a10      	ldr	r2, [pc, #64]	; (8002800 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d10c      	bne.n	80027de <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2280      	movs	r2, #128	; 0x80
 80027c8:	4393      	bics	r3, r2
 80027ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	223d      	movs	r2, #61	; 0x3d
 80027e2:	2101      	movs	r1, #1
 80027e4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	223c      	movs	r2, #60	; 0x3c
 80027ea:	2100      	movs	r1, #0
 80027ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	0018      	movs	r0, r3
 80027f2:	46bd      	mov	sp, r7
 80027f4:	b004      	add	sp, #16
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40012c00 	.word	0x40012c00
 80027fc:	40000400 	.word	0x40000400
 8002800:	40014000 	.word	0x40014000

08002804 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800280c:	46c0      	nop			; (mov r8, r8)
 800280e:	46bd      	mov	sp, r7
 8002810:	b002      	add	sp, #8
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800281c:	46c0      	nop			; (mov r8, r8)
 800281e:	46bd      	mov	sp, r7
 8002820:	b002      	add	sp, #8
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e044      	b.n	80028c0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800283a:	2b00      	cmp	r3, #0
 800283c:	d107      	bne.n	800284e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2278      	movs	r2, #120	; 0x78
 8002842:	2100      	movs	r1, #0
 8002844:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	0018      	movs	r0, r3
 800284a:	f7fe f9f7 	bl	8000c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2224      	movs	r2, #36	; 0x24
 8002852:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2101      	movs	r1, #1
 8002860:	438a      	bics	r2, r1
 8002862:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	0018      	movs	r0, r3
 8002870:	f000 fcb2 	bl	80031d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	0018      	movs	r0, r3
 8002878:	f000 fb6e 	bl	8002f58 <UART_SetConfig>
 800287c:	0003      	movs	r3, r0
 800287e:	2b01      	cmp	r3, #1
 8002880:	d101      	bne.n	8002886 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e01c      	b.n	80028c0 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	490d      	ldr	r1, [pc, #52]	; (80028c8 <HAL_UART_Init+0xa4>)
 8002892:	400a      	ands	r2, r1
 8002894:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2108      	movs	r1, #8
 80028a2:	438a      	bics	r2, r1
 80028a4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2101      	movs	r1, #1
 80028b2:	430a      	orrs	r2, r1
 80028b4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	0018      	movs	r0, r3
 80028ba:	f000 fd41 	bl	8003340 <UART_CheckIdleState>
 80028be:	0003      	movs	r3, r0
}
 80028c0:	0018      	movs	r0, r3
 80028c2:	46bd      	mov	sp, r7
 80028c4:	b002      	add	sp, #8
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	fffff7ff 	.word	0xfffff7ff

080028cc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b088      	sub	sp, #32
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	1dbb      	adds	r3, r7, #6
 80028d8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2280      	movs	r2, #128	; 0x80
 80028de:	589b      	ldr	r3, [r3, r2]
 80028e0:	2b20      	cmp	r3, #32
 80028e2:	d145      	bne.n	8002970 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_UART_Receive_IT+0x26>
 80028ea:	1dbb      	adds	r3, r7, #6
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e03d      	b.n	8002972 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	2380      	movs	r3, #128	; 0x80
 80028fc:	015b      	lsls	r3, r3, #5
 80028fe:	429a      	cmp	r2, r3
 8002900:	d109      	bne.n	8002916 <HAL_UART_Receive_IT+0x4a>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d105      	bne.n	8002916 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	2201      	movs	r2, #1
 800290e:	4013      	ands	r3, r2
 8002910:	d001      	beq.n	8002916 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e02d      	b.n	8002972 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	2380      	movs	r3, #128	; 0x80
 8002924:	041b      	lsls	r3, r3, #16
 8002926:	4013      	ands	r3, r2
 8002928:	d019      	beq.n	800295e <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800292a:	f3ef 8310 	mrs	r3, PRIMASK
 800292e:	613b      	str	r3, [r7, #16]
  return(result);
 8002930:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002932:	61fb      	str	r3, [r7, #28]
 8002934:	2301      	movs	r3, #1
 8002936:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f383 8810 	msr	PRIMASK, r3
}
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2180      	movs	r1, #128	; 0x80
 800294c:	04c9      	lsls	r1, r1, #19
 800294e:	430a      	orrs	r2, r1
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	f383 8810 	msr	PRIMASK, r3
}
 800295c:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800295e:	1dbb      	adds	r3, r7, #6
 8002960:	881a      	ldrh	r2, [r3, #0]
 8002962:	68b9      	ldr	r1, [r7, #8]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	0018      	movs	r0, r3
 8002968:	f000 fe02 	bl	8003570 <UART_Start_Receive_IT>
 800296c:	0003      	movs	r3, r0
 800296e:	e000      	b.n	8002972 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8002970:	2302      	movs	r3, #2
  }
}
 8002972:	0018      	movs	r0, r3
 8002974:	46bd      	mov	sp, r7
 8002976:	b008      	add	sp, #32
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800297c:	b590      	push	{r4, r7, lr}
 800297e:	b0ab      	sub	sp, #172	; 0xac
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	22a4      	movs	r2, #164	; 0xa4
 800298c:	18b9      	adds	r1, r7, r2
 800298e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	20a0      	movs	r0, #160	; 0xa0
 8002998:	1839      	adds	r1, r7, r0
 800299a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	219c      	movs	r1, #156	; 0x9c
 80029a4:	1879      	adds	r1, r7, r1
 80029a6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80029a8:	0011      	movs	r1, r2
 80029aa:	18bb      	adds	r3, r7, r2
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a99      	ldr	r2, [pc, #612]	; (8002c14 <HAL_UART_IRQHandler+0x298>)
 80029b0:	4013      	ands	r3, r2
 80029b2:	2298      	movs	r2, #152	; 0x98
 80029b4:	18bc      	adds	r4, r7, r2
 80029b6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80029b8:	18bb      	adds	r3, r7, r2
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d114      	bne.n	80029ea <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80029c0:	187b      	adds	r3, r7, r1
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2220      	movs	r2, #32
 80029c6:	4013      	ands	r3, r2
 80029c8:	d00f      	beq.n	80029ea <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80029ca:	183b      	adds	r3, r7, r0
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2220      	movs	r2, #32
 80029d0:	4013      	ands	r3, r2
 80029d2:	d00a      	beq.n	80029ea <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d100      	bne.n	80029de <HAL_UART_IRQHandler+0x62>
 80029dc:	e286      	b.n	8002eec <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	0010      	movs	r0, r2
 80029e6:	4798      	blx	r3
      }
      return;
 80029e8:	e280      	b.n	8002eec <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80029ea:	2398      	movs	r3, #152	; 0x98
 80029ec:	18fb      	adds	r3, r7, r3
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d100      	bne.n	80029f6 <HAL_UART_IRQHandler+0x7a>
 80029f4:	e114      	b.n	8002c20 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80029f6:	239c      	movs	r3, #156	; 0x9c
 80029f8:	18fb      	adds	r3, r7, r3
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2201      	movs	r2, #1
 80029fe:	4013      	ands	r3, r2
 8002a00:	d106      	bne.n	8002a10 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002a02:	23a0      	movs	r3, #160	; 0xa0
 8002a04:	18fb      	adds	r3, r7, r3
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a83      	ldr	r2, [pc, #524]	; (8002c18 <HAL_UART_IRQHandler+0x29c>)
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d100      	bne.n	8002a10 <HAL_UART_IRQHandler+0x94>
 8002a0e:	e107      	b.n	8002c20 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002a10:	23a4      	movs	r3, #164	; 0xa4
 8002a12:	18fb      	adds	r3, r7, r3
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2201      	movs	r2, #1
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d012      	beq.n	8002a42 <HAL_UART_IRQHandler+0xc6>
 8002a1c:	23a0      	movs	r3, #160	; 0xa0
 8002a1e:	18fb      	adds	r3, r7, r3
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	2380      	movs	r3, #128	; 0x80
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	4013      	ands	r3, r2
 8002a28:	d00b      	beq.n	8002a42 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2284      	movs	r2, #132	; 0x84
 8002a36:	589b      	ldr	r3, [r3, r2]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2184      	movs	r1, #132	; 0x84
 8002a40:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a42:	23a4      	movs	r3, #164	; 0xa4
 8002a44:	18fb      	adds	r3, r7, r3
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2202      	movs	r2, #2
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d011      	beq.n	8002a72 <HAL_UART_IRQHandler+0xf6>
 8002a4e:	239c      	movs	r3, #156	; 0x9c
 8002a50:	18fb      	adds	r3, r7, r3
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2201      	movs	r2, #1
 8002a56:	4013      	ands	r3, r2
 8002a58:	d00b      	beq.n	8002a72 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2284      	movs	r2, #132	; 0x84
 8002a66:	589b      	ldr	r3, [r3, r2]
 8002a68:	2204      	movs	r2, #4
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2184      	movs	r1, #132	; 0x84
 8002a70:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a72:	23a4      	movs	r3, #164	; 0xa4
 8002a74:	18fb      	adds	r3, r7, r3
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2204      	movs	r2, #4
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d011      	beq.n	8002aa2 <HAL_UART_IRQHandler+0x126>
 8002a7e:	239c      	movs	r3, #156	; 0x9c
 8002a80:	18fb      	adds	r3, r7, r3
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2201      	movs	r2, #1
 8002a86:	4013      	ands	r3, r2
 8002a88:	d00b      	beq.n	8002aa2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2204      	movs	r2, #4
 8002a90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2284      	movs	r2, #132	; 0x84
 8002a96:	589b      	ldr	r3, [r3, r2]
 8002a98:	2202      	movs	r2, #2
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2184      	movs	r1, #132	; 0x84
 8002aa0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002aa2:	23a4      	movs	r3, #164	; 0xa4
 8002aa4:	18fb      	adds	r3, r7, r3
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2208      	movs	r2, #8
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d017      	beq.n	8002ade <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002aae:	23a0      	movs	r3, #160	; 0xa0
 8002ab0:	18fb      	adds	r3, r7, r3
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	d105      	bne.n	8002ac6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002aba:	239c      	movs	r3, #156	; 0x9c
 8002abc:	18fb      	adds	r3, r7, r3
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ac4:	d00b      	beq.n	8002ade <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2208      	movs	r2, #8
 8002acc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2284      	movs	r2, #132	; 0x84
 8002ad2:	589b      	ldr	r3, [r3, r2]
 8002ad4:	2208      	movs	r2, #8
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2184      	movs	r1, #132	; 0x84
 8002adc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ade:	23a4      	movs	r3, #164	; 0xa4
 8002ae0:	18fb      	adds	r3, r7, r3
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	2380      	movs	r3, #128	; 0x80
 8002ae6:	011b      	lsls	r3, r3, #4
 8002ae8:	4013      	ands	r3, r2
 8002aea:	d013      	beq.n	8002b14 <HAL_UART_IRQHandler+0x198>
 8002aec:	23a0      	movs	r3, #160	; 0xa0
 8002aee:	18fb      	adds	r3, r7, r3
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	2380      	movs	r3, #128	; 0x80
 8002af4:	04db      	lsls	r3, r3, #19
 8002af6:	4013      	ands	r3, r2
 8002af8:	d00c      	beq.n	8002b14 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2280      	movs	r2, #128	; 0x80
 8002b00:	0112      	lsls	r2, r2, #4
 8002b02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2284      	movs	r2, #132	; 0x84
 8002b08:	589b      	ldr	r3, [r3, r2]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2184      	movs	r1, #132	; 0x84
 8002b12:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2284      	movs	r2, #132	; 0x84
 8002b18:	589b      	ldr	r3, [r3, r2]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d100      	bne.n	8002b20 <HAL_UART_IRQHandler+0x1a4>
 8002b1e:	e1e7      	b.n	8002ef0 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b20:	23a4      	movs	r3, #164	; 0xa4
 8002b22:	18fb      	adds	r3, r7, r3
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2220      	movs	r2, #32
 8002b28:	4013      	ands	r3, r2
 8002b2a:	d00e      	beq.n	8002b4a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b2c:	23a0      	movs	r3, #160	; 0xa0
 8002b2e:	18fb      	adds	r3, r7, r3
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2220      	movs	r2, #32
 8002b34:	4013      	ands	r3, r2
 8002b36:	d008      	beq.n	8002b4a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d004      	beq.n	8002b4a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	0010      	movs	r0, r2
 8002b48:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2284      	movs	r2, #132	; 0x84
 8002b4e:	589b      	ldr	r3, [r3, r2]
 8002b50:	2194      	movs	r1, #148	; 0x94
 8002b52:	187a      	adds	r2, r7, r1
 8002b54:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	2240      	movs	r2, #64	; 0x40
 8002b5e:	4013      	ands	r3, r2
 8002b60:	2b40      	cmp	r3, #64	; 0x40
 8002b62:	d004      	beq.n	8002b6e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002b64:	187b      	adds	r3, r7, r1
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2228      	movs	r2, #40	; 0x28
 8002b6a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b6c:	d047      	beq.n	8002bfe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	0018      	movs	r0, r3
 8002b72:	f000 fdb3 	bl	80036dc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	2240      	movs	r2, #64	; 0x40
 8002b7e:	4013      	ands	r3, r2
 8002b80:	2b40      	cmp	r3, #64	; 0x40
 8002b82:	d137      	bne.n	8002bf4 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b84:	f3ef 8310 	mrs	r3, PRIMASK
 8002b88:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002b8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b8c:	2090      	movs	r0, #144	; 0x90
 8002b8e:	183a      	adds	r2, r7, r0
 8002b90:	6013      	str	r3, [r2, #0]
 8002b92:	2301      	movs	r3, #1
 8002b94:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b98:	f383 8810 	msr	PRIMASK, r3
}
 8002b9c:	46c0      	nop			; (mov r8, r8)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2140      	movs	r1, #64	; 0x40
 8002baa:	438a      	bics	r2, r1
 8002bac:	609a      	str	r2, [r3, #8]
 8002bae:	183b      	adds	r3, r7, r0
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bb6:	f383 8810 	msr	PRIMASK, r3
}
 8002bba:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d012      	beq.n	8002bea <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bc8:	4a14      	ldr	r2, [pc, #80]	; (8002c1c <HAL_UART_IRQHandler+0x2a0>)
 8002bca:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f7fe fac3 	bl	800115c <HAL_DMA_Abort_IT>
 8002bd6:	1e03      	subs	r3, r0, #0
 8002bd8:	d01a      	beq.n	8002c10 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be4:	0018      	movs	r0, r3
 8002be6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002be8:	e012      	b.n	8002c10 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	0018      	movs	r0, r3
 8002bee:	f7fd fecb 	bl	8000988 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf2:	e00d      	b.n	8002c10 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	f7fd fec6 	bl	8000988 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bfc:	e008      	b.n	8002c10 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	0018      	movs	r0, r3
 8002c02:	f7fd fec1 	bl	8000988 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2284      	movs	r2, #132	; 0x84
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002c0e:	e16f      	b.n	8002ef0 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c10:	46c0      	nop			; (mov r8, r8)
    return;
 8002c12:	e16d      	b.n	8002ef0 <HAL_UART_IRQHandler+0x574>
 8002c14:	0000080f 	.word	0x0000080f
 8002c18:	04000120 	.word	0x04000120
 8002c1c:	080037a5 	.word	0x080037a5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d000      	beq.n	8002c2a <HAL_UART_IRQHandler+0x2ae>
 8002c28:	e139      	b.n	8002e9e <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002c2a:	23a4      	movs	r3, #164	; 0xa4
 8002c2c:	18fb      	adds	r3, r7, r3
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2210      	movs	r2, #16
 8002c32:	4013      	ands	r3, r2
 8002c34:	d100      	bne.n	8002c38 <HAL_UART_IRQHandler+0x2bc>
 8002c36:	e132      	b.n	8002e9e <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002c38:	23a0      	movs	r3, #160	; 0xa0
 8002c3a:	18fb      	adds	r3, r7, r3
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2210      	movs	r2, #16
 8002c40:	4013      	ands	r3, r2
 8002c42:	d100      	bne.n	8002c46 <HAL_UART_IRQHandler+0x2ca>
 8002c44:	e12b      	b.n	8002e9e <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2210      	movs	r2, #16
 8002c4c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	2240      	movs	r2, #64	; 0x40
 8002c56:	4013      	ands	r3, r2
 8002c58:	2b40      	cmp	r3, #64	; 0x40
 8002c5a:	d000      	beq.n	8002c5e <HAL_UART_IRQHandler+0x2e2>
 8002c5c:	e09f      	b.n	8002d9e <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	217e      	movs	r1, #126	; 0x7e
 8002c68:	187b      	adds	r3, r7, r1
 8002c6a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002c6c:	187b      	adds	r3, r7, r1
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d100      	bne.n	8002c76 <HAL_UART_IRQHandler+0x2fa>
 8002c74:	e13e      	b.n	8002ef4 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2258      	movs	r2, #88	; 0x58
 8002c7a:	5a9b      	ldrh	r3, [r3, r2]
 8002c7c:	187a      	adds	r2, r7, r1
 8002c7e:	8812      	ldrh	r2, [r2, #0]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d300      	bcc.n	8002c86 <HAL_UART_IRQHandler+0x30a>
 8002c84:	e136      	b.n	8002ef4 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	187a      	adds	r2, r7, r1
 8002c8a:	215a      	movs	r1, #90	; 0x5a
 8002c8c:	8812      	ldrh	r2, [r2, #0]
 8002c8e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	2b20      	cmp	r3, #32
 8002c98:	d06f      	beq.n	8002d7a <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c9a:	f3ef 8310 	mrs	r3, PRIMASK
 8002c9e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ca2:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002caa:	f383 8810 	msr	PRIMASK, r3
}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4992      	ldr	r1, [pc, #584]	; (8002f04 <HAL_UART_IRQHandler+0x588>)
 8002cbc:	400a      	ands	r2, r1
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cc2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc6:	f383 8810 	msr	PRIMASK, r3
}
 8002cca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ccc:	f3ef 8310 	mrs	r3, PRIMASK
 8002cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cd4:	677b      	str	r3, [r7, #116]	; 0x74
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cdc:	f383 8810 	msr	PRIMASK, r3
}
 8002ce0:	46c0      	nop			; (mov r8, r8)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2101      	movs	r1, #1
 8002cee:	438a      	bics	r2, r1
 8002cf0:	609a      	str	r2, [r3, #8]
 8002cf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cf4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cf8:	f383 8810 	msr	PRIMASK, r3
}
 8002cfc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cfe:	f3ef 8310 	mrs	r3, PRIMASK
 8002d02:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002d04:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d06:	673b      	str	r3, [r7, #112]	; 0x70
 8002d08:	2301      	movs	r3, #1
 8002d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d0e:	f383 8810 	msr	PRIMASK, r3
}
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689a      	ldr	r2, [r3, #8]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2140      	movs	r1, #64	; 0x40
 8002d20:	438a      	bics	r2, r1
 8002d22:	609a      	str	r2, [r3, #8]
 8002d24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d26:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d2a:	f383 8810 	msr	PRIMASK, r3
}
 8002d2e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2280      	movs	r2, #128	; 0x80
 8002d34:	2120      	movs	r1, #32
 8002d36:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d3e:	f3ef 8310 	mrs	r3, PRIMASK
 8002d42:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002d44:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d48:	2301      	movs	r3, #1
 8002d4a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d4e:	f383 8810 	msr	PRIMASK, r3
}
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2110      	movs	r1, #16
 8002d60:	438a      	bics	r2, r1
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d66:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d6a:	f383 8810 	msr	PRIMASK, r3
}
 8002d6e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d74:	0018      	movs	r0, r3
 8002d76:	f7fe f9b9 	bl	80010ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2258      	movs	r2, #88	; 0x58
 8002d84:	5a9a      	ldrh	r2, [r3, r2]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	215a      	movs	r1, #90	; 0x5a
 8002d8a:	5a5b      	ldrh	r3, [r3, r1]
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	0011      	movs	r1, r2
 8002d96:	0018      	movs	r0, r3
 8002d98:	f000 f8c0 	bl	8002f1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d9c:	e0aa      	b.n	8002ef4 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2258      	movs	r2, #88	; 0x58
 8002da2:	5a99      	ldrh	r1, [r3, r2]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	225a      	movs	r2, #90	; 0x5a
 8002da8:	5a9b      	ldrh	r3, [r3, r2]
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	208e      	movs	r0, #142	; 0x8e
 8002dae:	183b      	adds	r3, r7, r0
 8002db0:	1a8a      	subs	r2, r1, r2
 8002db2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	225a      	movs	r2, #90	; 0x5a
 8002db8:	5a9b      	ldrh	r3, [r3, r2]
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d100      	bne.n	8002dc2 <HAL_UART_IRQHandler+0x446>
 8002dc0:	e09a      	b.n	8002ef8 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8002dc2:	183b      	adds	r3, r7, r0
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d100      	bne.n	8002dcc <HAL_UART_IRQHandler+0x450>
 8002dca:	e095      	b.n	8002ef8 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dcc:	f3ef 8310 	mrs	r3, PRIMASK
 8002dd0:	60fb      	str	r3, [r7, #12]
  return(result);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dd4:	2488      	movs	r4, #136	; 0x88
 8002dd6:	193a      	adds	r2, r7, r4
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	2301      	movs	r3, #1
 8002ddc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	f383 8810 	msr	PRIMASK, r3
}
 8002de4:	46c0      	nop			; (mov r8, r8)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4945      	ldr	r1, [pc, #276]	; (8002f08 <HAL_UART_IRQHandler+0x58c>)
 8002df2:	400a      	ands	r2, r1
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	193b      	adds	r3, r7, r4
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f383 8810 	msr	PRIMASK, r3
}
 8002e02:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e04:	f3ef 8310 	mrs	r3, PRIMASK
 8002e08:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e0a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e0c:	2484      	movs	r4, #132	; 0x84
 8002e0e:	193a      	adds	r2, r7, r4
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	2301      	movs	r3, #1
 8002e14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	f383 8810 	msr	PRIMASK, r3
}
 8002e1c:	46c0      	nop			; (mov r8, r8)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2101      	movs	r1, #1
 8002e2a:	438a      	bics	r2, r1
 8002e2c:	609a      	str	r2, [r3, #8]
 8002e2e:	193b      	adds	r3, r7, r4
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	f383 8810 	msr	PRIMASK, r3
}
 8002e3a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2280      	movs	r2, #128	; 0x80
 8002e40:	2120      	movs	r1, #32
 8002e42:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e50:	f3ef 8310 	mrs	r3, PRIMASK
 8002e54:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e58:	2480      	movs	r4, #128	; 0x80
 8002e5a:	193a      	adds	r2, r7, r4
 8002e5c:	6013      	str	r3, [r2, #0]
 8002e5e:	2301      	movs	r3, #1
 8002e60:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e64:	f383 8810 	msr	PRIMASK, r3
}
 8002e68:	46c0      	nop			; (mov r8, r8)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2110      	movs	r1, #16
 8002e76:	438a      	bics	r2, r1
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	193b      	adds	r3, r7, r4
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e82:	f383 8810 	msr	PRIMASK, r3
}
 8002e86:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e8e:	183b      	adds	r3, r7, r0
 8002e90:	881a      	ldrh	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	0011      	movs	r1, r2
 8002e96:	0018      	movs	r0, r3
 8002e98:	f000 f840 	bl	8002f1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e9c:	e02c      	b.n	8002ef8 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002e9e:	23a4      	movs	r3, #164	; 0xa4
 8002ea0:	18fb      	adds	r3, r7, r3
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2280      	movs	r2, #128	; 0x80
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	d00f      	beq.n	8002eca <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002eaa:	23a0      	movs	r3, #160	; 0xa0
 8002eac:	18fb      	adds	r3, r7, r3
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2280      	movs	r2, #128	; 0x80
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	d009      	beq.n	8002eca <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d01e      	beq.n	8002efc <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	0010      	movs	r0, r2
 8002ec6:	4798      	blx	r3
    }
    return;
 8002ec8:	e018      	b.n	8002efc <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002eca:	23a4      	movs	r3, #164	; 0xa4
 8002ecc:	18fb      	adds	r3, r7, r3
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2240      	movs	r2, #64	; 0x40
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	d013      	beq.n	8002efe <HAL_UART_IRQHandler+0x582>
 8002ed6:	23a0      	movs	r3, #160	; 0xa0
 8002ed8:	18fb      	adds	r3, r7, r3
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2240      	movs	r2, #64	; 0x40
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d00d      	beq.n	8002efe <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	f000 fc74 	bl	80037d2 <UART_EndTransmit_IT>
    return;
 8002eea:	e008      	b.n	8002efe <HAL_UART_IRQHandler+0x582>
      return;
 8002eec:	46c0      	nop			; (mov r8, r8)
 8002eee:	e006      	b.n	8002efe <HAL_UART_IRQHandler+0x582>
    return;
 8002ef0:	46c0      	nop			; (mov r8, r8)
 8002ef2:	e004      	b.n	8002efe <HAL_UART_IRQHandler+0x582>
      return;
 8002ef4:	46c0      	nop			; (mov r8, r8)
 8002ef6:	e002      	b.n	8002efe <HAL_UART_IRQHandler+0x582>
      return;
 8002ef8:	46c0      	nop			; (mov r8, r8)
 8002efa:	e000      	b.n	8002efe <HAL_UART_IRQHandler+0x582>
    return;
 8002efc:	46c0      	nop			; (mov r8, r8)
  }

}
 8002efe:	46bd      	mov	sp, r7
 8002f00:	b02b      	add	sp, #172	; 0xac
 8002f02:	bd90      	pop	{r4, r7, pc}
 8002f04:	fffffeff 	.word	0xfffffeff
 8002f08:	fffffedf 	.word	0xfffffedf

08002f0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002f14:	46c0      	nop			; (mov r8, r8)
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b002      	add	sp, #8
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	000a      	movs	r2, r1
 8002f26:	1cbb      	adds	r3, r7, #2
 8002f28:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	b002      	add	sp, #8
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b084      	sub	sp, #16
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f3e:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2280      	movs	r2, #128	; 0x80
 8002f44:	589b      	ldr	r3, [r3, r2]
 8002f46:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	4313      	orrs	r3, r2
}
 8002f4e:	0018      	movs	r0, r3
 8002f50:	46bd      	mov	sp, r7
 8002f52:	b004      	add	sp, #16
 8002f54:	bd80      	pop	{r7, pc}
	...

08002f58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b088      	sub	sp, #32
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f60:	231e      	movs	r3, #30
 8002f62:	18fb      	adds	r3, r7, r3
 8002f64:	2200      	movs	r2, #0
 8002f66:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	431a      	orrs	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a8d      	ldr	r2, [pc, #564]	; (80031bc <UART_SetConfig+0x264>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	0019      	movs	r1, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	4a88      	ldr	r2, [pc, #544]	; (80031c0 <UART_SetConfig+0x268>)
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	0019      	movs	r1, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68da      	ldr	r2, [r3, #12]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	4a7f      	ldr	r2, [pc, #508]	; (80031c4 <UART_SetConfig+0x26c>)
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	0019      	movs	r1, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a7b      	ldr	r2, [pc, #492]	; (80031c8 <UART_SetConfig+0x270>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d127      	bne.n	800302e <UART_SetConfig+0xd6>
 8002fde:	4b7b      	ldr	r3, [pc, #492]	; (80031cc <UART_SetConfig+0x274>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	2203      	movs	r2, #3
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	2b03      	cmp	r3, #3
 8002fe8:	d00d      	beq.n	8003006 <UART_SetConfig+0xae>
 8002fea:	d81b      	bhi.n	8003024 <UART_SetConfig+0xcc>
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d014      	beq.n	800301a <UART_SetConfig+0xc2>
 8002ff0:	d818      	bhi.n	8003024 <UART_SetConfig+0xcc>
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d002      	beq.n	8002ffc <UART_SetConfig+0xa4>
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d00a      	beq.n	8003010 <UART_SetConfig+0xb8>
 8002ffa:	e013      	b.n	8003024 <UART_SetConfig+0xcc>
 8002ffc:	231f      	movs	r3, #31
 8002ffe:	18fb      	adds	r3, r7, r3
 8003000:	2200      	movs	r2, #0
 8003002:	701a      	strb	r2, [r3, #0]
 8003004:	e021      	b.n	800304a <UART_SetConfig+0xf2>
 8003006:	231f      	movs	r3, #31
 8003008:	18fb      	adds	r3, r7, r3
 800300a:	2202      	movs	r2, #2
 800300c:	701a      	strb	r2, [r3, #0]
 800300e:	e01c      	b.n	800304a <UART_SetConfig+0xf2>
 8003010:	231f      	movs	r3, #31
 8003012:	18fb      	adds	r3, r7, r3
 8003014:	2204      	movs	r2, #4
 8003016:	701a      	strb	r2, [r3, #0]
 8003018:	e017      	b.n	800304a <UART_SetConfig+0xf2>
 800301a:	231f      	movs	r3, #31
 800301c:	18fb      	adds	r3, r7, r3
 800301e:	2208      	movs	r2, #8
 8003020:	701a      	strb	r2, [r3, #0]
 8003022:	e012      	b.n	800304a <UART_SetConfig+0xf2>
 8003024:	231f      	movs	r3, #31
 8003026:	18fb      	adds	r3, r7, r3
 8003028:	2210      	movs	r2, #16
 800302a:	701a      	strb	r2, [r3, #0]
 800302c:	e00d      	b.n	800304a <UART_SetConfig+0xf2>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a67      	ldr	r2, [pc, #412]	; (80031d0 <UART_SetConfig+0x278>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d104      	bne.n	8003042 <UART_SetConfig+0xea>
 8003038:	231f      	movs	r3, #31
 800303a:	18fb      	adds	r3, r7, r3
 800303c:	2200      	movs	r2, #0
 800303e:	701a      	strb	r2, [r3, #0]
 8003040:	e003      	b.n	800304a <UART_SetConfig+0xf2>
 8003042:	231f      	movs	r3, #31
 8003044:	18fb      	adds	r3, r7, r3
 8003046:	2210      	movs	r2, #16
 8003048:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69da      	ldr	r2, [r3, #28]
 800304e:	2380      	movs	r3, #128	; 0x80
 8003050:	021b      	lsls	r3, r3, #8
 8003052:	429a      	cmp	r2, r3
 8003054:	d15c      	bne.n	8003110 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8003056:	231f      	movs	r3, #31
 8003058:	18fb      	adds	r3, r7, r3
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b08      	cmp	r3, #8
 800305e:	d015      	beq.n	800308c <UART_SetConfig+0x134>
 8003060:	dc18      	bgt.n	8003094 <UART_SetConfig+0x13c>
 8003062:	2b04      	cmp	r3, #4
 8003064:	d00d      	beq.n	8003082 <UART_SetConfig+0x12a>
 8003066:	dc15      	bgt.n	8003094 <UART_SetConfig+0x13c>
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <UART_SetConfig+0x11a>
 800306c:	2b02      	cmp	r3, #2
 800306e:	d005      	beq.n	800307c <UART_SetConfig+0x124>
 8003070:	e010      	b.n	8003094 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003072:	f7fe fed5 	bl	8001e20 <HAL_RCC_GetPCLK1Freq>
 8003076:	0003      	movs	r3, r0
 8003078:	61bb      	str	r3, [r7, #24]
        break;
 800307a:	e012      	b.n	80030a2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800307c:	4b55      	ldr	r3, [pc, #340]	; (80031d4 <UART_SetConfig+0x27c>)
 800307e:	61bb      	str	r3, [r7, #24]
        break;
 8003080:	e00f      	b.n	80030a2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003082:	f7fe fe6d 	bl	8001d60 <HAL_RCC_GetSysClockFreq>
 8003086:	0003      	movs	r3, r0
 8003088:	61bb      	str	r3, [r7, #24]
        break;
 800308a:	e00a      	b.n	80030a2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800308c:	2380      	movs	r3, #128	; 0x80
 800308e:	021b      	lsls	r3, r3, #8
 8003090:	61bb      	str	r3, [r7, #24]
        break;
 8003092:	e006      	b.n	80030a2 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003098:	231e      	movs	r3, #30
 800309a:	18fb      	adds	r3, r7, r3
 800309c:	2201      	movs	r2, #1
 800309e:	701a      	strb	r2, [r3, #0]
        break;
 80030a0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d100      	bne.n	80030aa <UART_SetConfig+0x152>
 80030a8:	e07a      	b.n	80031a0 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	005a      	lsls	r2, r3, #1
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	085b      	lsrs	r3, r3, #1
 80030b4:	18d2      	adds	r2, r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	0019      	movs	r1, r3
 80030bc:	0010      	movs	r0, r2
 80030be:	f7fd f82b 	bl	8000118 <__udivsi3>
 80030c2:	0003      	movs	r3, r0
 80030c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	2b0f      	cmp	r3, #15
 80030ca:	d91c      	bls.n	8003106 <UART_SetConfig+0x1ae>
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	2380      	movs	r3, #128	; 0x80
 80030d0:	025b      	lsls	r3, r3, #9
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d217      	bcs.n	8003106 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	b29a      	uxth	r2, r3
 80030da:	200e      	movs	r0, #14
 80030dc:	183b      	adds	r3, r7, r0
 80030de:	210f      	movs	r1, #15
 80030e0:	438a      	bics	r2, r1
 80030e2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	085b      	lsrs	r3, r3, #1
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	2207      	movs	r2, #7
 80030ec:	4013      	ands	r3, r2
 80030ee:	b299      	uxth	r1, r3
 80030f0:	183b      	adds	r3, r7, r0
 80030f2:	183a      	adds	r2, r7, r0
 80030f4:	8812      	ldrh	r2, [r2, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	183a      	adds	r2, r7, r0
 8003100:	8812      	ldrh	r2, [r2, #0]
 8003102:	60da      	str	r2, [r3, #12]
 8003104:	e04c      	b.n	80031a0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003106:	231e      	movs	r3, #30
 8003108:	18fb      	adds	r3, r7, r3
 800310a:	2201      	movs	r2, #1
 800310c:	701a      	strb	r2, [r3, #0]
 800310e:	e047      	b.n	80031a0 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003110:	231f      	movs	r3, #31
 8003112:	18fb      	adds	r3, r7, r3
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	2b08      	cmp	r3, #8
 8003118:	d015      	beq.n	8003146 <UART_SetConfig+0x1ee>
 800311a:	dc18      	bgt.n	800314e <UART_SetConfig+0x1f6>
 800311c:	2b04      	cmp	r3, #4
 800311e:	d00d      	beq.n	800313c <UART_SetConfig+0x1e4>
 8003120:	dc15      	bgt.n	800314e <UART_SetConfig+0x1f6>
 8003122:	2b00      	cmp	r3, #0
 8003124:	d002      	beq.n	800312c <UART_SetConfig+0x1d4>
 8003126:	2b02      	cmp	r3, #2
 8003128:	d005      	beq.n	8003136 <UART_SetConfig+0x1de>
 800312a:	e010      	b.n	800314e <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800312c:	f7fe fe78 	bl	8001e20 <HAL_RCC_GetPCLK1Freq>
 8003130:	0003      	movs	r3, r0
 8003132:	61bb      	str	r3, [r7, #24]
        break;
 8003134:	e012      	b.n	800315c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003136:	4b27      	ldr	r3, [pc, #156]	; (80031d4 <UART_SetConfig+0x27c>)
 8003138:	61bb      	str	r3, [r7, #24]
        break;
 800313a:	e00f      	b.n	800315c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800313c:	f7fe fe10 	bl	8001d60 <HAL_RCC_GetSysClockFreq>
 8003140:	0003      	movs	r3, r0
 8003142:	61bb      	str	r3, [r7, #24]
        break;
 8003144:	e00a      	b.n	800315c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003146:	2380      	movs	r3, #128	; 0x80
 8003148:	021b      	lsls	r3, r3, #8
 800314a:	61bb      	str	r3, [r7, #24]
        break;
 800314c:	e006      	b.n	800315c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800314e:	2300      	movs	r3, #0
 8003150:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003152:	231e      	movs	r3, #30
 8003154:	18fb      	adds	r3, r7, r3
 8003156:	2201      	movs	r2, #1
 8003158:	701a      	strb	r2, [r3, #0]
        break;
 800315a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d01e      	beq.n	80031a0 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	085a      	lsrs	r2, r3, #1
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	18d2      	adds	r2, r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	0019      	movs	r1, r3
 8003172:	0010      	movs	r0, r2
 8003174:	f7fc ffd0 	bl	8000118 <__udivsi3>
 8003178:	0003      	movs	r3, r0
 800317a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	2b0f      	cmp	r3, #15
 8003180:	d90a      	bls.n	8003198 <UART_SetConfig+0x240>
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	2380      	movs	r3, #128	; 0x80
 8003186:	025b      	lsls	r3, r3, #9
 8003188:	429a      	cmp	r2, r3
 800318a:	d205      	bcs.n	8003198 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	b29a      	uxth	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	60da      	str	r2, [r3, #12]
 8003196:	e003      	b.n	80031a0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003198:	231e      	movs	r3, #30
 800319a:	18fb      	adds	r3, r7, r3
 800319c:	2201      	movs	r2, #1
 800319e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80031ac:	231e      	movs	r3, #30
 80031ae:	18fb      	adds	r3, r7, r3
 80031b0:	781b      	ldrb	r3, [r3, #0]
}
 80031b2:	0018      	movs	r0, r3
 80031b4:	46bd      	mov	sp, r7
 80031b6:	b008      	add	sp, #32
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	ffff69f3 	.word	0xffff69f3
 80031c0:	ffffcfff 	.word	0xffffcfff
 80031c4:	fffff4ff 	.word	0xfffff4ff
 80031c8:	40013800 	.word	0x40013800
 80031cc:	40021000 	.word	0x40021000
 80031d0:	40004400 	.word	0x40004400
 80031d4:	007a1200 	.word	0x007a1200

080031d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e4:	2208      	movs	r2, #8
 80031e6:	4013      	ands	r3, r2
 80031e8:	d00b      	beq.n	8003202 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	4a4a      	ldr	r2, [pc, #296]	; (800331c <UART_AdvFeatureConfig+0x144>)
 80031f2:	4013      	ands	r3, r2
 80031f4:	0019      	movs	r1, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	2201      	movs	r2, #1
 8003208:	4013      	ands	r3, r2
 800320a:	d00b      	beq.n	8003224 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	4a43      	ldr	r2, [pc, #268]	; (8003320 <UART_AdvFeatureConfig+0x148>)
 8003214:	4013      	ands	r3, r2
 8003216:	0019      	movs	r1, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	2202      	movs	r2, #2
 800322a:	4013      	ands	r3, r2
 800322c:	d00b      	beq.n	8003246 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	4a3b      	ldr	r2, [pc, #236]	; (8003324 <UART_AdvFeatureConfig+0x14c>)
 8003236:	4013      	ands	r3, r2
 8003238:	0019      	movs	r1, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	2204      	movs	r2, #4
 800324c:	4013      	ands	r3, r2
 800324e:	d00b      	beq.n	8003268 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	4a34      	ldr	r2, [pc, #208]	; (8003328 <UART_AdvFeatureConfig+0x150>)
 8003258:	4013      	ands	r3, r2
 800325a:	0019      	movs	r1, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	2210      	movs	r2, #16
 800326e:	4013      	ands	r3, r2
 8003270:	d00b      	beq.n	800328a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	4a2c      	ldr	r2, [pc, #176]	; (800332c <UART_AdvFeatureConfig+0x154>)
 800327a:	4013      	ands	r3, r2
 800327c:	0019      	movs	r1, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	2220      	movs	r2, #32
 8003290:	4013      	ands	r3, r2
 8003292:	d00b      	beq.n	80032ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	4a25      	ldr	r2, [pc, #148]	; (8003330 <UART_AdvFeatureConfig+0x158>)
 800329c:	4013      	ands	r3, r2
 800329e:	0019      	movs	r1, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	2240      	movs	r2, #64	; 0x40
 80032b2:	4013      	ands	r3, r2
 80032b4:	d01d      	beq.n	80032f2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	4a1d      	ldr	r2, [pc, #116]	; (8003334 <UART_AdvFeatureConfig+0x15c>)
 80032be:	4013      	ands	r3, r2
 80032c0:	0019      	movs	r1, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032d2:	2380      	movs	r3, #128	; 0x80
 80032d4:	035b      	lsls	r3, r3, #13
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d10b      	bne.n	80032f2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	4a15      	ldr	r2, [pc, #84]	; (8003338 <UART_AdvFeatureConfig+0x160>)
 80032e2:	4013      	ands	r3, r2
 80032e4:	0019      	movs	r1, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f6:	2280      	movs	r2, #128	; 0x80
 80032f8:	4013      	ands	r3, r2
 80032fa:	d00b      	beq.n	8003314 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	4a0e      	ldr	r2, [pc, #56]	; (800333c <UART_AdvFeatureConfig+0x164>)
 8003304:	4013      	ands	r3, r2
 8003306:	0019      	movs	r1, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	430a      	orrs	r2, r1
 8003312:	605a      	str	r2, [r3, #4]
  }
}
 8003314:	46c0      	nop			; (mov r8, r8)
 8003316:	46bd      	mov	sp, r7
 8003318:	b002      	add	sp, #8
 800331a:	bd80      	pop	{r7, pc}
 800331c:	ffff7fff 	.word	0xffff7fff
 8003320:	fffdffff 	.word	0xfffdffff
 8003324:	fffeffff 	.word	0xfffeffff
 8003328:	fffbffff 	.word	0xfffbffff
 800332c:	ffffefff 	.word	0xffffefff
 8003330:	ffffdfff 	.word	0xffffdfff
 8003334:	ffefffff 	.word	0xffefffff
 8003338:	ff9fffff 	.word	0xff9fffff
 800333c:	fff7ffff 	.word	0xfff7ffff

08003340 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b092      	sub	sp, #72	; 0x48
 8003344:	af02      	add	r7, sp, #8
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2284      	movs	r2, #132	; 0x84
 800334c:	2100      	movs	r1, #0
 800334e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003350:	f7fd fdc0 	bl	8000ed4 <HAL_GetTick>
 8003354:	0003      	movs	r3, r0
 8003356:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2208      	movs	r2, #8
 8003360:	4013      	ands	r3, r2
 8003362:	2b08      	cmp	r3, #8
 8003364:	d12c      	bne.n	80033c0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003368:	2280      	movs	r2, #128	; 0x80
 800336a:	0391      	lsls	r1, r2, #14
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	4a46      	ldr	r2, [pc, #280]	; (8003488 <UART_CheckIdleState+0x148>)
 8003370:	9200      	str	r2, [sp, #0]
 8003372:	2200      	movs	r2, #0
 8003374:	f000 f88c 	bl	8003490 <UART_WaitOnFlagUntilTimeout>
 8003378:	1e03      	subs	r3, r0, #0
 800337a:	d021      	beq.n	80033c0 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800337c:	f3ef 8310 	mrs	r3, PRIMASK
 8003380:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003384:	63bb      	str	r3, [r7, #56]	; 0x38
 8003386:	2301      	movs	r3, #1
 8003388:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800338a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338c:	f383 8810 	msr	PRIMASK, r3
}
 8003390:	46c0      	nop			; (mov r8, r8)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2180      	movs	r1, #128	; 0x80
 800339e:	438a      	bics	r2, r1
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a8:	f383 8810 	msr	PRIMASK, r3
}
 80033ac:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2220      	movs	r2, #32
 80033b2:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2278      	movs	r2, #120	; 0x78
 80033b8:	2100      	movs	r1, #0
 80033ba:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e05f      	b.n	8003480 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2204      	movs	r2, #4
 80033c8:	4013      	ands	r3, r2
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	d146      	bne.n	800345c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033d0:	2280      	movs	r2, #128	; 0x80
 80033d2:	03d1      	lsls	r1, r2, #15
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	4a2c      	ldr	r2, [pc, #176]	; (8003488 <UART_CheckIdleState+0x148>)
 80033d8:	9200      	str	r2, [sp, #0]
 80033da:	2200      	movs	r2, #0
 80033dc:	f000 f858 	bl	8003490 <UART_WaitOnFlagUntilTimeout>
 80033e0:	1e03      	subs	r3, r0, #0
 80033e2:	d03b      	beq.n	800345c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033e4:	f3ef 8310 	mrs	r3, PRIMASK
 80033e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80033ea:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033ec:	637b      	str	r3, [r7, #52]	; 0x34
 80033ee:	2301      	movs	r3, #1
 80033f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	f383 8810 	msr	PRIMASK, r3
}
 80033f8:	46c0      	nop			; (mov r8, r8)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4921      	ldr	r1, [pc, #132]	; (800348c <UART_CheckIdleState+0x14c>)
 8003406:	400a      	ands	r2, r1
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800340c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f383 8810 	msr	PRIMASK, r3
}
 8003414:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003416:	f3ef 8310 	mrs	r3, PRIMASK
 800341a:	61bb      	str	r3, [r7, #24]
  return(result);
 800341c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800341e:	633b      	str	r3, [r7, #48]	; 0x30
 8003420:	2301      	movs	r3, #1
 8003422:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	f383 8810 	msr	PRIMASK, r3
}
 800342a:	46c0      	nop			; (mov r8, r8)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2101      	movs	r1, #1
 8003438:	438a      	bics	r2, r1
 800343a:	609a      	str	r2, [r3, #8]
 800343c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003440:	6a3b      	ldr	r3, [r7, #32]
 8003442:	f383 8810 	msr	PRIMASK, r3
}
 8003446:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2280      	movs	r2, #128	; 0x80
 800344c:	2120      	movs	r1, #32
 800344e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2278      	movs	r2, #120	; 0x78
 8003454:	2100      	movs	r1, #0
 8003456:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e011      	b.n	8003480 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2220      	movs	r2, #32
 8003460:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2280      	movs	r2, #128	; 0x80
 8003466:	2120      	movs	r1, #32
 8003468:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2278      	movs	r2, #120	; 0x78
 800347a:	2100      	movs	r1, #0
 800347c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	0018      	movs	r0, r3
 8003482:	46bd      	mov	sp, r7
 8003484:	b010      	add	sp, #64	; 0x40
 8003486:	bd80      	pop	{r7, pc}
 8003488:	01ffffff 	.word	0x01ffffff
 800348c:	fffffedf 	.word	0xfffffedf

08003490 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	603b      	str	r3, [r7, #0]
 800349c:	1dfb      	adds	r3, r7, #7
 800349e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034a0:	e051      	b.n	8003546 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	3301      	adds	r3, #1
 80034a6:	d04e      	beq.n	8003546 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034a8:	f7fd fd14 	bl	8000ed4 <HAL_GetTick>
 80034ac:	0002      	movs	r2, r0
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d302      	bcc.n	80034be <UART_WaitOnFlagUntilTimeout+0x2e>
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e051      	b.n	8003566 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2204      	movs	r2, #4
 80034ca:	4013      	ands	r3, r2
 80034cc:	d03b      	beq.n	8003546 <UART_WaitOnFlagUntilTimeout+0xb6>
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2b80      	cmp	r3, #128	; 0x80
 80034d2:	d038      	beq.n	8003546 <UART_WaitOnFlagUntilTimeout+0xb6>
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	2b40      	cmp	r3, #64	; 0x40
 80034d8:	d035      	beq.n	8003546 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	2208      	movs	r2, #8
 80034e2:	4013      	ands	r3, r2
 80034e4:	2b08      	cmp	r3, #8
 80034e6:	d111      	bne.n	800350c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2208      	movs	r2, #8
 80034ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	0018      	movs	r0, r3
 80034f4:	f000 f8f2 	bl	80036dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2284      	movs	r2, #132	; 0x84
 80034fc:	2108      	movs	r1, #8
 80034fe:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2278      	movs	r2, #120	; 0x78
 8003504:	2100      	movs	r1, #0
 8003506:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e02c      	b.n	8003566 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	69da      	ldr	r2, [r3, #28]
 8003512:	2380      	movs	r3, #128	; 0x80
 8003514:	011b      	lsls	r3, r3, #4
 8003516:	401a      	ands	r2, r3
 8003518:	2380      	movs	r3, #128	; 0x80
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	429a      	cmp	r2, r3
 800351e:	d112      	bne.n	8003546 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2280      	movs	r2, #128	; 0x80
 8003526:	0112      	lsls	r2, r2, #4
 8003528:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	0018      	movs	r0, r3
 800352e:	f000 f8d5 	bl	80036dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2284      	movs	r2, #132	; 0x84
 8003536:	2120      	movs	r1, #32
 8003538:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2278      	movs	r2, #120	; 0x78
 800353e:	2100      	movs	r1, #0
 8003540:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e00f      	b.n	8003566 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	69db      	ldr	r3, [r3, #28]
 800354c:	68ba      	ldr	r2, [r7, #8]
 800354e:	4013      	ands	r3, r2
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	425a      	negs	r2, r3
 8003556:	4153      	adcs	r3, r2
 8003558:	b2db      	uxtb	r3, r3
 800355a:	001a      	movs	r2, r3
 800355c:	1dfb      	adds	r3, r7, #7
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	429a      	cmp	r2, r3
 8003562:	d09e      	beq.n	80034a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	0018      	movs	r0, r3
 8003568:	46bd      	mov	sp, r7
 800356a:	b004      	add	sp, #16
 800356c:	bd80      	pop	{r7, pc}
	...

08003570 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b090      	sub	sp, #64	; 0x40
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	1dbb      	adds	r3, r7, #6
 800357c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	1dba      	adds	r2, r7, #6
 8003588:	2158      	movs	r1, #88	; 0x58
 800358a:	8812      	ldrh	r2, [r2, #0]
 800358c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	1dba      	adds	r2, r7, #6
 8003592:	215a      	movs	r1, #90	; 0x5a
 8003594:	8812      	ldrh	r2, [r2, #0]
 8003596:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	689a      	ldr	r2, [r3, #8]
 80035a2:	2380      	movs	r3, #128	; 0x80
 80035a4:	015b      	lsls	r3, r3, #5
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d10d      	bne.n	80035c6 <UART_Start_Receive_IT+0x56>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d104      	bne.n	80035bc <UART_Start_Receive_IT+0x4c>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	225c      	movs	r2, #92	; 0x5c
 80035b6:	4946      	ldr	r1, [pc, #280]	; (80036d0 <UART_Start_Receive_IT+0x160>)
 80035b8:	5299      	strh	r1, [r3, r2]
 80035ba:	e01a      	b.n	80035f2 <UART_Start_Receive_IT+0x82>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	225c      	movs	r2, #92	; 0x5c
 80035c0:	21ff      	movs	r1, #255	; 0xff
 80035c2:	5299      	strh	r1, [r3, r2]
 80035c4:	e015      	b.n	80035f2 <UART_Start_Receive_IT+0x82>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10d      	bne.n	80035ea <UART_Start_Receive_IT+0x7a>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d104      	bne.n	80035e0 <UART_Start_Receive_IT+0x70>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	225c      	movs	r2, #92	; 0x5c
 80035da:	21ff      	movs	r1, #255	; 0xff
 80035dc:	5299      	strh	r1, [r3, r2]
 80035de:	e008      	b.n	80035f2 <UART_Start_Receive_IT+0x82>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	225c      	movs	r2, #92	; 0x5c
 80035e4:	217f      	movs	r1, #127	; 0x7f
 80035e6:	5299      	strh	r1, [r3, r2]
 80035e8:	e003      	b.n	80035f2 <UART_Start_Receive_IT+0x82>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	225c      	movs	r2, #92	; 0x5c
 80035ee:	2100      	movs	r1, #0
 80035f0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2284      	movs	r2, #132	; 0x84
 80035f6:	2100      	movs	r1, #0
 80035f8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2280      	movs	r2, #128	; 0x80
 80035fe:	2122      	movs	r1, #34	; 0x22
 8003600:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003602:	f3ef 8310 	mrs	r3, PRIMASK
 8003606:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003608:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800360a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800360c:	2301      	movs	r3, #1
 800360e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003612:	f383 8810 	msr	PRIMASK, r3
}
 8003616:	46c0      	nop			; (mov r8, r8)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689a      	ldr	r2, [r3, #8]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2101      	movs	r1, #1
 8003624:	430a      	orrs	r2, r1
 8003626:	609a      	str	r2, [r3, #8]
 8003628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800362a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800362c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362e:	f383 8810 	msr	PRIMASK, r3
}
 8003632:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	2380      	movs	r3, #128	; 0x80
 800363a:	015b      	lsls	r3, r3, #5
 800363c:	429a      	cmp	r2, r3
 800363e:	d107      	bne.n	8003650 <UART_Start_Receive_IT+0xe0>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d103      	bne.n	8003650 <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4a22      	ldr	r2, [pc, #136]	; (80036d4 <UART_Start_Receive_IT+0x164>)
 800364c:	669a      	str	r2, [r3, #104]	; 0x68
 800364e:	e002      	b.n	8003656 <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4a21      	ldr	r2, [pc, #132]	; (80036d8 <UART_Start_Receive_IT+0x168>)
 8003654:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d019      	beq.n	8003692 <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800365e:	f3ef 8310 	mrs	r3, PRIMASK
 8003662:	61fb      	str	r3, [r7, #28]
  return(result);
 8003664:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003666:	637b      	str	r3, [r7, #52]	; 0x34
 8003668:	2301      	movs	r3, #1
 800366a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	f383 8810 	msr	PRIMASK, r3
}
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2190      	movs	r1, #144	; 0x90
 8003680:	0049      	lsls	r1, r1, #1
 8003682:	430a      	orrs	r2, r1
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003688:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	f383 8810 	msr	PRIMASK, r3
}
 8003690:	e018      	b.n	80036c4 <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003692:	f3ef 8310 	mrs	r3, PRIMASK
 8003696:	613b      	str	r3, [r7, #16]
  return(result);
 8003698:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800369a:	63bb      	str	r3, [r7, #56]	; 0x38
 800369c:	2301      	movs	r3, #1
 800369e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f383 8810 	msr	PRIMASK, r3
}
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2120      	movs	r1, #32
 80036b4:	430a      	orrs	r2, r1
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	f383 8810 	msr	PRIMASK, r3
}
 80036c2:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	0018      	movs	r0, r3
 80036c8:	46bd      	mov	sp, r7
 80036ca:	b010      	add	sp, #64	; 0x40
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	46c0      	nop			; (mov r8, r8)
 80036d0:	000001ff 	.word	0x000001ff
 80036d4:	080039e1 	.word	0x080039e1
 80036d8:	08003829 	.word	0x08003829

080036dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08e      	sub	sp, #56	; 0x38
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036e4:	f3ef 8310 	mrs	r3, PRIMASK
 80036e8:	617b      	str	r3, [r7, #20]
  return(result);
 80036ea:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036ec:	637b      	str	r3, [r7, #52]	; 0x34
 80036ee:	2301      	movs	r3, #1
 80036f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	f383 8810 	msr	PRIMASK, r3
}
 80036f8:	46c0      	nop			; (mov r8, r8)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4926      	ldr	r1, [pc, #152]	; (80037a0 <UART_EndRxTransfer+0xc4>)
 8003706:	400a      	ands	r2, r1
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800370c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	f383 8810 	msr	PRIMASK, r3
}
 8003714:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003716:	f3ef 8310 	mrs	r3, PRIMASK
 800371a:	623b      	str	r3, [r7, #32]
  return(result);
 800371c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800371e:	633b      	str	r3, [r7, #48]	; 0x30
 8003720:	2301      	movs	r3, #1
 8003722:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	f383 8810 	msr	PRIMASK, r3
}
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689a      	ldr	r2, [r3, #8]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2101      	movs	r1, #1
 8003738:	438a      	bics	r2, r1
 800373a:	609a      	str	r2, [r3, #8]
 800373c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003742:	f383 8810 	msr	PRIMASK, r3
}
 8003746:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800374c:	2b01      	cmp	r3, #1
 800374e:	d118      	bne.n	8003782 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003750:	f3ef 8310 	mrs	r3, PRIMASK
 8003754:	60bb      	str	r3, [r7, #8]
  return(result);
 8003756:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003758:	62fb      	str	r3, [r7, #44]	; 0x2c
 800375a:	2301      	movs	r3, #1
 800375c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f383 8810 	msr	PRIMASK, r3
}
 8003764:	46c0      	nop			; (mov r8, r8)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2110      	movs	r1, #16
 8003772:	438a      	bics	r2, r1
 8003774:	601a      	str	r2, [r3, #0]
 8003776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003778:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	f383 8810 	msr	PRIMASK, r3
}
 8003780:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2280      	movs	r2, #128	; 0x80
 8003786:	2120      	movs	r1, #32
 8003788:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003796:	46c0      	nop			; (mov r8, r8)
 8003798:	46bd      	mov	sp, r7
 800379a:	b00e      	add	sp, #56	; 0x38
 800379c:	bd80      	pop	{r7, pc}
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	fffffedf 	.word	0xfffffedf

080037a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	225a      	movs	r2, #90	; 0x5a
 80037b6:	2100      	movs	r1, #0
 80037b8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2252      	movs	r2, #82	; 0x52
 80037be:	2100      	movs	r1, #0
 80037c0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	0018      	movs	r0, r3
 80037c6:	f7fd f8df 	bl	8000988 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037ca:	46c0      	nop			; (mov r8, r8)
 80037cc:	46bd      	mov	sp, r7
 80037ce:	b004      	add	sp, #16
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b086      	sub	sp, #24
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037da:	f3ef 8310 	mrs	r3, PRIMASK
 80037de:	60bb      	str	r3, [r7, #8]
  return(result);
 80037e0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80037e2:	617b      	str	r3, [r7, #20]
 80037e4:	2301      	movs	r3, #1
 80037e6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f383 8810 	msr	PRIMASK, r3
}
 80037ee:	46c0      	nop			; (mov r8, r8)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2140      	movs	r1, #64	; 0x40
 80037fc:	438a      	bics	r2, r1
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	f383 8810 	msr	PRIMASK, r3
}
 800380a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2220      	movs	r2, #32
 8003810:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	0018      	movs	r0, r3
 800381c:	f7ff fb76 	bl	8002f0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003820:	46c0      	nop			; (mov r8, r8)
 8003822:	46bd      	mov	sp, r7
 8003824:	b006      	add	sp, #24
 8003826:	bd80      	pop	{r7, pc}

08003828 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b094      	sub	sp, #80	; 0x50
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003830:	204e      	movs	r0, #78	; 0x4e
 8003832:	183b      	adds	r3, r7, r0
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	215c      	movs	r1, #92	; 0x5c
 8003838:	5a52      	ldrh	r2, [r2, r1]
 800383a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2280      	movs	r2, #128	; 0x80
 8003840:	589b      	ldr	r3, [r3, r2]
 8003842:	2b22      	cmp	r3, #34	; 0x22
 8003844:	d000      	beq.n	8003848 <UART_RxISR_8BIT+0x20>
 8003846:	e0ba      	b.n	80039be <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	214c      	movs	r1, #76	; 0x4c
 800384e:	187b      	adds	r3, r7, r1
 8003850:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003852:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003854:	187b      	adds	r3, r7, r1
 8003856:	881b      	ldrh	r3, [r3, #0]
 8003858:	b2da      	uxtb	r2, r3
 800385a:	183b      	adds	r3, r7, r0
 800385c:	881b      	ldrh	r3, [r3, #0]
 800385e:	b2d9      	uxtb	r1, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003864:	400a      	ands	r2, r1
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386e:	1c5a      	adds	r2, r3, #1
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	225a      	movs	r2, #90	; 0x5a
 8003878:	5a9b      	ldrh	r3, [r3, r2]
 800387a:	b29b      	uxth	r3, r3
 800387c:	3b01      	subs	r3, #1
 800387e:	b299      	uxth	r1, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	225a      	movs	r2, #90	; 0x5a
 8003884:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	225a      	movs	r2, #90	; 0x5a
 800388a:	5a9b      	ldrh	r3, [r3, r2]
 800388c:	b29b      	uxth	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d000      	beq.n	8003894 <UART_RxISR_8BIT+0x6c>
 8003892:	e09c      	b.n	80039ce <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003894:	f3ef 8310 	mrs	r3, PRIMASK
 8003898:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800389c:	64bb      	str	r3, [r7, #72]	; 0x48
 800389e:	2301      	movs	r3, #1
 80038a0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a4:	f383 8810 	msr	PRIMASK, r3
}
 80038a8:	46c0      	nop			; (mov r8, r8)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4948      	ldr	r1, [pc, #288]	; (80039d8 <UART_RxISR_8BIT+0x1b0>)
 80038b6:	400a      	ands	r2, r1
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c0:	f383 8810 	msr	PRIMASK, r3
}
 80038c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038c6:	f3ef 8310 	mrs	r3, PRIMASK
 80038ca:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80038cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ce:	647b      	str	r3, [r7, #68]	; 0x44
 80038d0:	2301      	movs	r3, #1
 80038d2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d6:	f383 8810 	msr	PRIMASK, r3
}
 80038da:	46c0      	nop			; (mov r8, r8)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2101      	movs	r1, #1
 80038e8:	438a      	bics	r2, r1
 80038ea:	609a      	str	r2, [r3, #8]
 80038ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038ee:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f2:	f383 8810 	msr	PRIMASK, r3
}
 80038f6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2280      	movs	r2, #128	; 0x80
 80038fc:	2120      	movs	r1, #32
 80038fe:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	2380      	movs	r3, #128	; 0x80
 8003914:	041b      	lsls	r3, r3, #16
 8003916:	4013      	ands	r3, r2
 8003918:	d018      	beq.n	800394c <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800391a:	f3ef 8310 	mrs	r3, PRIMASK
 800391e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003920:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003922:	643b      	str	r3, [r7, #64]	; 0x40
 8003924:	2301      	movs	r3, #1
 8003926:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	f383 8810 	msr	PRIMASK, r3
}
 800392e:	46c0      	nop			; (mov r8, r8)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4928      	ldr	r1, [pc, #160]	; (80039dc <UART_RxISR_8BIT+0x1b4>)
 800393c:	400a      	ands	r2, r1
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003942:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003944:	6a3b      	ldr	r3, [r7, #32]
 8003946:	f383 8810 	msr	PRIMASK, r3
}
 800394a:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003950:	2b01      	cmp	r3, #1
 8003952:	d12f      	bne.n	80039b4 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800395a:	f3ef 8310 	mrs	r3, PRIMASK
 800395e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003960:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003962:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003964:	2301      	movs	r3, #1
 8003966:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	f383 8810 	msr	PRIMASK, r3
}
 800396e:	46c0      	nop			; (mov r8, r8)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2110      	movs	r1, #16
 800397c:	438a      	bics	r2, r1
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003982:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	f383 8810 	msr	PRIMASK, r3
}
 800398a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	2210      	movs	r2, #16
 8003994:	4013      	ands	r3, r2
 8003996:	2b10      	cmp	r3, #16
 8003998:	d103      	bne.n	80039a2 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2210      	movs	r2, #16
 80039a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2258      	movs	r2, #88	; 0x58
 80039a6:	5a9a      	ldrh	r2, [r3, r2]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	0011      	movs	r1, r2
 80039ac:	0018      	movs	r0, r3
 80039ae:	f7ff fab5 	bl	8002f1c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80039b2:	e00c      	b.n	80039ce <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	0018      	movs	r0, r3
 80039b8:	f7fd f89e 	bl	8000af8 <HAL_UART_RxCpltCallback>
}
 80039bc:	e007      	b.n	80039ce <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	699a      	ldr	r2, [r3, #24]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2108      	movs	r1, #8
 80039ca:	430a      	orrs	r2, r1
 80039cc:	619a      	str	r2, [r3, #24]
}
 80039ce:	46c0      	nop			; (mov r8, r8)
 80039d0:	46bd      	mov	sp, r7
 80039d2:	b014      	add	sp, #80	; 0x50
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	46c0      	nop			; (mov r8, r8)
 80039d8:	fffffedf 	.word	0xfffffedf
 80039dc:	fbffffff 	.word	0xfbffffff

080039e0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b094      	sub	sp, #80	; 0x50
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80039e8:	204e      	movs	r0, #78	; 0x4e
 80039ea:	183b      	adds	r3, r7, r0
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	215c      	movs	r1, #92	; 0x5c
 80039f0:	5a52      	ldrh	r2, [r2, r1]
 80039f2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2280      	movs	r2, #128	; 0x80
 80039f8:	589b      	ldr	r3, [r3, r2]
 80039fa:	2b22      	cmp	r3, #34	; 0x22
 80039fc:	d000      	beq.n	8003a00 <UART_RxISR_16BIT+0x20>
 80039fe:	e0ba      	b.n	8003b76 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	214c      	movs	r1, #76	; 0x4c
 8003a06:	187b      	adds	r3, r7, r1
 8003a08:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003a0a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a10:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8003a12:	187b      	adds	r3, r7, r1
 8003a14:	183a      	adds	r2, r7, r0
 8003a16:	881b      	ldrh	r3, [r3, #0]
 8003a18:	8812      	ldrh	r2, [r2, #0]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a20:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a26:	1c9a      	adds	r2, r3, #2
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	225a      	movs	r2, #90	; 0x5a
 8003a30:	5a9b      	ldrh	r3, [r3, r2]
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b299      	uxth	r1, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	225a      	movs	r2, #90	; 0x5a
 8003a3c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	225a      	movs	r2, #90	; 0x5a
 8003a42:	5a9b      	ldrh	r3, [r3, r2]
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d000      	beq.n	8003a4c <UART_RxISR_16BIT+0x6c>
 8003a4a:	e09c      	b.n	8003b86 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a4c:	f3ef 8310 	mrs	r3, PRIMASK
 8003a50:	623b      	str	r3, [r7, #32]
  return(result);
 8003a52:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a54:	647b      	str	r3, [r7, #68]	; 0x44
 8003a56:	2301      	movs	r3, #1
 8003a58:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	f383 8810 	msr	PRIMASK, r3
}
 8003a60:	46c0      	nop			; (mov r8, r8)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4948      	ldr	r1, [pc, #288]	; (8003b90 <UART_RxISR_16BIT+0x1b0>)
 8003a6e:	400a      	ands	r2, r1
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a74:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a78:	f383 8810 	msr	PRIMASK, r3
}
 8003a7c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a7e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a86:	643b      	str	r3, [r7, #64]	; 0x40
 8003a88:	2301      	movs	r3, #1
 8003a8a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8e:	f383 8810 	msr	PRIMASK, r3
}
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689a      	ldr	r2, [r3, #8]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	438a      	bics	r2, r1
 8003aa2:	609a      	str	r2, [r3, #8]
 8003aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aa6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aaa:	f383 8810 	msr	PRIMASK, r3
}
 8003aae:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2280      	movs	r2, #128	; 0x80
 8003ab4:	2120      	movs	r1, #32
 8003ab6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	2380      	movs	r3, #128	; 0x80
 8003acc:	041b      	lsls	r3, r3, #16
 8003ace:	4013      	ands	r3, r2
 8003ad0:	d018      	beq.n	8003b04 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ad2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ad6:	617b      	str	r3, [r7, #20]
  return(result);
 8003ad8:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003ada:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003adc:	2301      	movs	r3, #1
 8003ade:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	f383 8810 	msr	PRIMASK, r3
}
 8003ae6:	46c0      	nop			; (mov r8, r8)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4928      	ldr	r1, [pc, #160]	; (8003b94 <UART_RxISR_16BIT+0x1b4>)
 8003af4:	400a      	ands	r2, r1
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003afa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	f383 8810 	msr	PRIMASK, r3
}
 8003b02:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d12f      	bne.n	8003b6c <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b12:	f3ef 8310 	mrs	r3, PRIMASK
 8003b16:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b18:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f383 8810 	msr	PRIMASK, r3
}
 8003b26:	46c0      	nop			; (mov r8, r8)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2110      	movs	r1, #16
 8003b34:	438a      	bics	r2, r1
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	f383 8810 	msr	PRIMASK, r3
}
 8003b42:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	2210      	movs	r2, #16
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	2b10      	cmp	r3, #16
 8003b50:	d103      	bne.n	8003b5a <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2210      	movs	r2, #16
 8003b58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2258      	movs	r2, #88	; 0x58
 8003b5e:	5a9a      	ldrh	r2, [r3, r2]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	0011      	movs	r1, r2
 8003b64:	0018      	movs	r0, r3
 8003b66:	f7ff f9d9 	bl	8002f1c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003b6a:	e00c      	b.n	8003b86 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f7fc ffc2 	bl	8000af8 <HAL_UART_RxCpltCallback>
}
 8003b74:	e007      	b.n	8003b86 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	699a      	ldr	r2, [r3, #24]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2108      	movs	r1, #8
 8003b82:	430a      	orrs	r2, r1
 8003b84:	619a      	str	r2, [r3, #24]
}
 8003b86:	46c0      	nop			; (mov r8, r8)
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	b014      	add	sp, #80	; 0x50
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	46c0      	nop			; (mov r8, r8)
 8003b90:	fffffedf 	.word	0xfffffedf
 8003b94:	fbffffff 	.word	0xfbffffff

08003b98 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8003b9e:	4b22      	ldr	r3, [pc, #136]	; (8003c28 <_DoInit+0x90>)
 8003ba0:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2203      	movs	r2, #3
 8003ba6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2203      	movs	r2, #3
 8003bac:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a1e      	ldr	r2, [pc, #120]	; (8003c2c <_DoInit+0x94>)
 8003bb2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a1e      	ldr	r2, [pc, #120]	; (8003c30 <_DoInit+0x98>)
 8003bb8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2280      	movs	r2, #128	; 0x80
 8003bbe:	00d2      	lsls	r2, r2, #3
 8003bc0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a15      	ldr	r2, [pc, #84]	; (8003c2c <_DoInit+0x94>)
 8003bd8:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a15      	ldr	r2, [pc, #84]	; (8003c34 <_DoInit+0x9c>)
 8003bde:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2210      	movs	r2, #16
 8003be4:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY(&p->acID[7], "RTT", 9);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	1dda      	adds	r2, r3, #7
 8003bfc:	4b0e      	ldr	r3, [pc, #56]	; (8003c38 <_DoInit+0xa0>)
 8003bfe:	0010      	movs	r0, r2
 8003c00:	0019      	movs	r1, r3
 8003c02:	2304      	movs	r3, #4
 8003c04:	001a      	movs	r2, r3
 8003c06:	f001 f999 	bl	8004f3c <memcpy>
  STRCPY(&p->acID[0], "SEGGER", 7);
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	4b0b      	ldr	r3, [pc, #44]	; (8003c3c <_DoInit+0xa4>)
 8003c0e:	0010      	movs	r0, r2
 8003c10:	0019      	movs	r1, r3
 8003c12:	2307      	movs	r3, #7
 8003c14:	001a      	movs	r2, r3
 8003c16:	f001 f991 	bl	8004f3c <memcpy>
  p->acID[6] = ' ';
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	719a      	strb	r2, [r3, #6]
}
 8003c20:	46c0      	nop			; (mov r8, r8)
 8003c22:	46bd      	mov	sp, r7
 8003c24:	b002      	add	sp, #8
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	200002a8 	.word	0x200002a8
 8003c2c:	08004ffc 	.word	0x08004ffc
 8003c30:	20000350 	.word	0x20000350
 8003c34:	20000750 	.word	0x20000750
 8003c38:	08005008 	.word	0x08005008
 8003c3c:	0800500c 	.word	0x0800500c

08003c40 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b088      	sub	sp, #32
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
  char*    pDst;
#endif
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d905      	bls.n	8003c70 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	61fb      	str	r3, [r7, #28]
 8003c6e:	e007      	b.n	8003c80 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	6939      	ldr	r1, [r7, #16]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	1acb      	subs	r3, r1, r3
 8003c7a:	18d3      	adds	r3, r2, r3
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	689a      	ldr	r2, [r3, #8]
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	1ad2      	subs	r2, r2, r3
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d900      	bls.n	8003c90 <_WriteBlocking+0x50>
 8003c8e:	0013      	movs	r3, r2
 8003c90:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003c92:	69fa      	ldr	r2, [r7, #28]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d900      	bls.n	8003c9c <_WriteBlocking+0x5c>
 8003c9a:	0013      	movs	r3, r2
 8003c9c:	61fb      	str	r3, [r7, #28]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	18d3      	adds	r3, r2, r3
 8003ca6:	69fa      	ldr	r2, [r7, #28]
 8003ca8:	68b9      	ldr	r1, [r7, #8]
 8003caa:	0018      	movs	r0, r3
 8003cac:	f001 f946 	bl	8004f3c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	18d3      	adds	r3, r2, r3
 8003cb6:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	18d3      	adds	r3, r2, r3
 8003cbe:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	18d3      	adds	r3, r2, r3
 8003cce:	617b      	str	r3, [r7, #20]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d101      	bne.n	8003cde <_WriteBlocking+0x9e>
      WrOff = 0u;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1b5      	bne.n	8003c56 <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 8003cea:	69bb      	ldr	r3, [r7, #24]
}
 8003cec:	0018      	movs	r0, r3
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	b008      	add	sp, #32
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b088      	sub	sp, #32
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
  unsigned Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*    pDst;
#endif

  WrOff = pRing->WrOff;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	689a      	ldr	r2, [r3, #8]
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d90e      	bls.n	8003d36 <_WriteNoCheck+0x42>
    while (NumBytes--) {
      *pDst++ = *pData++;
    };
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	18d3      	adds	r3, r2, r3
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	68b9      	ldr	r1, [r7, #8]
 8003d24:	0018      	movs	r0, r3
 8003d26:	f001 f909 	bl	8004f3c <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 8003d2a:	69fa      	ldr	r2, [r7, #28]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	18d2      	adds	r2, r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	60da      	str	r2, [r3, #12]
    NumBytesAtOnce = NumBytes - Rem;
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003d34:	e01a      	b.n	8003d6c <_WriteNoCheck+0x78>
    NumBytesAtOnce = Rem;
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	18d3      	adds	r3, r2, r3
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	68b9      	ldr	r1, [r7, #8]
 8003d46:	0018      	movs	r0, r3
 8003d48:	f001 f8f8 	bl	8004f3c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6858      	ldr	r0, [r3, #4]
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	18d3      	adds	r3, r2, r3
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	0019      	movs	r1, r3
 8003d62:	f001 f8eb 	bl	8004f3c <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	60da      	str	r2, [r3, #12]
}
 8003d6c:	46c0      	nop			; (mov r8, r8)
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	b008      	add	sp, #32
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d808      	bhi.n	8003da2 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	1ad2      	subs	r2, r2, r3
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	18d3      	adds	r3, r2, r3
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	617b      	str	r3, [r7, #20]
 8003da0:	e004      	b.n	8003dac <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	3b01      	subs	r3, #1
 8003daa:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003dac:	697b      	ldr	r3, [r7, #20]
}
 8003dae:	0018      	movs	r0, r3
 8003db0:	46bd      	mov	sp, r7
 8003db2:	b006      	add	sp, #24
 8003db4:	bd80      	pop	{r7, pc}
	...

08003db8 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b088      	sub	sp, #32
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	1c5a      	adds	r2, r3, #1
 8003dcc:	0013      	movs	r3, r2
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	189b      	adds	r3, r3, r2
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	4a23      	ldr	r2, [pc, #140]	; (8003e64 <SEGGER_RTT_WriteNoLock+0xac>)
 8003dd6:	189b      	adds	r3, r3, r2
 8003dd8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d02e      	beq.n	8003e40 <SEGGER_RTT_WriteNoLock+0x88>
 8003de2:	d836      	bhi.n	8003e52 <SEGGER_RTT_WriteNoLock+0x9a>
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d002      	beq.n	8003dee <SEGGER_RTT_WriteNoLock+0x36>
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d016      	beq.n	8003e1a <SEGGER_RTT_WriteNoLock+0x62>
 8003dec:	e031      	b.n	8003e52 <SEGGER_RTT_WriteNoLock+0x9a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	0018      	movs	r0, r3
 8003df2:	f7ff ffbf 	bl	8003d74 <_GetAvailWriteSpace>
 8003df6:	0003      	movs	r3, r0
 8003df8:	613b      	str	r3, [r7, #16]
    if (Avail < NumBytes) {
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d202      	bcs.n	8003e08 <SEGGER_RTT_WriteNoLock+0x50>
      Status = 0u;
 8003e02:	2300      	movs	r3, #0
 8003e04:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003e06:	e027      	b.n	8003e58 <SEGGER_RTT_WriteNoLock+0xa0>
      Status = NumBytes;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	69b9      	ldr	r1, [r7, #24]
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	0018      	movs	r0, r3
 8003e14:	f7ff ff6e 	bl	8003cf4 <_WriteNoCheck>
    break;
 8003e18:	e01e      	b.n	8003e58 <SEGGER_RTT_WriteNoLock+0xa0>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	f7ff ffa9 	bl	8003d74 <_GetAvailWriteSpace>
 8003e22:	0003      	movs	r3, r0
 8003e24:	613b      	str	r3, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d900      	bls.n	8003e30 <SEGGER_RTT_WriteNoLock+0x78>
 8003e2e:	0013      	movs	r3, r2
 8003e30:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003e32:	69fa      	ldr	r2, [r7, #28]
 8003e34:	69b9      	ldr	r1, [r7, #24]
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	0018      	movs	r0, r3
 8003e3a:	f7ff ff5b 	bl	8003cf4 <_WriteNoCheck>
    break;
 8003e3e:	e00b      	b.n	8003e58 <SEGGER_RTT_WriteNoLock+0xa0>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	69b9      	ldr	r1, [r7, #24]
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	0018      	movs	r0, r3
 8003e48:	f7ff fefa 	bl	8003c40 <_WriteBlocking>
 8003e4c:	0003      	movs	r3, r0
 8003e4e:	61fb      	str	r3, [r7, #28]
    break;
 8003e50:	e002      	b.n	8003e58 <SEGGER_RTT_WriteNoLock+0xa0>
  default:
    Status = 0u;
 8003e52:	2300      	movs	r3, #0
 8003e54:	61fb      	str	r3, [r7, #28]
    break;
 8003e56:	46c0      	nop			; (mov r8, r8)
  }
  //
  // Finish up.
  //
  return Status;
 8003e58:	69fb      	ldr	r3, [r7, #28]
}
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b008      	add	sp, #32
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	46c0      	nop			; (mov r8, r8)
 8003e64:	200002a8 	.word	0x200002a8

08003e68 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 8003e74:	4b0d      	ldr	r3, [pc, #52]	; (8003eac <SEGGER_RTT_Write+0x44>)
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d101      	bne.n	8003e80 <SEGGER_RTT_Write+0x18>
 8003e7c:	f7ff fe8c 	bl	8003b98 <_DoInit>
  SEGGER_RTT_LOCK();
 8003e80:	f3ef 8310 	mrs	r3, PRIMASK
 8003e84:	2101      	movs	r1, #1
 8003e86:	f381 8810 	msr	PRIMASK, r1
 8003e8a:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	68b9      	ldr	r1, [r7, #8]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	0018      	movs	r0, r3
 8003e94:	f7ff ff90 	bl	8003db8 <SEGGER_RTT_WriteNoLock>
 8003e98:	0003      	movs	r3, r0
 8003e9a:	613b      	str	r3, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f383 8810 	msr	PRIMASK, r3
  //
  return Status;
 8003ea2:	693b      	ldr	r3, [r7, #16]
}
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	b006      	add	sp, #24
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	200002a8 	.word	0x200002a8

08003eb0 <SEGGER_RTT_WriteString>:
*  Notes
*    (1) Data is stored according to buffer flags.
*    (2) String passed to this function has to be \0 terminated
*    (3) \0 termination character is *not* stored in RTT buffer
*/
unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  unsigned Len;

  Len = STRLEN(s);
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	f7fc f923 	bl	8000108 <strlen>
 8003ec2:	0003      	movs	r3, r0
 8003ec4:	60fb      	str	r3, [r7, #12]
  return SEGGER_RTT_Write(BufferIndex, s, Len);
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	6839      	ldr	r1, [r7, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	0018      	movs	r0, r3
 8003ece:	f7ff ffcb 	bl	8003e68 <SEGGER_RTT_Write>
 8003ed2:	0003      	movs	r3, r0
}
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	b004      	add	sp, #16
 8003eda:	bd80      	pop	{r7, pc}

08003edc <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	000a      	movs	r2, r1
 8003ee6:	1cfb      	adds	r3, r7, #3
 8003ee8:	701a      	strb	r2, [r3, #0]
  unsigned Cnt;

  Cnt = p->Cnt;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d80f      	bhi.n	8003f1c <_StoreChar+0x40>
    *(p->pBuffer + Cnt) = c;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	18d3      	adds	r3, r2, r3
 8003f04:	1cfa      	adds	r2, r7, #3
 8003f06:	7812      	ldrb	r2, [r2, #0]
 8003f08:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	1c5a      	adds	r2, r3, #1
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	1c5a      	adds	r2, r3, #1
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d115      	bne.n	8003f54 <_StoreChar+0x78>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6918      	ldr	r0, [r3, #16]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6819      	ldr	r1, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	001a      	movs	r2, r3
 8003f36:	f7ff ff97 	bl	8003e68 <SEGGER_RTT_Write>
 8003f3a:	0002      	movs	r2, r0
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d004      	beq.n	8003f4e <_StoreChar+0x72>
      p->ReturnValue = -1;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	4252      	negs	r2, r2
 8003f4a:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 8003f4c:	e002      	b.n	8003f54 <_StoreChar+0x78>
      p->Cnt = 0u;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	609a      	str	r2, [r3, #8]
}
 8003f54:	46c0      	nop			; (mov r8, r8)
 8003f56:	46bd      	mov	sp, r7
 8003f58:	b004      	add	sp, #16
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b08a      	sub	sp, #40	; 0x28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
 8003f68:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8003f72:	2301      	movs	r3, #1
 8003f74:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8003f76:	e008      	b.n	8003f8a <_PrintUnsigned+0x2e>
    Number = (Number / Base);
 8003f78:	6879      	ldr	r1, [r7, #4]
 8003f7a:	6a38      	ldr	r0, [r7, #32]
 8003f7c:	f7fc f8cc 	bl	8000118 <__udivsi3>
 8003f80:	0003      	movs	r3, r0
 8003f82:	623b      	str	r3, [r7, #32]
    Width++;
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	3301      	adds	r3, #1
 8003f88:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8003f8a:	6a3a      	ldr	r2, [r7, #32]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d2f2      	bcs.n	8003f78 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d901      	bls.n	8003f9e <_PrintUnsigned+0x42>
    Width = NumDigits;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8003f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	d12b      	bne.n	8003ffe <_PrintUnsigned+0xa2>
    if (FieldWidth != 0u) {
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d028      	beq.n	8003ffe <_PrintUnsigned+0xa2>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8003fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fae:	2202      	movs	r2, #2
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	d007      	beq.n	8003fc4 <_PrintUnsigned+0x68>
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d104      	bne.n	8003fc4 <_PrintUnsigned+0x68>
        c = '0';
 8003fba:	231b      	movs	r3, #27
 8003fbc:	18fb      	adds	r3, r7, r3
 8003fbe:	2230      	movs	r2, #48	; 0x30
 8003fc0:	701a      	strb	r2, [r3, #0]
 8003fc2:	e003      	b.n	8003fcc <_PrintUnsigned+0x70>
      } else {
        c = ' ';
 8003fc4:	231b      	movs	r3, #27
 8003fc6:	18fb      	adds	r3, r7, r3
 8003fc8:	2220      	movs	r2, #32
 8003fca:	701a      	strb	r2, [r3, #0]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003fcc:	e00e      	b.n	8003fec <_PrintUnsigned+0x90>
        FieldWidth--;
 8003fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8003fd4:	231b      	movs	r3, #27
 8003fd6:	18fb      	adds	r3, r7, r3
 8003fd8:	781a      	ldrb	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	0011      	movs	r1, r2
 8003fde:	0018      	movs	r0, r3
 8003fe0:	f7ff ff7c 	bl	8003edc <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	db07      	blt.n	8003ffc <_PrintUnsigned+0xa0>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d005      	beq.n	8003ffe <_PrintUnsigned+0xa2>
 8003ff2:	69fa      	ldr	r2, [r7, #28]
 8003ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d3e9      	bcc.n	8003fce <_PrintUnsigned+0x72>
 8003ffa:	e000      	b.n	8003ffe <_PrintUnsigned+0xa2>
          break;
 8003ffc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	2b00      	cmp	r3, #0
 8004004:	db57      	blt.n	80040b6 <_PrintUnsigned+0x15a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d903      	bls.n	8004014 <_PrintUnsigned+0xb8>
        NumDigits--;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	3b01      	subs	r3, #1
 8004010:	603b      	str	r3, [r7, #0]
 8004012:	e00a      	b.n	800402a <_PrintUnsigned+0xce>
      } else {
        Div = v / Digit;
 8004014:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004016:	68b8      	ldr	r0, [r7, #8]
 8004018:	f7fc f87e 	bl	8000118 <__udivsi3>
 800401c:	0003      	movs	r3, r0
 800401e:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	429a      	cmp	r2, r3
 8004026:	d200      	bcs.n	800402a <_PrintUnsigned+0xce>
          break;
 8004028:	e004      	b.n	8004034 <_PrintUnsigned+0xd8>
        }
      }
      Digit *= Base;
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	4353      	muls	r3, r2
 8004030:	627b      	str	r3, [r7, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004032:	e7e8      	b.n	8004006 <_PrintUnsigned+0xaa>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 8004034:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004036:	68b8      	ldr	r0, [r7, #8]
 8004038:	f7fc f86e 	bl	8000118 <__udivsi3>
 800403c:	0003      	movs	r3, r0
 800403e:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004044:	4353      	muls	r3, r2
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 800404c:	4a1c      	ldr	r2, [pc, #112]	; (80040c0 <_PrintUnsigned+0x164>)
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	18d3      	adds	r3, r2, r3
 8004052:	781a      	ldrb	r2, [r3, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	0011      	movs	r1, r2
 8004058:	0018      	movs	r0, r3
 800405a:	f7ff ff3f 	bl	8003edc <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	2b00      	cmp	r3, #0
 8004064:	db09      	blt.n	800407a <_PrintUnsigned+0x11e>
        break;
      }
      Digit /= Base;
 8004066:	6879      	ldr	r1, [r7, #4]
 8004068:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800406a:	f7fc f855 	bl	8000118 <__udivsi3>
 800406e:	0003      	movs	r3, r0
 8004070:	627b      	str	r3, [r7, #36]	; 0x24
    } while (Digit);
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1dd      	bne.n	8004034 <_PrintUnsigned+0xd8>
 8004078:	e000      	b.n	800407c <_PrintUnsigned+0x120>
        break;
 800407a:	46c0      	nop			; (mov r8, r8)
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800407c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800407e:	2201      	movs	r2, #1
 8004080:	4013      	ands	r3, r2
 8004082:	d018      	beq.n	80040b6 <_PrintUnsigned+0x15a>
      if (FieldWidth != 0u) {
 8004084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004086:	2b00      	cmp	r3, #0
 8004088:	d015      	beq.n	80040b6 <_PrintUnsigned+0x15a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800408a:	e00b      	b.n	80040a4 <_PrintUnsigned+0x148>
          FieldWidth--;
 800408c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408e:	3b01      	subs	r3, #1
 8004090:	633b      	str	r3, [r7, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2120      	movs	r1, #32
 8004096:	0018      	movs	r0, r3
 8004098:	f7ff ff20 	bl	8003edc <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	db07      	blt.n	80040b4 <_PrintUnsigned+0x158>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80040a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d005      	beq.n	80040b6 <_PrintUnsigned+0x15a>
 80040aa:	69fa      	ldr	r2, [r7, #28]
 80040ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d3ec      	bcc.n	800408c <_PrintUnsigned+0x130>
          }
        }
      }
    }
  }
}
 80040b2:	e000      	b.n	80040b6 <_PrintUnsigned+0x15a>
            break;
 80040b4:	46c0      	nop			; (mov r8, r8)
}
 80040b6:	46c0      	nop			; (mov r8, r8)
 80040b8:	46bd      	mov	sp, r7
 80040ba:	b00a      	add	sp, #40	; 0x28
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	46c0      	nop			; (mov r8, r8)
 80040c0:	080050d0 	.word	0x080050d0

080040c4 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 80040c4:	b590      	push	{r4, r7, lr}
 80040c6:	b089      	sub	sp, #36	; 0x24
 80040c8:	af02      	add	r7, sp, #8
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
 80040d0:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	17da      	asrs	r2, r3, #31
 80040d6:	189b      	adds	r3, r3, r2
 80040d8:	4053      	eors	r3, r2
 80040da:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80040dc:	2301      	movs	r3, #1
 80040de:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80040e0:	e009      	b.n	80040f6 <_PrintInt+0x32>
    Number = (Number / (int)Base);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	0019      	movs	r1, r3
 80040e6:	6938      	ldr	r0, [r7, #16]
 80040e8:	f7fc f8a0 	bl	800022c <__divsi3>
 80040ec:	0003      	movs	r3, r0
 80040ee:	613b      	str	r3, [r7, #16]
    Width++;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	3301      	adds	r3, #1
 80040f4:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	daf1      	bge.n	80040e2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	429a      	cmp	r2, r3
 8004104:	d901      	bls.n	800410a <_PrintInt+0x46>
    Width = NumDigits;
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800410a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410c:	2b00      	cmp	r3, #0
 800410e:	d009      	beq.n	8004124 <_PrintInt+0x60>
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	2b00      	cmp	r3, #0
 8004114:	db03      	blt.n	800411e <_PrintInt+0x5a>
 8004116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004118:	2204      	movs	r2, #4
 800411a:	4013      	ands	r3, r2
 800411c:	d002      	beq.n	8004124 <_PrintInt+0x60>
    FieldWidth--;
 800411e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004120:	3b01      	subs	r3, #1
 8004122:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004126:	2202      	movs	r2, #2
 8004128:	4013      	ands	r3, r2
 800412a:	d002      	beq.n	8004132 <_PrintInt+0x6e>
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d01c      	beq.n	800416c <_PrintInt+0xa8>
 8004132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004134:	2201      	movs	r2, #1
 8004136:	4013      	ands	r3, r2
 8004138:	d118      	bne.n	800416c <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 800413a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413c:	2b00      	cmp	r3, #0
 800413e:	d015      	beq.n	800416c <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004140:	e00b      	b.n	800415a <_PrintInt+0x96>
        FieldWidth--;
 8004142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004144:	3b01      	subs	r3, #1
 8004146:	62bb      	str	r3, [r7, #40]	; 0x28
        _StoreChar(pBufferDesc, ' ');
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2120      	movs	r1, #32
 800414c:	0018      	movs	r0, r3
 800414e:	f7ff fec5 	bl	8003edc <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	2b00      	cmp	r3, #0
 8004158:	db07      	blt.n	800416a <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800415a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415c:	2b00      	cmp	r3, #0
 800415e:	d005      	beq.n	800416c <_PrintInt+0xa8>
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004164:	429a      	cmp	r2, r3
 8004166:	d3ec      	bcc.n	8004142 <_PrintInt+0x7e>
 8004168:	e000      	b.n	800416c <_PrintInt+0xa8>
          break;
 800416a:	46c0      	nop			; (mov r8, r8)
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	2b00      	cmp	r3, #0
 8004172:	db4b      	blt.n	800420c <_PrintInt+0x148>
    if (v < 0) {
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	2b00      	cmp	r3, #0
 8004178:	da08      	bge.n	800418c <_PrintInt+0xc8>
      v = -v;
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	425b      	negs	r3, r3
 800417e:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	212d      	movs	r1, #45	; 0x2d
 8004184:	0018      	movs	r0, r3
 8004186:	f7ff fea9 	bl	8003edc <_StoreChar>
 800418a:	e008      	b.n	800419e <_PrintInt+0xda>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800418c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418e:	2204      	movs	r2, #4
 8004190:	4013      	ands	r3, r2
 8004192:	d004      	beq.n	800419e <_PrintInt+0xda>
      _StoreChar(pBufferDesc, '+');
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	212b      	movs	r1, #43	; 0x2b
 8004198:	0018      	movs	r0, r3
 800419a:	f7ff fe9f 	bl	8003edc <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	db32      	blt.n	800420c <_PrintInt+0x148>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80041a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a8:	2202      	movs	r2, #2
 80041aa:	4013      	ands	r3, r2
 80041ac:	d01f      	beq.n	80041ee <_PrintInt+0x12a>
 80041ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b0:	2201      	movs	r2, #1
 80041b2:	4013      	ands	r3, r2
 80041b4:	d11b      	bne.n	80041ee <_PrintInt+0x12a>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d118      	bne.n	80041ee <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 80041bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d015      	beq.n	80041ee <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80041c2:	e00b      	b.n	80041dc <_PrintInt+0x118>
            FieldWidth--;
 80041c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c6:	3b01      	subs	r3, #1
 80041c8:	62bb      	str	r3, [r7, #40]	; 0x28
            _StoreChar(pBufferDesc, '0');
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2130      	movs	r1, #48	; 0x30
 80041ce:	0018      	movs	r0, r3
 80041d0:	f7ff fe84 	bl	8003edc <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	db07      	blt.n	80041ec <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80041dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d005      	beq.n	80041ee <_PrintInt+0x12a>
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d3ec      	bcc.n	80041c4 <_PrintInt+0x100>
 80041ea:	e000      	b.n	80041ee <_PrintInt+0x12a>
              break;
 80041ec:	46c0      	nop			; (mov r8, r8)
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	db0a      	blt.n	800420c <_PrintInt+0x148>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 80041f6:	68b9      	ldr	r1, [r7, #8]
 80041f8:	683c      	ldr	r4, [r7, #0]
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004200:	9301      	str	r3, [sp, #4]
 8004202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	0023      	movs	r3, r4
 8004208:	f7ff fea8 	bl	8003f5c <_PrintUnsigned>
      }
    }
  }
}
 800420c:	46c0      	nop			; (mov r8, r8)
 800420e:	46bd      	mov	sp, r7
 8004210:	b007      	add	sp, #28
 8004212:	bd90      	pop	{r4, r7, pc}

08004214 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 8004214:	b590      	push	{r4, r7, lr}
 8004216:	b0a3      	sub	sp, #140	; 0x8c
 8004218:	af02      	add	r7, sp, #8
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 8004220:	2150      	movs	r1, #80	; 0x50
 8004222:	187b      	adds	r3, r7, r1
 8004224:	2210      	movs	r2, #16
 8004226:	18ba      	adds	r2, r7, r2
 8004228:	601a      	str	r2, [r3, #0]
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 800422a:	187b      	adds	r3, r7, r1
 800422c:	2240      	movs	r2, #64	; 0x40
 800422e:	605a      	str	r2, [r3, #4]
  BufferDesc.Cnt            = 0u;
 8004230:	187b      	adds	r3, r7, r1
 8004232:	2200      	movs	r2, #0
 8004234:	609a      	str	r2, [r3, #8]
  BufferDesc.RTTBufferIndex = BufferIndex;
 8004236:	187b      	adds	r3, r7, r1
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	611a      	str	r2, [r3, #16]
  BufferDesc.ReturnValue    = 0;
 800423c:	187b      	adds	r3, r7, r1
 800423e:	2200      	movs	r2, #0
 8004240:	60da      	str	r2, [r3, #12]

  do {
    c = *sFormat;
 8004242:	217f      	movs	r1, #127	; 0x7f
 8004244:	187b      	adds	r3, r7, r1
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	7812      	ldrb	r2, [r2, #0]
 800424a:	701a      	strb	r2, [r3, #0]
    sFormat++;
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	3301      	adds	r3, #1
 8004250:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 8004252:	187b      	adds	r3, r7, r1
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d100      	bne.n	800425c <SEGGER_RTT_vprintf+0x48>
 800425a:	e157      	b.n	800450c <SEGGER_RTT_vprintf+0x2f8>
      break;
    }
    if (c == '%') {
 800425c:	187b      	adds	r3, r7, r1
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	2b25      	cmp	r3, #37	; 0x25
 8004262:	d000      	beq.n	8004266 <SEGGER_RTT_vprintf+0x52>
 8004264:	e142      	b.n	80044ec <SEGGER_RTT_vprintf+0x2d8>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004266:	2300      	movs	r3, #0
 8004268:	673b      	str	r3, [r7, #112]	; 0x70
      v = 1;
 800426a:	2301      	movs	r3, #1
 800426c:	67bb      	str	r3, [r7, #120]	; 0x78
      do {
        c = *sFormat;
 800426e:	217f      	movs	r1, #127	; 0x7f
 8004270:	187b      	adds	r3, r7, r1
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	7812      	ldrb	r2, [r2, #0]
 8004276:	701a      	strb	r2, [r3, #0]
        switch (c) {
 8004278:	187b      	adds	r3, r7, r1
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	2b30      	cmp	r3, #48	; 0x30
 800427e:	d010      	beq.n	80042a2 <SEGGER_RTT_vprintf+0x8e>
 8004280:	dc27      	bgt.n	80042d2 <SEGGER_RTT_vprintf+0xbe>
 8004282:	2b2d      	cmp	r3, #45	; 0x2d
 8004284:	d005      	beq.n	8004292 <SEGGER_RTT_vprintf+0x7e>
 8004286:	dc24      	bgt.n	80042d2 <SEGGER_RTT_vprintf+0xbe>
 8004288:	2b23      	cmp	r3, #35	; 0x23
 800428a:	d01a      	beq.n	80042c2 <SEGGER_RTT_vprintf+0xae>
 800428c:	2b2b      	cmp	r3, #43	; 0x2b
 800428e:	d010      	beq.n	80042b2 <SEGGER_RTT_vprintf+0x9e>
 8004290:	e01f      	b.n	80042d2 <SEGGER_RTT_vprintf+0xbe>
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004292:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004294:	2201      	movs	r2, #1
 8004296:	4313      	orrs	r3, r2
 8004298:	673b      	str	r3, [r7, #112]	; 0x70
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	3301      	adds	r3, #1
 800429e:	60bb      	str	r3, [r7, #8]
 80042a0:	e01a      	b.n	80042d8 <SEGGER_RTT_vprintf+0xc4>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80042a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042a4:	2202      	movs	r2, #2
 80042a6:	4313      	orrs	r3, r2
 80042a8:	673b      	str	r3, [r7, #112]	; 0x70
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	3301      	adds	r3, #1
 80042ae:	60bb      	str	r3, [r7, #8]
 80042b0:	e012      	b.n	80042d8 <SEGGER_RTT_vprintf+0xc4>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80042b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042b4:	2204      	movs	r2, #4
 80042b6:	4313      	orrs	r3, r2
 80042b8:	673b      	str	r3, [r7, #112]	; 0x70
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	3301      	adds	r3, #1
 80042be:	60bb      	str	r3, [r7, #8]
 80042c0:	e00a      	b.n	80042d8 <SEGGER_RTT_vprintf+0xc4>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80042c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042c4:	2208      	movs	r2, #8
 80042c6:	4313      	orrs	r3, r2
 80042c8:	673b      	str	r3, [r7, #112]	; 0x70
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	3301      	adds	r3, #1
 80042ce:	60bb      	str	r3, [r7, #8]
 80042d0:	e002      	b.n	80042d8 <SEGGER_RTT_vprintf+0xc4>
        default:  v = 0; break;
 80042d2:	2300      	movs	r3, #0
 80042d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80042d6:	46c0      	nop			; (mov r8, r8)
        }
      } while (v);
 80042d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1c7      	bne.n	800426e <SEGGER_RTT_vprintf+0x5a>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80042de:	2300      	movs	r3, #0
 80042e0:	66fb      	str	r3, [r7, #108]	; 0x6c
      do {
        c = *sFormat;
 80042e2:	217f      	movs	r1, #127	; 0x7f
 80042e4:	187b      	adds	r3, r7, r1
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	7812      	ldrb	r2, [r2, #0]
 80042ea:	701a      	strb	r2, [r3, #0]
        if ((c < '0') || (c > '9')) {
 80042ec:	187b      	adds	r3, r7, r1
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	2b2f      	cmp	r3, #47	; 0x2f
 80042f2:	d912      	bls.n	800431a <SEGGER_RTT_vprintf+0x106>
 80042f4:	187b      	adds	r3, r7, r1
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2b39      	cmp	r3, #57	; 0x39
 80042fa:	d80e      	bhi.n	800431a <SEGGER_RTT_vprintf+0x106>
          break;
        }
        sFormat++;
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	3301      	adds	r3, #1
 8004300:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 8004302:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004304:	0013      	movs	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	189b      	adds	r3, r3, r2
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	001a      	movs	r2, r3
 800430e:	187b      	adds	r3, r7, r1
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	18d3      	adds	r3, r2, r3
 8004314:	3b30      	subs	r3, #48	; 0x30
 8004316:	66fb      	str	r3, [r7, #108]	; 0x6c
        c = *sFormat;
 8004318:	e7e3      	b.n	80042e2 <SEGGER_RTT_vprintf+0xce>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800431a:	2300      	movs	r3, #0
 800431c:	677b      	str	r3, [r7, #116]	; 0x74
      c = *sFormat;
 800431e:	217f      	movs	r1, #127	; 0x7f
 8004320:	187b      	adds	r3, r7, r1
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	7812      	ldrb	r2, [r2, #0]
 8004326:	701a      	strb	r2, [r3, #0]
      if (c == '.') {
 8004328:	187b      	adds	r3, r7, r1
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b2e      	cmp	r3, #46	; 0x2e
 800432e:	d11e      	bne.n	800436e <SEGGER_RTT_vprintf+0x15a>
        sFormat++;
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	3301      	adds	r3, #1
 8004334:	60bb      	str	r3, [r7, #8]
        do {
          c = *sFormat;
 8004336:	217f      	movs	r1, #127	; 0x7f
 8004338:	187b      	adds	r3, r7, r1
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	7812      	ldrb	r2, [r2, #0]
 800433e:	701a      	strb	r2, [r3, #0]
          if ((c < '0') || (c > '9')) {
 8004340:	187b      	adds	r3, r7, r1
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	2b2f      	cmp	r3, #47	; 0x2f
 8004346:	d912      	bls.n	800436e <SEGGER_RTT_vprintf+0x15a>
 8004348:	187b      	adds	r3, r7, r1
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	2b39      	cmp	r3, #57	; 0x39
 800434e:	d80e      	bhi.n	800436e <SEGGER_RTT_vprintf+0x15a>
            break;
          }
          sFormat++;
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	3301      	adds	r3, #1
 8004354:	60bb      	str	r3, [r7, #8]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 8004356:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004358:	0013      	movs	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	189b      	adds	r3, r3, r2
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	001a      	movs	r2, r3
 8004362:	187b      	adds	r3, r7, r1
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	18d3      	adds	r3, r2, r3
 8004368:	3b30      	subs	r3, #48	; 0x30
 800436a:	677b      	str	r3, [r7, #116]	; 0x74
          c = *sFormat;
 800436c:	e7e3      	b.n	8004336 <SEGGER_RTT_vprintf+0x122>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800436e:	237f      	movs	r3, #127	; 0x7f
 8004370:	18fb      	adds	r3, r7, r3
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	7812      	ldrb	r2, [r2, #0]
 8004376:	701a      	strb	r2, [r3, #0]
      do {
        if ((c == 'l') || (c == 'h')) {
 8004378:	227f      	movs	r2, #127	; 0x7f
 800437a:	18bb      	adds	r3, r7, r2
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	2b6c      	cmp	r3, #108	; 0x6c
 8004380:	d003      	beq.n	800438a <SEGGER_RTT_vprintf+0x176>
 8004382:	18bb      	adds	r3, r7, r2
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	2b68      	cmp	r3, #104	; 0x68
 8004388:	d108      	bne.n	800439c <SEGGER_RTT_vprintf+0x188>
          sFormat++;
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	3301      	adds	r3, #1
 800438e:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 8004390:	237f      	movs	r3, #127	; 0x7f
 8004392:	18fb      	adds	r3, r7, r3
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	7812      	ldrb	r2, [r2, #0]
 8004398:	701a      	strb	r2, [r3, #0]
        if ((c == 'l') || (c == 'h')) {
 800439a:	e7ed      	b.n	8004378 <SEGGER_RTT_vprintf+0x164>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800439c:	237f      	movs	r3, #127	; 0x7f
 800439e:	18fb      	adds	r3, r7, r3
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	2b25      	cmp	r3, #37	; 0x25
 80043a4:	d100      	bne.n	80043a8 <SEGGER_RTT_vprintf+0x194>
 80043a6:	e095      	b.n	80044d4 <SEGGER_RTT_vprintf+0x2c0>
 80043a8:	da00      	bge.n	80043ac <SEGGER_RTT_vprintf+0x198>
 80043aa:	e09a      	b.n	80044e2 <SEGGER_RTT_vprintf+0x2ce>
 80043ac:	2b78      	cmp	r3, #120	; 0x78
 80043ae:	dd00      	ble.n	80043b2 <SEGGER_RTT_vprintf+0x19e>
 80043b0:	e097      	b.n	80044e2 <SEGGER_RTT_vprintf+0x2ce>
 80043b2:	2b58      	cmp	r3, #88	; 0x58
 80043b4:	da00      	bge.n	80043b8 <SEGGER_RTT_vprintf+0x1a4>
 80043b6:	e094      	b.n	80044e2 <SEGGER_RTT_vprintf+0x2ce>
 80043b8:	3b58      	subs	r3, #88	; 0x58
 80043ba:	2b20      	cmp	r3, #32
 80043bc:	d900      	bls.n	80043c0 <SEGGER_RTT_vprintf+0x1ac>
 80043be:	e090      	b.n	80044e2 <SEGGER_RTT_vprintf+0x2ce>
 80043c0:	009a      	lsls	r2, r3, #2
 80043c2:	4b63      	ldr	r3, [pc, #396]	; (8004550 <SEGGER_RTT_vprintf+0x33c>)
 80043c4:	18d3      	adds	r3, r2, r3
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	469f      	mov	pc, r3
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	1d19      	adds	r1, r3, #4
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	6011      	str	r1, [r2, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	67bb      	str	r3, [r7, #120]	; 0x78
        c0 = (char)v;
 80043d8:	2167      	movs	r1, #103	; 0x67
 80043da:	187b      	adds	r3, r7, r1
 80043dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80043de:	701a      	strb	r2, [r3, #0]
        _StoreChar(&BufferDesc, c0);
 80043e0:	187b      	adds	r3, r7, r1
 80043e2:	781a      	ldrb	r2, [r3, #0]
 80043e4:	2350      	movs	r3, #80	; 0x50
 80043e6:	18fb      	adds	r3, r7, r3
 80043e8:	0011      	movs	r1, r2
 80043ea:	0018      	movs	r0, r3
 80043ec:	f7ff fd76 	bl	8003edc <_StoreChar>
        break;
 80043f0:	e078      	b.n	80044e4 <SEGGER_RTT_vprintf+0x2d0>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	1d19      	adds	r1, r3, #4
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6011      	str	r1, [r2, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004400:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004402:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004404:	2350      	movs	r3, #80	; 0x50
 8004406:	18f8      	adds	r0, r7, r3
 8004408:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800440a:	9301      	str	r3, [sp, #4]
 800440c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800440e:	9300      	str	r3, [sp, #0]
 8004410:	0013      	movs	r3, r2
 8004412:	220a      	movs	r2, #10
 8004414:	f7ff fe56 	bl	80040c4 <_PrintInt>
        break;
 8004418:	e064      	b.n	80044e4 <SEGGER_RTT_vprintf+0x2d0>
      case 'u':
        v = va_arg(*pParamList, int);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	1d19      	adds	r1, r3, #4
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6011      	str	r1, [r2, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004428:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800442a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800442c:	2350      	movs	r3, #80	; 0x50
 800442e:	18f8      	adds	r0, r7, r3
 8004430:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004432:	9301      	str	r3, [sp, #4]
 8004434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	0013      	movs	r3, r2
 800443a:	220a      	movs	r2, #10
 800443c:	f7ff fd8e 	bl	8003f5c <_PrintUnsigned>
        break;
 8004440:	e050      	b.n	80044e4 <SEGGER_RTT_vprintf+0x2d0>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	1d19      	adds	r1, r3, #4
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	6011      	str	r1, [r2, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004450:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004452:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004454:	2350      	movs	r3, #80	; 0x50
 8004456:	18f8      	adds	r0, r7, r3
 8004458:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800445a:	9301      	str	r3, [sp, #4]
 800445c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	0013      	movs	r3, r2
 8004462:	2210      	movs	r2, #16
 8004464:	f7ff fd7a 	bl	8003f5c <_PrintUnsigned>
        break;
 8004468:	e03c      	b.n	80044e4 <SEGGER_RTT_vprintf+0x2d0>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	1d19      	adds	r1, r3, #4
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	6011      	str	r1, [r2, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	66bb      	str	r3, [r7, #104]	; 0x68
          do {
            c = *s;
 8004478:	217f      	movs	r1, #127	; 0x7f
 800447a:	187b      	adds	r3, r7, r1
 800447c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800447e:	7812      	ldrb	r2, [r2, #0]
 8004480:	701a      	strb	r2, [r3, #0]
            s++;
 8004482:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004484:	3301      	adds	r3, #1
 8004486:	66bb      	str	r3, [r7, #104]	; 0x68
            if (c == '\0') {
 8004488:	187b      	adds	r3, r7, r1
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00c      	beq.n	80044aa <SEGGER_RTT_vprintf+0x296>
              break;
            }
           _StoreChar(&BufferDesc, c);
 8004490:	187b      	adds	r3, r7, r1
 8004492:	781a      	ldrb	r2, [r3, #0]
 8004494:	2450      	movs	r4, #80	; 0x50
 8004496:	193b      	adds	r3, r7, r4
 8004498:	0011      	movs	r1, r2
 800449a:	0018      	movs	r0, r3
 800449c:	f7ff fd1e 	bl	8003edc <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 80044a0:	193b      	adds	r3, r7, r4
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	dae7      	bge.n	8004478 <SEGGER_RTT_vprintf+0x264>
        }
        break;
 80044a8:	e01c      	b.n	80044e4 <SEGGER_RTT_vprintf+0x2d0>
              break;
 80044aa:	46c0      	nop			; (mov r8, r8)
        break;
 80044ac:	e01a      	b.n	80044e4 <SEGGER_RTT_vprintf+0x2d0>
      case 'p':
        v = va_arg(*pParamList, int);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	1d19      	adds	r1, r3, #4
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	6011      	str	r1, [r2, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 80044bc:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80044be:	2350      	movs	r3, #80	; 0x50
 80044c0:	18f8      	adds	r0, r7, r3
 80044c2:	2300      	movs	r3, #0
 80044c4:	9301      	str	r3, [sp, #4]
 80044c6:	2308      	movs	r3, #8
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	2308      	movs	r3, #8
 80044cc:	2210      	movs	r2, #16
 80044ce:	f7ff fd45 	bl	8003f5c <_PrintUnsigned>
        break;
 80044d2:	e007      	b.n	80044e4 <SEGGER_RTT_vprintf+0x2d0>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80044d4:	2350      	movs	r3, #80	; 0x50
 80044d6:	18fb      	adds	r3, r7, r3
 80044d8:	2125      	movs	r1, #37	; 0x25
 80044da:	0018      	movs	r0, r3
 80044dc:	f7ff fcfe 	bl	8003edc <_StoreChar>
        break;
 80044e0:	e000      	b.n	80044e4 <SEGGER_RTT_vprintf+0x2d0>
      default:
        break;
 80044e2:	46c0      	nop			; (mov r8, r8)
      }
      sFormat++;
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	3301      	adds	r3, #1
 80044e8:	60bb      	str	r3, [r7, #8]
 80044ea:	e008      	b.n	80044fe <SEGGER_RTT_vprintf+0x2ea>
    } else {
      _StoreChar(&BufferDesc, c);
 80044ec:	237f      	movs	r3, #127	; 0x7f
 80044ee:	18fb      	adds	r3, r7, r3
 80044f0:	781a      	ldrb	r2, [r3, #0]
 80044f2:	2350      	movs	r3, #80	; 0x50
 80044f4:	18fb      	adds	r3, r7, r3
 80044f6:	0011      	movs	r1, r2
 80044f8:	0018      	movs	r0, r3
 80044fa:	f7ff fcef 	bl	8003edc <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 80044fe:	2350      	movs	r3, #80	; 0x50
 8004500:	18fb      	adds	r3, r7, r3
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	db00      	blt.n	800450a <SEGGER_RTT_vprintf+0x2f6>
 8004508:	e69b      	b.n	8004242 <SEGGER_RTT_vprintf+0x2e>
 800450a:	e000      	b.n	800450e <SEGGER_RTT_vprintf+0x2fa>
      break;
 800450c:	46c0      	nop			; (mov r8, r8)

  if (BufferDesc.ReturnValue > 0) {
 800450e:	2250      	movs	r2, #80	; 0x50
 8004510:	18bb      	adds	r3, r7, r2
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	2b00      	cmp	r3, #0
 8004516:	dd13      	ble.n	8004540 <SEGGER_RTT_vprintf+0x32c>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 8004518:	18bb      	adds	r3, r7, r2
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d007      	beq.n	8004530 <SEGGER_RTT_vprintf+0x31c>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 8004520:	18bb      	adds	r3, r7, r2
 8004522:	689a      	ldr	r2, [r3, #8]
 8004524:	2310      	movs	r3, #16
 8004526:	18f9      	adds	r1, r7, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	0018      	movs	r0, r3
 800452c:	f7ff fc9c 	bl	8003e68 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 8004530:	2150      	movs	r1, #80	; 0x50
 8004532:	187b      	adds	r3, r7, r1
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	187b      	adds	r3, r7, r1
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	18d2      	adds	r2, r2, r3
 800453c:	187b      	adds	r3, r7, r1
 800453e:	60da      	str	r2, [r3, #12]
  }
  return BufferDesc.ReturnValue;
 8004540:	2350      	movs	r3, #80	; 0x50
 8004542:	18fb      	adds	r3, r7, r3
 8004544:	68db      	ldr	r3, [r3, #12]
}
 8004546:	0018      	movs	r0, r3
 8004548:	46bd      	mov	sp, r7
 800454a:	b021      	add	sp, #132	; 0x84
 800454c:	bd90      	pop	{r4, r7, pc}
 800454e:	46c0      	nop			; (mov r8, r8)
 8004550:	0800504c 	.word	0x0800504c

08004554 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 8004554:	b40e      	push	{r1, r2, r3}
 8004556:	b580      	push	{r7, lr}
 8004558:	b085      	sub	sp, #20
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 800455e:	2320      	movs	r3, #32
 8004560:	18fb      	adds	r3, r7, r3
 8004562:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 8004564:	2308      	movs	r3, #8
 8004566:	18fa      	adds	r2, r7, r3
 8004568:	69f9      	ldr	r1, [r7, #28]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	0018      	movs	r0, r3
 800456e:	f7ff fe51 	bl	8004214 <SEGGER_RTT_vprintf>
 8004572:	0003      	movs	r3, r0
 8004574:	60fb      	str	r3, [r7, #12]
  va_end(ParamList);
  return r;
 8004576:	68fb      	ldr	r3, [r7, #12]
}
 8004578:	0018      	movs	r0, r3
 800457a:	46bd      	mov	sp, r7
 800457c:	b005      	add	sp, #20
 800457e:	bc80      	pop	{r7}
 8004580:	bc08      	pop	{r3}
 8004582:	b003      	add	sp, #12
 8004584:	4718      	bx	r3

08004586 <TM1638_StartComunication>:
 ==================================================================================
 */

static inline void
TM1638_StartComunication(TM1638_Handler_t *Handler)
{
 8004586:	b580      	push	{r7, lr}
 8004588:	b082      	sub	sp, #8
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  Handler->StbWrite(0);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	2000      	movs	r0, #0
 8004594:	4798      	blx	r3
}
 8004596:	46c0      	nop			; (mov r8, r8)
 8004598:	46bd      	mov	sp, r7
 800459a:	b002      	add	sp, #8
 800459c:	bd80      	pop	{r7, pc}

0800459e <TM1638_StopComunication>:

static inline void
TM1638_StopComunication(TM1638_Handler_t *Handler)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b082      	sub	sp, #8
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  Handler->StbWrite(1);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	2001      	movs	r0, #1
 80045ac:	4798      	blx	r3
}
 80045ae:	46c0      	nop			; (mov r8, r8)
 80045b0:	46bd      	mov	sp, r7
 80045b2:	b002      	add	sp, #8
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <TM1638_WriteBytes>:

static void
TM1638_WriteBytes(TM1638_Handler_t *Handler,
                  const uint8_t *Data, uint8_t NumOfBytes)
{
 80045b6:	b590      	push	{r4, r7, lr}
 80045b8:	b087      	sub	sp, #28
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	60f8      	str	r0, [r7, #12]
 80045be:	60b9      	str	r1, [r7, #8]
 80045c0:	1dfb      	adds	r3, r7, #7
 80045c2:	701a      	strb	r2, [r3, #0]
  uint8_t i, j, Buff;

  Handler->DioConfigOut();
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	4798      	blx	r3

  for (j = 0; j < NumOfBytes; j++)
 80045ca:	2316      	movs	r3, #22
 80045cc:	18fb      	adds	r3, r7, r3
 80045ce:	2200      	movs	r2, #0
 80045d0:	701a      	strb	r2, [r3, #0]
 80045d2:	e03d      	b.n	8004650 <TM1638_WriteBytes+0x9a>
  {
    for (i = 0, Buff = Data[j]; i < 8; ++i, Buff >>= 1)
 80045d4:	2317      	movs	r3, #23
 80045d6:	18fb      	adds	r3, r7, r3
 80045d8:	2200      	movs	r2, #0
 80045da:	701a      	strb	r2, [r3, #0]
 80045dc:	2316      	movs	r3, #22
 80045de:	18fb      	adds	r3, r7, r3
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	18d2      	adds	r2, r2, r3
 80045e6:	2315      	movs	r3, #21
 80045e8:	18fb      	adds	r3, r7, r3
 80045ea:	7812      	ldrb	r2, [r2, #0]
 80045ec:	701a      	strb	r2, [r3, #0]
 80045ee:	e024      	b.n	800463a <TM1638_WriteBytes+0x84>
    {
      Handler->ClkWrite(0);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	2000      	movs	r0, #0
 80045f6:	4798      	blx	r3
      Handler->DelayUs(1);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	2001      	movs	r0, #1
 80045fe:	4798      	blx	r3
      Handler->DioWrite(Buff & 0x01);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	2415      	movs	r4, #21
 8004606:	193a      	adds	r2, r7, r4
 8004608:	7812      	ldrb	r2, [r2, #0]
 800460a:	2101      	movs	r1, #1
 800460c:	400a      	ands	r2, r1
 800460e:	b2d2      	uxtb	r2, r2
 8004610:	0010      	movs	r0, r2
 8004612:	4798      	blx	r3
      Handler->ClkWrite(1);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	2001      	movs	r0, #1
 800461a:	4798      	blx	r3
      Handler->DelayUs(1);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	2001      	movs	r0, #1
 8004622:	4798      	blx	r3
    for (i = 0, Buff = Data[j]; i < 8; ++i, Buff >>= 1)
 8004624:	2217      	movs	r2, #23
 8004626:	18bb      	adds	r3, r7, r2
 8004628:	18ba      	adds	r2, r7, r2
 800462a:	7812      	ldrb	r2, [r2, #0]
 800462c:	3201      	adds	r2, #1
 800462e:	701a      	strb	r2, [r3, #0]
 8004630:	193b      	adds	r3, r7, r4
 8004632:	193a      	adds	r2, r7, r4
 8004634:	7812      	ldrb	r2, [r2, #0]
 8004636:	0852      	lsrs	r2, r2, #1
 8004638:	701a      	strb	r2, [r3, #0]
 800463a:	2317      	movs	r3, #23
 800463c:	18fb      	adds	r3, r7, r3
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	2b07      	cmp	r3, #7
 8004642:	d9d5      	bls.n	80045f0 <TM1638_WriteBytes+0x3a>
  for (j = 0; j < NumOfBytes; j++)
 8004644:	2116      	movs	r1, #22
 8004646:	187b      	adds	r3, r7, r1
 8004648:	781a      	ldrb	r2, [r3, #0]
 800464a:	187b      	adds	r3, r7, r1
 800464c:	3201      	adds	r2, #1
 800464e:	701a      	strb	r2, [r3, #0]
 8004650:	2316      	movs	r3, #22
 8004652:	18fa      	adds	r2, r7, r3
 8004654:	1dfb      	adds	r3, r7, #7
 8004656:	7812      	ldrb	r2, [r2, #0]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	429a      	cmp	r2, r3
 800465c:	d3ba      	bcc.n	80045d4 <TM1638_WriteBytes+0x1e>
    }
  }
}
 800465e:	46c0      	nop			; (mov r8, r8)
 8004660:	46c0      	nop			; (mov r8, r8)
 8004662:	46bd      	mov	sp, r7
 8004664:	b007      	add	sp, #28
 8004666:	bd90      	pop	{r4, r7, pc}

08004668 <TM1638_ReadBytes>:

static void
TM1638_ReadBytes(TM1638_Handler_t *Handler,
                 uint8_t *Data, uint8_t NumOfBytes)
{
 8004668:	b590      	push	{r4, r7, lr}
 800466a:	b087      	sub	sp, #28
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	1dfb      	adds	r3, r7, #7
 8004674:	701a      	strb	r2, [r3, #0]
  uint8_t i, j, Buff;

  Handler->DioConfigIn();
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	4798      	blx	r3

  Handler->DelayUs(5);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6a1b      	ldr	r3, [r3, #32]
 8004680:	2005      	movs	r0, #5
 8004682:	4798      	blx	r3

  for (j = 0; j < NumOfBytes; j++)
 8004684:	2316      	movs	r3, #22
 8004686:	18fb      	adds	r3, r7, r3
 8004688:	2200      	movs	r2, #0
 800468a:	701a      	strb	r2, [r3, #0]
 800468c:	e047      	b.n	800471e <TM1638_ReadBytes+0xb6>
  {
    for (i = 0, Buff = 0; i < 8; i++)
 800468e:	2317      	movs	r3, #23
 8004690:	18fb      	adds	r3, r7, r3
 8004692:	2200      	movs	r2, #0
 8004694:	701a      	strb	r2, [r3, #0]
 8004696:	2315      	movs	r3, #21
 8004698:	18fb      	adds	r3, r7, r3
 800469a:	2200      	movs	r2, #0
 800469c:	701a      	strb	r2, [r3, #0]
 800469e:	e027      	b.n	80046f0 <TM1638_ReadBytes+0x88>
    {
      Handler->ClkWrite(0);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	2000      	movs	r0, #0
 80046a6:	4798      	blx	r3
      Handler->DelayUs(1);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6a1b      	ldr	r3, [r3, #32]
 80046ac:	2001      	movs	r0, #1
 80046ae:	4798      	blx	r3
      Handler->ClkWrite(1);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	2001      	movs	r0, #1
 80046b6:	4798      	blx	r3
      Buff |= (Handler->DioRead() << i);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	4798      	blx	r3
 80046be:	0003      	movs	r3, r0
 80046c0:	001a      	movs	r2, r3
 80046c2:	2417      	movs	r4, #23
 80046c4:	193b      	adds	r3, r7, r4
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	409a      	lsls	r2, r3
 80046ca:	0013      	movs	r3, r2
 80046cc:	b25a      	sxtb	r2, r3
 80046ce:	2115      	movs	r1, #21
 80046d0:	187b      	adds	r3, r7, r1
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	b25b      	sxtb	r3, r3
 80046d6:	4313      	orrs	r3, r2
 80046d8:	b25a      	sxtb	r2, r3
 80046da:	187b      	adds	r3, r7, r1
 80046dc:	701a      	strb	r2, [r3, #0]
      Handler->DelayUs(1);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	2001      	movs	r0, #1
 80046e4:	4798      	blx	r3
    for (i = 0, Buff = 0; i < 8; i++)
 80046e6:	193b      	adds	r3, r7, r4
 80046e8:	781a      	ldrb	r2, [r3, #0]
 80046ea:	193b      	adds	r3, r7, r4
 80046ec:	3201      	adds	r2, #1
 80046ee:	701a      	strb	r2, [r3, #0]
 80046f0:	2317      	movs	r3, #23
 80046f2:	18fb      	adds	r3, r7, r3
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	2b07      	cmp	r3, #7
 80046f8:	d9d2      	bls.n	80046a0 <TM1638_ReadBytes+0x38>
    }

    Data[j] = Buff;
 80046fa:	2416      	movs	r4, #22
 80046fc:	193b      	adds	r3, r7, r4
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	18d3      	adds	r3, r2, r3
 8004704:	2215      	movs	r2, #21
 8004706:	18ba      	adds	r2, r7, r2
 8004708:	7812      	ldrb	r2, [r2, #0]
 800470a:	701a      	strb	r2, [r3, #0]
    Handler->DelayUs(2);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	2002      	movs	r0, #2
 8004712:	4798      	blx	r3
  for (j = 0; j < NumOfBytes; j++)
 8004714:	193b      	adds	r3, r7, r4
 8004716:	781a      	ldrb	r2, [r3, #0]
 8004718:	193b      	adds	r3, r7, r4
 800471a:	3201      	adds	r2, #1
 800471c:	701a      	strb	r2, [r3, #0]
 800471e:	2316      	movs	r3, #22
 8004720:	18fa      	adds	r2, r7, r3
 8004722:	1dfb      	adds	r3, r7, #7
 8004724:	7812      	ldrb	r2, [r2, #0]
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	429a      	cmp	r2, r3
 800472a:	d3b0      	bcc.n	800468e <TM1638_ReadBytes+0x26>
  }
}
 800472c:	46c0      	nop			; (mov r8, r8)
 800472e:	46c0      	nop			; (mov r8, r8)
 8004730:	46bd      	mov	sp, r7
 8004732:	b007      	add	sp, #28
 8004734:	bd90      	pop	{r4, r7, pc}

08004736 <TM1638_SetMultipleDisplayRegister>:

static void
TM1638_SetMultipleDisplayRegister(TM1638_Handler_t *Handler,
                                  const uint8_t *DigitData,
                                  uint8_t StartAddr, uint8_t Count)
{
 8004736:	b590      	push	{r4, r7, lr}
 8004738:	b087      	sub	sp, #28
 800473a:	af00      	add	r7, sp, #0
 800473c:	60f8      	str	r0, [r7, #12]
 800473e:	60b9      	str	r1, [r7, #8]
 8004740:	0019      	movs	r1, r3
 8004742:	1dfb      	adds	r3, r7, #7
 8004744:	701a      	strb	r2, [r3, #0]
 8004746:	1dbb      	adds	r3, r7, #6
 8004748:	1c0a      	adds	r2, r1, #0
 800474a:	701a      	strb	r2, [r3, #0]
  uint8_t Data = DataInstructionSet | WriteDataToRegister |
 800474c:	2417      	movs	r4, #23
 800474e:	193b      	adds	r3, r7, r4
 8004750:	2240      	movs	r2, #64	; 0x40
 8004752:	701a      	strb	r2, [r3, #0]
                 AutoAddressAdd | NormalMode;

  TM1638_StartComunication(Handler);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	0018      	movs	r0, r3
 8004758:	f7ff ff15 	bl	8004586 <TM1638_StartComunication>
  TM1638_WriteBytes(Handler, &Data, 1);
 800475c:	1939      	adds	r1, r7, r4
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2201      	movs	r2, #1
 8004762:	0018      	movs	r0, r3
 8004764:	f7ff ff27 	bl	80045b6 <TM1638_WriteBytes>
  TM1638_StopComunication(Handler);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	0018      	movs	r0, r3
 800476c:	f7ff ff17 	bl	800459e <TM1638_StopComunication>

  Data = AddressInstructionSet | StartAddr;
 8004770:	1dfb      	adds	r3, r7, #7
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	2240      	movs	r2, #64	; 0x40
 8004776:	4252      	negs	r2, r2
 8004778:	4313      	orrs	r3, r2
 800477a:	b2da      	uxtb	r2, r3
 800477c:	193b      	adds	r3, r7, r4
 800477e:	701a      	strb	r2, [r3, #0]

  TM1638_StartComunication(Handler);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	0018      	movs	r0, r3
 8004784:	f7ff feff 	bl	8004586 <TM1638_StartComunication>
  TM1638_WriteBytes(Handler, &Data, 1);
 8004788:	1939      	adds	r1, r7, r4
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2201      	movs	r2, #1
 800478e:	0018      	movs	r0, r3
 8004790:	f7ff ff11 	bl	80045b6 <TM1638_WriteBytes>
  TM1638_WriteBytes(Handler, DigitData, Count);
 8004794:	1dbb      	adds	r3, r7, #6
 8004796:	781a      	ldrb	r2, [r3, #0]
 8004798:	68b9      	ldr	r1, [r7, #8]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	0018      	movs	r0, r3
 800479e:	f7ff ff0a 	bl	80045b6 <TM1638_WriteBytes>
  TM1638_StopComunication(Handler);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	0018      	movs	r0, r3
 80047a6:	f7ff fefa 	bl	800459e <TM1638_StopComunication>
}
 80047aa:	46c0      	nop			; (mov r8, r8)
 80047ac:	46bd      	mov	sp, r7
 80047ae:	b007      	add	sp, #28
 80047b0:	bd90      	pop	{r4, r7, pc}

080047b2 <TM1638_ScanKeyRegs>:

static void
TM1638_ScanKeyRegs(TM1638_Handler_t *Handler, uint8_t *KeyRegs)
{
 80047b2:	b590      	push	{r4, r7, lr}
 80047b4:	b085      	sub	sp, #20
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
 80047ba:	6039      	str	r1, [r7, #0]
  uint8_t Data = DataInstructionSet | ReadKeyScanData |
 80047bc:	240f      	movs	r4, #15
 80047be:	193b      	adds	r3, r7, r4
 80047c0:	2242      	movs	r2, #66	; 0x42
 80047c2:	701a      	strb	r2, [r3, #0]
                 AutoAddressAdd | NormalMode;

  TM1638_StartComunication(Handler);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	0018      	movs	r0, r3
 80047c8:	f7ff fedd 	bl	8004586 <TM1638_StartComunication>
  TM1638_WriteBytes(Handler, &Data, 1);
 80047cc:	1939      	adds	r1, r7, r4
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	0018      	movs	r0, r3
 80047d4:	f7ff feef 	bl	80045b6 <TM1638_WriteBytes>
  TM1638_ReadBytes(Handler, KeyRegs, 4);
 80047d8:	6839      	ldr	r1, [r7, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2204      	movs	r2, #4
 80047de:	0018      	movs	r0, r3
 80047e0:	f7ff ff42 	bl	8004668 <TM1638_ReadBytes>
  TM1638_StopComunication(Handler);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	0018      	movs	r0, r3
 80047e8:	f7ff fed9 	bl	800459e <TM1638_StopComunication>
}
 80047ec:	46c0      	nop			; (mov r8, r8)
 80047ee:	46bd      	mov	sp, r7
 80047f0:	b005      	add	sp, #20
 80047f2:	bd90      	pop	{r4, r7, pc}

080047f4 <TM1638_Init>:
 * @retval TM1638_Result_t
 *         - TM1638_OK: Operation was successful.
 */
TM1638_Result_t
TM1638_Init(TM1638_Handler_t *Handler, uint8_t Type)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	000a      	movs	r2, r1
 80047fe:	1cfb      	adds	r3, r7, #3
 8004800:	701a      	strb	r2, [r3, #0]
  Handler->DisplayType = TM1638DisplayTypeComCathode;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2224      	movs	r2, #36	; 0x24
 8004806:	2100      	movs	r1, #0
 8004808:	5499      	strb	r1, [r3, r2]

#if TM1638_CONFIG_SUPPORT_COM_ANODE
  for (uint8_t i = 0; i < 16; i++)
 800480a:	230f      	movs	r3, #15
 800480c:	18fb      	adds	r3, r7, r3
 800480e:	2200      	movs	r2, #0
 8004810:	701a      	strb	r2, [r3, #0]
 8004812:	e00d      	b.n	8004830 <TM1638_Init+0x3c>
  {
    Handler->DisplayRegister[i] = 0;
 8004814:	200f      	movs	r0, #15
 8004816:	183b      	adds	r3, r7, r0
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	2125      	movs	r1, #37	; 0x25
 800481e:	18d3      	adds	r3, r2, r3
 8004820:	185b      	adds	r3, r3, r1
 8004822:	2200      	movs	r2, #0
 8004824:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < 16; i++)
 8004826:	183b      	adds	r3, r7, r0
 8004828:	781a      	ldrb	r2, [r3, #0]
 800482a:	183b      	adds	r3, r7, r0
 800482c:	3201      	adds	r2, #1
 800482e:	701a      	strb	r2, [r3, #0]
 8004830:	230f      	movs	r3, #15
 8004832:	18fb      	adds	r3, r7, r3
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	2b0f      	cmp	r3, #15
 8004838:	d9ec      	bls.n	8004814 <TM1638_Init+0x20>
  }
  if (Type == TM1638DisplayTypeComCathode)
 800483a:	1cfb      	adds	r3, r7, #3
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d104      	bne.n	800484c <TM1638_Init+0x58>
    Handler->DisplayType = TM1638DisplayTypeComCathode;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2224      	movs	r2, #36	; 0x24
 8004846:	2100      	movs	r1, #0
 8004848:	5499      	strb	r1, [r3, r2]
 800484a:	e003      	b.n	8004854 <TM1638_Init+0x60>
  else
    Handler->DisplayType = TM1638DisplayTypeComAnode;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2224      	movs	r2, #36	; 0x24
 8004850:	2101      	movs	r1, #1
 8004852:	5499      	strb	r1, [r3, r2]
#endif

  Handler->PlatformInit();
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4798      	blx	r3
  return TM1638_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	0018      	movs	r0, r3
 800485e:	46bd      	mov	sp, r7
 8004860:	b004      	add	sp, #16
 8004862:	bd80      	pop	{r7, pc}

08004864 <TM1638_ConfigDisplay>:
 *         - TM1638_OK: Operation was successful
 */
TM1638_Result_t
TM1638_ConfigDisplay(TM1638_Handler_t *Handler,
                     uint8_t Brightness, uint8_t DisplayState)
{
 8004864:	b590      	push	{r4, r7, lr}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	0008      	movs	r0, r1
 800486e:	0011      	movs	r1, r2
 8004870:	1cfb      	adds	r3, r7, #3
 8004872:	1c02      	adds	r2, r0, #0
 8004874:	701a      	strb	r2, [r3, #0]
 8004876:	1cbb      	adds	r3, r7, #2
 8004878:	1c0a      	adds	r2, r1, #0
 800487a:	701a      	strb	r2, [r3, #0]
  uint8_t Data = DisplayControlInstructionSet;
 800487c:	210f      	movs	r1, #15
 800487e:	187b      	adds	r3, r7, r1
 8004880:	2280      	movs	r2, #128	; 0x80
 8004882:	701a      	strb	r2, [r3, #0]
  Data |= Brightness & 0x07;
 8004884:	1cfb      	adds	r3, r7, #3
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	b25b      	sxtb	r3, r3
 800488a:	2207      	movs	r2, #7
 800488c:	4013      	ands	r3, r2
 800488e:	b25a      	sxtb	r2, r3
 8004890:	187b      	adds	r3, r7, r1
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	b25b      	sxtb	r3, r3
 8004896:	4313      	orrs	r3, r2
 8004898:	b25b      	sxtb	r3, r3
 800489a:	b2da      	uxtb	r2, r3
 800489c:	187b      	adds	r3, r7, r1
 800489e:	701a      	strb	r2, [r3, #0]
  Data |= (DisplayState) ? (ShowTurnOn) : (ShowTurnOff);
 80048a0:	1cbb      	adds	r3, r7, #2
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <TM1638_ConfigDisplay+0x48>
 80048a8:	2308      	movs	r3, #8
 80048aa:	e000      	b.n	80048ae <TM1638_ConfigDisplay+0x4a>
 80048ac:	2300      	movs	r3, #0
 80048ae:	210f      	movs	r1, #15
 80048b0:	187a      	adds	r2, r7, r1
 80048b2:	7812      	ldrb	r2, [r2, #0]
 80048b4:	b252      	sxtb	r2, r2
 80048b6:	4313      	orrs	r3, r2
 80048b8:	b25b      	sxtb	r3, r3
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	000c      	movs	r4, r1
 80048be:	187b      	adds	r3, r7, r1
 80048c0:	701a      	strb	r2, [r3, #0]

  TM1638_StartComunication(Handler);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	0018      	movs	r0, r3
 80048c6:	f7ff fe5e 	bl	8004586 <TM1638_StartComunication>
  TM1638_WriteBytes(Handler, &Data, 1);
 80048ca:	1939      	adds	r1, r7, r4
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	0018      	movs	r0, r3
 80048d2:	f7ff fe70 	bl	80045b6 <TM1638_WriteBytes>
  TM1638_StopComunication(Handler);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	0018      	movs	r0, r3
 80048da:	f7ff fe60 	bl	800459e <TM1638_StopComunication>

  return TM1638_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	0018      	movs	r0, r3
 80048e2:	46bd      	mov	sp, r7
 80048e4:	b005      	add	sp, #20
 80048e6:	bd90      	pop	{r4, r7, pc}

080048e8 <TM1638_SetSingleDigit>:
 *         - TM1638_OK: Operation was successful
 */
TM1638_Result_t
TM1638_SetSingleDigit(TM1638_Handler_t *Handler,
                      uint8_t DigitData, uint8_t DigitPos)
{ 
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	0008      	movs	r0, r1
 80048f2:	0011      	movs	r1, r2
 80048f4:	1cfb      	adds	r3, r7, #3
 80048f6:	1c02      	adds	r2, r0, #0
 80048f8:	701a      	strb	r2, [r3, #0]
 80048fa:	1cbb      	adds	r3, r7, #2
 80048fc:	1c0a      	adds	r2, r1, #0
 80048fe:	701a      	strb	r2, [r3, #0]
  if (Handler->DisplayType == TM1638DisplayTypeComCathode)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2224      	movs	r2, #36	; 0x24
 8004904:	5c9b      	ldrb	r3, [r3, r2]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d107      	bne.n	800491a <TM1638_SetSingleDigit+0x32>
    TM1638_SetMultipleDisplayRegister(Handler, &DigitData, DigitPos, 1);
 800490a:	1cbb      	adds	r3, r7, #2
 800490c:	781a      	ldrb	r2, [r3, #0]
 800490e:	1cf9      	adds	r1, r7, #3
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	2301      	movs	r3, #1
 8004914:	f7ff ff0f 	bl	8004736 <TM1638_SetMultipleDisplayRegister>
 8004918:	e006      	b.n	8004928 <TM1638_SetSingleDigit+0x40>
#if (TM1638_CONFIG_SUPPORT_COM_ANODE)
  else
    TM1638_SetMultipleDigit(Handler, &DigitData, DigitPos, 1);
 800491a:	1cbb      	adds	r3, r7, #2
 800491c:	781a      	ldrb	r2, [r3, #0]
 800491e:	1cf9      	adds	r1, r7, #3
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	2301      	movs	r3, #1
 8004924:	f000 f805 	bl	8004932 <TM1638_SetMultipleDigit>
#endif
  return TM1638_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	0018      	movs	r0, r3
 800492c:	46bd      	mov	sp, r7
 800492e:	b002      	add	sp, #8
 8004930:	bd80      	pop	{r7, pc}

08004932 <TM1638_SetMultipleDigit>:
 *         - TM1638_OK: Operation was successful
 */
TM1638_Result_t
TM1638_SetMultipleDigit(TM1638_Handler_t *Handler, const uint8_t *DigitData,
                        uint8_t StartAddr, uint8_t Count)
{
 8004932:	b590      	push	{r4, r7, lr}
 8004934:	b087      	sub	sp, #28
 8004936:	af00      	add	r7, sp, #0
 8004938:	60f8      	str	r0, [r7, #12]
 800493a:	60b9      	str	r1, [r7, #8]
 800493c:	0019      	movs	r1, r3
 800493e:	1dfb      	adds	r3, r7, #7
 8004940:	701a      	strb	r2, [r3, #0]
 8004942:	1dbb      	adds	r3, r7, #6
 8004944:	1c0a      	adds	r2, r1, #0
 8004946:	701a      	strb	r2, [r3, #0]
  uint8_t Shift = 0;
 8004948:	2317      	movs	r3, #23
 800494a:	18fb      	adds	r3, r7, r3
 800494c:	2200      	movs	r2, #0
 800494e:	701a      	strb	r2, [r3, #0]
  uint8_t DigitDataBuff = 0;
 8004950:	2316      	movs	r3, #22
 8004952:	18fb      	adds	r3, r7, r3
 8004954:	2200      	movs	r2, #0
 8004956:	701a      	strb	r2, [r3, #0]
  uint8_t i = 0, j = 0;
 8004958:	2315      	movs	r3, #21
 800495a:	18fb      	adds	r3, r7, r3
 800495c:	2200      	movs	r2, #0
 800495e:	701a      	strb	r2, [r3, #0]
 8004960:	2314      	movs	r3, #20
 8004962:	18fb      	adds	r3, r7, r3
 8004964:	2200      	movs	r2, #0
 8004966:	701a      	strb	r2, [r3, #0]

  if (Handler->DisplayType == TM1638DisplayTypeComCathode)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2224      	movs	r2, #36	; 0x24
 800496c:	5c9b      	ldrb	r3, [r3, r2]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d109      	bne.n	8004986 <TM1638_SetMultipleDigit+0x54>
    TM1638_SetMultipleDisplayRegister(Handler, DigitData, StartAddr, Count);
 8004972:	1dbb      	adds	r3, r7, #6
 8004974:	781c      	ldrb	r4, [r3, #0]
 8004976:	1dfb      	adds	r3, r7, #7
 8004978:	781a      	ldrb	r2, [r3, #0]
 800497a:	68b9      	ldr	r1, [r7, #8]
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	0023      	movs	r3, r4
 8004980:	f7ff fed9 	bl	8004736 <TM1638_SetMultipleDisplayRegister>
 8004984:	e0ab      	b.n	8004ade <TM1638_SetMultipleDigit+0x1ac>
#if (TM1638_CONFIG_SUPPORT_COM_ANODE)
  else
  {
    for (j = 0; j < Count; j++)
 8004986:	2314      	movs	r3, #20
 8004988:	18fb      	adds	r3, r7, r3
 800498a:	2200      	movs	r2, #0
 800498c:	701a      	strb	r2, [r3, #0]
 800498e:	e096      	b.n	8004abe <TM1638_SetMultipleDigit+0x18c>
    {
      DigitDataBuff = DigitData[j];
 8004990:	2114      	movs	r1, #20
 8004992:	187b      	adds	r3, r7, r1
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	18d2      	adds	r2, r2, r3
 800499a:	2316      	movs	r3, #22
 800499c:	18fb      	adds	r3, r7, r3
 800499e:	7812      	ldrb	r2, [r2, #0]
 80049a0:	701a      	strb	r2, [r3, #0]

      if ((j + StartAddr) >= 0 && (j + StartAddr) <= 7)
 80049a2:	187b      	adds	r3, r7, r1
 80049a4:	781a      	ldrb	r2, [r3, #0]
 80049a6:	1dfb      	adds	r3, r7, #7
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	18d3      	adds	r3, r2, r3
 80049ac:	2b07      	cmp	r3, #7
 80049ae:	dc0c      	bgt.n	80049ca <TM1638_SetMultipleDigit+0x98>
      {
        Shift = j + StartAddr;
 80049b0:	2317      	movs	r3, #23
 80049b2:	18fb      	adds	r3, r7, r3
 80049b4:	1879      	adds	r1, r7, r1
 80049b6:	1dfa      	adds	r2, r7, #7
 80049b8:	7809      	ldrb	r1, [r1, #0]
 80049ba:	7812      	ldrb	r2, [r2, #0]
 80049bc:	188a      	adds	r2, r1, r2
 80049be:	701a      	strb	r2, [r3, #0]
        i = 0;
 80049c0:	2315      	movs	r3, #21
 80049c2:	18fb      	adds	r3, r7, r3
 80049c4:	2200      	movs	r2, #0
 80049c6:	701a      	strb	r2, [r3, #0]
 80049c8:	e06e      	b.n	8004aa8 <TM1638_SetMultipleDigit+0x176>
      }
      else if ((j + StartAddr) == 8 || (j + StartAddr) == 9)
 80049ca:	2114      	movs	r1, #20
 80049cc:	187b      	adds	r3, r7, r1
 80049ce:	781a      	ldrb	r2, [r3, #0]
 80049d0:	1dfb      	adds	r3, r7, #7
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	18d3      	adds	r3, r2, r3
 80049d6:	2b08      	cmp	r3, #8
 80049d8:	d006      	beq.n	80049e8 <TM1638_SetMultipleDigit+0xb6>
 80049da:	187b      	adds	r3, r7, r1
 80049dc:	781a      	ldrb	r2, [r3, #0]
 80049de:	1dfb      	adds	r3, r7, #7
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	18d3      	adds	r3, r2, r3
 80049e4:	2b09      	cmp	r3, #9
 80049e6:	d10f      	bne.n	8004a08 <TM1638_SetMultipleDigit+0xd6>
      {
        Shift = (j + StartAddr) - 8;
 80049e8:	2314      	movs	r3, #20
 80049ea:	18fa      	adds	r2, r7, r3
 80049ec:	1dfb      	adds	r3, r7, #7
 80049ee:	7812      	ldrb	r2, [r2, #0]
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	18d3      	adds	r3, r2, r3
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	2317      	movs	r3, #23
 80049f8:	18fb      	adds	r3, r7, r3
 80049fa:	3a08      	subs	r2, #8
 80049fc:	701a      	strb	r2, [r3, #0]
        i = 1;
 80049fe:	2315      	movs	r3, #21
 8004a00:	18fb      	adds	r3, r7, r3
 8004a02:	2201      	movs	r2, #1
 8004a04:	701a      	strb	r2, [r3, #0]
 8004a06:	e003      	b.n	8004a10 <TM1638_SetMultipleDigit+0xde>
      }
      else
      {
        i = 16;
 8004a08:	2315      	movs	r3, #21
 8004a0a:	18fb      	adds	r3, r7, r3
 8004a0c:	2210      	movs	r2, #16
 8004a0e:	701a      	strb	r2, [r3, #0]
      }

      for (; i < 16; i += 2, DigitDataBuff >>= 1)
 8004a10:	e04a      	b.n	8004aa8 <TM1638_SetMultipleDigit+0x176>
      {
        if (DigitDataBuff & 0x01)
 8004a12:	2316      	movs	r3, #22
 8004a14:	18fb      	adds	r3, r7, r3
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	d01b      	beq.n	8004a56 <TM1638_SetMultipleDigit+0x124>
          Handler->DisplayRegister[i] |= (1 << Shift);
 8004a1e:	2015      	movs	r0, #21
 8004a20:	183b      	adds	r3, r7, r0
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	2125      	movs	r1, #37	; 0x25
 8004a28:	18d3      	adds	r3, r2, r3
 8004a2a:	185b      	adds	r3, r3, r1
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	b25a      	sxtb	r2, r3
 8004a30:	2317      	movs	r3, #23
 8004a32:	18fb      	adds	r3, r7, r3
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	2101      	movs	r1, #1
 8004a38:	4099      	lsls	r1, r3
 8004a3a:	000b      	movs	r3, r1
 8004a3c:	b25b      	sxtb	r3, r3
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	b25a      	sxtb	r2, r3
 8004a42:	183b      	adds	r3, r7, r0
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	b2d0      	uxtb	r0, r2
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	2125      	movs	r1, #37	; 0x25
 8004a4c:	18d3      	adds	r3, r2, r3
 8004a4e:	185b      	adds	r3, r3, r1
 8004a50:	1c02      	adds	r2, r0, #0
 8004a52:	701a      	strb	r2, [r3, #0]
 8004a54:	e01c      	b.n	8004a90 <TM1638_SetMultipleDigit+0x15e>
        else
          Handler->DisplayRegister[i] &= ~(1 << Shift);
 8004a56:	2015      	movs	r0, #21
 8004a58:	183b      	adds	r3, r7, r0
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	2125      	movs	r1, #37	; 0x25
 8004a60:	18d3      	adds	r3, r2, r3
 8004a62:	185b      	adds	r3, r3, r1
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	b25b      	sxtb	r3, r3
 8004a68:	2217      	movs	r2, #23
 8004a6a:	18ba      	adds	r2, r7, r2
 8004a6c:	7812      	ldrb	r2, [r2, #0]
 8004a6e:	2101      	movs	r1, #1
 8004a70:	4091      	lsls	r1, r2
 8004a72:	000a      	movs	r2, r1
 8004a74:	b252      	sxtb	r2, r2
 8004a76:	43d2      	mvns	r2, r2
 8004a78:	b252      	sxtb	r2, r2
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	b25a      	sxtb	r2, r3
 8004a7e:	183b      	adds	r3, r7, r0
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	b2d0      	uxtb	r0, r2
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	2125      	movs	r1, #37	; 0x25
 8004a88:	18d3      	adds	r3, r2, r3
 8004a8a:	185b      	adds	r3, r3, r1
 8004a8c:	1c02      	adds	r2, r0, #0
 8004a8e:	701a      	strb	r2, [r3, #0]
      for (; i < 16; i += 2, DigitDataBuff >>= 1)
 8004a90:	2215      	movs	r2, #21
 8004a92:	18bb      	adds	r3, r7, r2
 8004a94:	18ba      	adds	r2, r7, r2
 8004a96:	7812      	ldrb	r2, [r2, #0]
 8004a98:	3202      	adds	r2, #2
 8004a9a:	701a      	strb	r2, [r3, #0]
 8004a9c:	2216      	movs	r2, #22
 8004a9e:	18bb      	adds	r3, r7, r2
 8004aa0:	18ba      	adds	r2, r7, r2
 8004aa2:	7812      	ldrb	r2, [r2, #0]
 8004aa4:	0852      	lsrs	r2, r2, #1
 8004aa6:	701a      	strb	r2, [r3, #0]
 8004aa8:	2315      	movs	r3, #21
 8004aaa:	18fb      	adds	r3, r7, r3
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	2b0f      	cmp	r3, #15
 8004ab0:	d9af      	bls.n	8004a12 <TM1638_SetMultipleDigit+0xe0>
    for (j = 0; j < Count; j++)
 8004ab2:	2114      	movs	r1, #20
 8004ab4:	187b      	adds	r3, r7, r1
 8004ab6:	781a      	ldrb	r2, [r3, #0]
 8004ab8:	187b      	adds	r3, r7, r1
 8004aba:	3201      	adds	r2, #1
 8004abc:	701a      	strb	r2, [r3, #0]
 8004abe:	2314      	movs	r3, #20
 8004ac0:	18fa      	adds	r2, r7, r3
 8004ac2:	1dbb      	adds	r3, r7, #6
 8004ac4:	7812      	ldrb	r2, [r2, #0]
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d200      	bcs.n	8004ace <TM1638_SetMultipleDigit+0x19c>
 8004acc:	e760      	b.n	8004990 <TM1638_SetMultipleDigit+0x5e>
      }
    }
    TM1638_SetMultipleDisplayRegister(Handler, Handler->DisplayRegister, 0, 16);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	3325      	adds	r3, #37	; 0x25
 8004ad2:	0019      	movs	r1, r3
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	2310      	movs	r3, #16
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f7ff fe2c 	bl	8004736 <TM1638_SetMultipleDisplayRegister>
  }
#endif

  return TM1638_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	b007      	add	sp, #28
 8004ae6:	bd90      	pop	{r4, r7, pc}

08004ae8 <TM1638_SetSingleDigit_HEX>:
 *         - TM1638_OK: Operation was successful
 */
TM1638_Result_t
TM1638_SetSingleDigit_HEX(TM1638_Handler_t *Handler,
                          uint8_t DigitData, uint8_t DigitPos)
{
 8004ae8:	b590      	push	{r4, r7, lr}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	0008      	movs	r0, r1
 8004af2:	0011      	movs	r1, r2
 8004af4:	1cfb      	adds	r3, r7, #3
 8004af6:	1c02      	adds	r2, r0, #0
 8004af8:	701a      	strb	r2, [r3, #0]
 8004afa:	1cbb      	adds	r3, r7, #2
 8004afc:	1c0a      	adds	r2, r1, #0
 8004afe:	701a      	strb	r2, [r3, #0]
  uint8_t DigitDataHEX = 0;
 8004b00:	200f      	movs	r0, #15
 8004b02:	183b      	adds	r3, r7, r0
 8004b04:	2200      	movs	r2, #0
 8004b06:	701a      	strb	r2, [r3, #0]
  uint8_t DecimalPoint = DigitData & 0x80;
 8004b08:	240e      	movs	r4, #14
 8004b0a:	193b      	adds	r3, r7, r4
 8004b0c:	1cfa      	adds	r2, r7, #3
 8004b0e:	7812      	ldrb	r2, [r2, #0]
 8004b10:	217f      	movs	r1, #127	; 0x7f
 8004b12:	438a      	bics	r2, r1
 8004b14:	701a      	strb	r2, [r3, #0]

  DigitData &= 0x7F;
 8004b16:	1cfb      	adds	r3, r7, #3
 8004b18:	1cfa      	adds	r2, r7, #3
 8004b1a:	7812      	ldrb	r2, [r2, #0]
 8004b1c:	217f      	movs	r1, #127	; 0x7f
 8004b1e:	400a      	ands	r2, r1
 8004b20:	701a      	strb	r2, [r3, #0]

  if (DigitData <= 15)
 8004b22:	1cfb      	adds	r3, r7, #3
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	2b0f      	cmp	r3, #15
 8004b28:	d809      	bhi.n	8004b3e <TM1638_SetSingleDigit_HEX+0x56>
  {
    DigitDataHEX = HexTo7Seg[DigitData] | DecimalPoint;
 8004b2a:	1cfb      	adds	r3, r7, #3
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	4a2d      	ldr	r2, [pc, #180]	; (8004be4 <TM1638_SetSingleDigit_HEX+0xfc>)
 8004b30:	5cd1      	ldrb	r1, [r2, r3]
 8004b32:	183b      	adds	r3, r7, r0
 8004b34:	193a      	adds	r2, r7, r4
 8004b36:	7812      	ldrb	r2, [r2, #0]
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	701a      	strb	r2, [r3, #0]
 8004b3c:	e044      	b.n	8004bc8 <TM1638_SetSingleDigit_HEX+0xe0>
  }
  else
  {
    switch (DigitData)
 8004b3e:	1cfb      	adds	r3, r7, #3
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	3b41      	subs	r3, #65	; 0x41
 8004b44:	2b25      	cmp	r3, #37	; 0x25
 8004b46:	d83a      	bhi.n	8004bbe <TM1638_SetSingleDigit_HEX+0xd6>
 8004b48:	009a      	lsls	r2, r3, #2
 8004b4a:	4b27      	ldr	r3, [pc, #156]	; (8004be8 <TM1638_SetSingleDigit_HEX+0x100>)
 8004b4c:	18d3      	adds	r3, r2, r3
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	469f      	mov	pc, r3
    {
    case 'A':
    case 'a':
      DigitDataHEX = HexTo7Seg[0x0A] | DecimalPoint;
 8004b52:	2177      	movs	r1, #119	; 0x77
 8004b54:	230f      	movs	r3, #15
 8004b56:	18fb      	adds	r3, r7, r3
 8004b58:	220e      	movs	r2, #14
 8004b5a:	18ba      	adds	r2, r7, r2
 8004b5c:	7812      	ldrb	r2, [r2, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	701a      	strb	r2, [r3, #0]
      break;
 8004b62:	e031      	b.n	8004bc8 <TM1638_SetSingleDigit_HEX+0xe0>

    case 'B':
    case 'b':
      DigitDataHEX = HexTo7Seg[0x0B] | DecimalPoint;
 8004b64:	217c      	movs	r1, #124	; 0x7c
 8004b66:	230f      	movs	r3, #15
 8004b68:	18fb      	adds	r3, r7, r3
 8004b6a:	220e      	movs	r2, #14
 8004b6c:	18ba      	adds	r2, r7, r2
 8004b6e:	7812      	ldrb	r2, [r2, #0]
 8004b70:	430a      	orrs	r2, r1
 8004b72:	701a      	strb	r2, [r3, #0]
      break;
 8004b74:	e028      	b.n	8004bc8 <TM1638_SetSingleDigit_HEX+0xe0>

    case 'C':
    case 'c':
      DigitDataHEX = HexTo7Seg[0x0C] | DecimalPoint;
 8004b76:	2139      	movs	r1, #57	; 0x39
 8004b78:	230f      	movs	r3, #15
 8004b7a:	18fb      	adds	r3, r7, r3
 8004b7c:	220e      	movs	r2, #14
 8004b7e:	18ba      	adds	r2, r7, r2
 8004b80:	7812      	ldrb	r2, [r2, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	701a      	strb	r2, [r3, #0]
      break;
 8004b86:	e01f      	b.n	8004bc8 <TM1638_SetSingleDigit_HEX+0xe0>

    case 'D':
    case 'd':
      DigitDataHEX = HexTo7Seg[0x0D] | DecimalPoint;
 8004b88:	215e      	movs	r1, #94	; 0x5e
 8004b8a:	230f      	movs	r3, #15
 8004b8c:	18fb      	adds	r3, r7, r3
 8004b8e:	220e      	movs	r2, #14
 8004b90:	18ba      	adds	r2, r7, r2
 8004b92:	7812      	ldrb	r2, [r2, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	701a      	strb	r2, [r3, #0]
      break;
 8004b98:	e016      	b.n	8004bc8 <TM1638_SetSingleDigit_HEX+0xe0>

    case 'E':
    case 'e':
      DigitDataHEX = HexTo7Seg[0x0E] | DecimalPoint;
 8004b9a:	2179      	movs	r1, #121	; 0x79
 8004b9c:	230f      	movs	r3, #15
 8004b9e:	18fb      	adds	r3, r7, r3
 8004ba0:	220e      	movs	r2, #14
 8004ba2:	18ba      	adds	r2, r7, r2
 8004ba4:	7812      	ldrb	r2, [r2, #0]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	701a      	strb	r2, [r3, #0]
      break;
 8004baa:	e00d      	b.n	8004bc8 <TM1638_SetSingleDigit_HEX+0xe0>

    case 'F':
    case 'f':
      DigitDataHEX = HexTo7Seg[0x0F] | DecimalPoint;
 8004bac:	2171      	movs	r1, #113	; 0x71
 8004bae:	230f      	movs	r3, #15
 8004bb0:	18fb      	adds	r3, r7, r3
 8004bb2:	220e      	movs	r2, #14
 8004bb4:	18ba      	adds	r2, r7, r2
 8004bb6:	7812      	ldrb	r2, [r2, #0]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	701a      	strb	r2, [r3, #0]
      break;
 8004bbc:	e004      	b.n	8004bc8 <TM1638_SetSingleDigit_HEX+0xe0>

    default:
      DigitDataHEX = 0;
 8004bbe:	230f      	movs	r3, #15
 8004bc0:	18fb      	adds	r3, r7, r3
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	701a      	strb	r2, [r3, #0]
      break;
 8004bc6:	46c0      	nop			; (mov r8, r8)
    }
  }

  return TM1638_SetSingleDigit(Handler, DigitDataHEX, DigitPos);
 8004bc8:	1cbb      	adds	r3, r7, #2
 8004bca:	781a      	ldrb	r2, [r3, #0]
 8004bcc:	230f      	movs	r3, #15
 8004bce:	18fb      	adds	r3, r7, r3
 8004bd0:	7819      	ldrb	r1, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	0018      	movs	r0, r3
 8004bd6:	f7ff fe87 	bl	80048e8 <TM1638_SetSingleDigit>
 8004bda:	0003      	movs	r3, r0
}
 8004bdc:	0018      	movs	r0, r3
 8004bde:	46bd      	mov	sp, r7
 8004be0:	b005      	add	sp, #20
 8004be2:	bd90      	pop	{r4, r7, pc}
 8004be4:	080050e0 	.word	0x080050e0
 8004be8:	08005108 	.word	0x08005108

08004bec <TM1638_ScanKeys>:
 * @retval TM1638_Result_t
 *         - TM1638_OK: Operation was successful
 */
TM1638_Result_t
TM1638_ScanKeys(TM1638_Handler_t *Handler, uint32_t *Keys)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint8_t KeyRegs[4];
  uint32_t KeysBuff = 0;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	617b      	str	r3, [r7, #20]
  uint8_t Kn = 0x01;
 8004bfa:	2313      	movs	r3, #19
 8004bfc:	18fb      	adds	r3, r7, r3
 8004bfe:	2201      	movs	r2, #1
 8004c00:	701a      	strb	r2, [r3, #0]

  TM1638_ScanKeyRegs(Handler, KeyRegs);
 8004c02:	230c      	movs	r3, #12
 8004c04:	18fa      	adds	r2, r7, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	0011      	movs	r1, r2
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	f7ff fdd1 	bl	80047b2 <TM1638_ScanKeyRegs>

  for (uint8_t i = 0; i < 3; i++)
 8004c10:	2312      	movs	r3, #18
 8004c12:	18fb      	adds	r3, r7, r3
 8004c14:	2200      	movs	r2, #0
 8004c16:	701a      	strb	r2, [r3, #0]
 8004c18:	e048      	b.n	8004cac <TM1638_ScanKeys+0xc0>
  {
    for (int8_t i = 3; i >= 0; i--)
 8004c1a:	2311      	movs	r3, #17
 8004c1c:	18fb      	adds	r3, r7, r3
 8004c1e:	2203      	movs	r2, #3
 8004c20:	701a      	strb	r2, [r3, #0]
 8004c22:	e032      	b.n	8004c8a <TM1638_ScanKeys+0x9e>
    {
      KeysBuff <<= 1;
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	005b      	lsls	r3, r3, #1
 8004c28:	617b      	str	r3, [r7, #20]

      if (KeyRegs[i] & (Kn << 4))
 8004c2a:	2311      	movs	r3, #17
 8004c2c:	18fb      	adds	r3, r7, r3
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	b25b      	sxtb	r3, r3
 8004c32:	220c      	movs	r2, #12
 8004c34:	18ba      	adds	r2, r7, r2
 8004c36:	5cd3      	ldrb	r3, [r2, r3]
 8004c38:	001a      	movs	r2, r3
 8004c3a:	2313      	movs	r3, #19
 8004c3c:	18fb      	adds	r3, r7, r3
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	011b      	lsls	r3, r3, #4
 8004c42:	4013      	ands	r3, r2
 8004c44:	d003      	beq.n	8004c4e <TM1638_ScanKeys+0x62>
        KeysBuff |= 1;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	617b      	str	r3, [r7, #20]

      KeysBuff <<= 1;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	005b      	lsls	r3, r3, #1
 8004c52:	617b      	str	r3, [r7, #20]

      if (KeyRegs[i] & Kn)
 8004c54:	2311      	movs	r3, #17
 8004c56:	18fb      	adds	r3, r7, r3
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	b25b      	sxtb	r3, r3
 8004c5c:	220c      	movs	r2, #12
 8004c5e:	18ba      	adds	r2, r7, r2
 8004c60:	5cd3      	ldrb	r3, [r2, r3]
 8004c62:	2213      	movs	r2, #19
 8004c64:	18ba      	adds	r2, r7, r2
 8004c66:	7812      	ldrb	r2, [r2, #0]
 8004c68:	4013      	ands	r3, r2
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d003      	beq.n	8004c78 <TM1638_ScanKeys+0x8c>
        KeysBuff |= 1;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	2201      	movs	r2, #1
 8004c74:	4313      	orrs	r3, r2
 8004c76:	617b      	str	r3, [r7, #20]
    for (int8_t i = 3; i >= 0; i--)
 8004c78:	2111      	movs	r1, #17
 8004c7a:	187b      	adds	r3, r7, r1
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	b25b      	sxtb	r3, r3
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	3b01      	subs	r3, #1
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	187b      	adds	r3, r7, r1
 8004c88:	701a      	strb	r2, [r3, #0]
 8004c8a:	2311      	movs	r3, #17
 8004c8c:	18fb      	adds	r3, r7, r3
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	2b7f      	cmp	r3, #127	; 0x7f
 8004c92:	d9c7      	bls.n	8004c24 <TM1638_ScanKeys+0x38>
    }

    Kn <<= 1;
 8004c94:	2313      	movs	r3, #19
 8004c96:	18fa      	adds	r2, r7, r3
 8004c98:	18fb      	adds	r3, r7, r3
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	18db      	adds	r3, r3, r3
 8004c9e:	7013      	strb	r3, [r2, #0]
  for (uint8_t i = 0; i < 3; i++)
 8004ca0:	2112      	movs	r1, #18
 8004ca2:	187b      	adds	r3, r7, r1
 8004ca4:	781a      	ldrb	r2, [r3, #0]
 8004ca6:	187b      	adds	r3, r7, r1
 8004ca8:	3201      	adds	r2, #1
 8004caa:	701a      	strb	r2, [r3, #0]
 8004cac:	2312      	movs	r3, #18
 8004cae:	18fb      	adds	r3, r7, r3
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d9b1      	bls.n	8004c1a <TM1638_ScanKeys+0x2e>
  }

  *Keys = KeysBuff;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	601a      	str	r2, [r3, #0]

  return TM1638_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	0018      	movs	r0, r3
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	b006      	add	sp, #24
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <TM1638_SetGPIO_OUT>:
 ==================================================================================
 */

static void
TM1638_SetGPIO_OUT(GPIO_TypeDef *GPIOx, uint32_t GPIO_Pin)
{
 8004cc6:	b590      	push	{r4, r7, lr}
 8004cc8:	b089      	sub	sp, #36	; 0x24
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
 8004cce:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cd0:	240c      	movs	r4, #12
 8004cd2:	193b      	adds	r3, r7, r4
 8004cd4:	0018      	movs	r0, r3
 8004cd6:	2314      	movs	r3, #20
 8004cd8:	001a      	movs	r2, r3
 8004cda:	2100      	movs	r1, #0
 8004cdc:	f000 f937 	bl	8004f4e <memset>
  GPIO_InitStruct.Pin = GPIO_Pin;
 8004ce0:	0021      	movs	r1, r4
 8004ce2:	187b      	adds	r3, r7, r1
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ce8:	187b      	adds	r3, r7, r1
 8004cea:	2201      	movs	r2, #1
 8004cec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cee:	187b      	adds	r3, r7, r1
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cf4:	187b      	adds	r3, r7, r1
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8004cfa:	187a      	adds	r2, r7, r1
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	0011      	movs	r1, r2
 8004d00:	0018      	movs	r0, r3
 8004d02:	f7fc fa71 	bl	80011e8 <HAL_GPIO_Init>
}
 8004d06:	46c0      	nop			; (mov r8, r8)
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	b009      	add	sp, #36	; 0x24
 8004d0c:	bd90      	pop	{r4, r7, pc}

08004d0e <TM1638_SetGPIO_IN_PU>:
									
static void
TM1638_SetGPIO_IN_PU(GPIO_TypeDef *GPIOx, uint32_t GPIO_Pin)
{
 8004d0e:	b590      	push	{r4, r7, lr}
 8004d10:	b089      	sub	sp, #36	; 0x24
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
 8004d16:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d18:	240c      	movs	r4, #12
 8004d1a:	193b      	adds	r3, r7, r4
 8004d1c:	0018      	movs	r0, r3
 8004d1e:	2314      	movs	r3, #20
 8004d20:	001a      	movs	r2, r3
 8004d22:	2100      	movs	r1, #0
 8004d24:	f000 f913 	bl	8004f4e <memset>
  GPIO_InitStruct.Pin = GPIO_Pin;
 8004d28:	0021      	movs	r1, r4
 8004d2a:	187b      	adds	r3, r7, r1
 8004d2c:	683a      	ldr	r2, [r7, #0]
 8004d2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d30:	187b      	adds	r3, r7, r1
 8004d32:	2200      	movs	r2, #0
 8004d34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d36:	187b      	adds	r3, r7, r1
 8004d38:	2201      	movs	r2, #1
 8004d3a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d3c:	187b      	adds	r3, r7, r1
 8004d3e:	2200      	movs	r2, #0
 8004d40:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8004d42:	187a      	adds	r2, r7, r1
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	0011      	movs	r1, r2
 8004d48:	0018      	movs	r0, r3
 8004d4a:	f7fc fa4d 	bl	80011e8 <HAL_GPIO_Init>
}
 8004d4e:	46c0      	nop			; (mov r8, r8)
 8004d50:	46bd      	mov	sp, r7
 8004d52:	b009      	add	sp, #36	; 0x24
 8004d54:	bd90      	pop	{r4, r7, pc}
	...

08004d58 <TM1638_PlatformInit>:


static void
TM1638_PlatformInit(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
  TM1638_SetGPIO_OUT(TM1638_CLK_GPIO, TM1638_CLK_PIN);
 8004d5c:	4b08      	ldr	r3, [pc, #32]	; (8004d80 <TM1638_PlatformInit+0x28>)
 8004d5e:	2120      	movs	r1, #32
 8004d60:	0018      	movs	r0, r3
 8004d62:	f7ff ffb0 	bl	8004cc6 <TM1638_SetGPIO_OUT>
  TM1638_SetGPIO_OUT(TM1638_STB_GPIO, TM1638_STB_PIN);
 8004d66:	4b06      	ldr	r3, [pc, #24]	; (8004d80 <TM1638_PlatformInit+0x28>)
 8004d68:	2140      	movs	r1, #64	; 0x40
 8004d6a:	0018      	movs	r0, r3
 8004d6c:	f7ff ffab 	bl	8004cc6 <TM1638_SetGPIO_OUT>
  TM1638_SetGPIO_OUT(TM1638_DIO_GPIO, TM1638_DIO_PIN);
 8004d70:	4b03      	ldr	r3, [pc, #12]	; (8004d80 <TM1638_PlatformInit+0x28>)
 8004d72:	2110      	movs	r1, #16
 8004d74:	0018      	movs	r0, r3
 8004d76:	f7ff ffa6 	bl	8004cc6 <TM1638_SetGPIO_OUT>
}
 8004d7a:	46c0      	nop			; (mov r8, r8)
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	48000400 	.word	0x48000400

08004d84 <TM1638_PlatformDeInit>:

static void
TM1638_PlatformDeInit(void)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	af00      	add	r7, sp, #0
}
 8004d88:	46c0      	nop			; (mov r8, r8)
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
	...

08004d90 <TM1638_DioConfigOut>:

static void
TM1638_DioConfigOut(void)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	af00      	add	r7, sp, #0
  TM1638_SetGPIO_OUT(TM1638_DIO_GPIO, TM1638_DIO_PIN);
 8004d94:	4b03      	ldr	r3, [pc, #12]	; (8004da4 <TM1638_DioConfigOut+0x14>)
 8004d96:	2110      	movs	r1, #16
 8004d98:	0018      	movs	r0, r3
 8004d9a:	f7ff ff94 	bl	8004cc6 <TM1638_SetGPIO_OUT>
}
 8004d9e:	46c0      	nop			; (mov r8, r8)
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	48000400 	.word	0x48000400

08004da8 <TM1638_DioConfigIn>:

static void
TM1638_DioConfigIn(void)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	af00      	add	r7, sp, #0
  TM1638_SetGPIO_IN_PU(TM1638_DIO_GPIO, TM1638_DIO_PIN);
 8004dac:	4b03      	ldr	r3, [pc, #12]	; (8004dbc <TM1638_DioConfigIn+0x14>)
 8004dae:	2110      	movs	r1, #16
 8004db0:	0018      	movs	r0, r3
 8004db2:	f7ff ffac 	bl	8004d0e <TM1638_SetGPIO_IN_PU>
}
 8004db6:	46c0      	nop			; (mov r8, r8)
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	48000400 	.word	0x48000400

08004dc0 <TM1638_DioWrite>:

static void
TM1638_DioWrite(uint8_t Level)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	0002      	movs	r2, r0
 8004dc8:	1dfb      	adds	r3, r7, #7
 8004dca:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(TM1638_DIO_GPIO, TM1638_DIO_PIN, Level);
 8004dcc:	1dfb      	adds	r3, r7, #7
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	4804      	ldr	r0, [pc, #16]	; (8004de4 <TM1638_DioWrite+0x24>)
 8004dd2:	001a      	movs	r2, r3
 8004dd4:	2110      	movs	r1, #16
 8004dd6:	f7fc fb94 	bl	8001502 <HAL_GPIO_WritePin>
}
 8004dda:	46c0      	nop			; (mov r8, r8)
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	b002      	add	sp, #8
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	46c0      	nop			; (mov r8, r8)
 8004de4:	48000400 	.word	0x48000400

08004de8 <TM1638_DioRead>:

static uint8_t
TM1638_DioRead(void)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(TM1638_DIO_GPIO, TM1638_DIO_PIN);
 8004dec:	4b04      	ldr	r3, [pc, #16]	; (8004e00 <TM1638_DioRead+0x18>)
 8004dee:	2110      	movs	r1, #16
 8004df0:	0018      	movs	r0, r3
 8004df2:	f7fc fb69 	bl	80014c8 <HAL_GPIO_ReadPin>
 8004df6:	0003      	movs	r3, r0
}
 8004df8:	0018      	movs	r0, r3
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	46c0      	nop			; (mov r8, r8)
 8004e00:	48000400 	.word	0x48000400

08004e04 <TM1638_ClkWrite>:

static void
TM1638_ClkWrite(uint8_t Level)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	0002      	movs	r2, r0
 8004e0c:	1dfb      	adds	r3, r7, #7
 8004e0e:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(TM1638_CLK_GPIO, TM1638_CLK_PIN, Level);
 8004e10:	1dfb      	adds	r3, r7, #7
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	4804      	ldr	r0, [pc, #16]	; (8004e28 <TM1638_ClkWrite+0x24>)
 8004e16:	001a      	movs	r2, r3
 8004e18:	2120      	movs	r1, #32
 8004e1a:	f7fc fb72 	bl	8001502 <HAL_GPIO_WritePin>
}
 8004e1e:	46c0      	nop			; (mov r8, r8)
 8004e20:	46bd      	mov	sp, r7
 8004e22:	b002      	add	sp, #8
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	46c0      	nop			; (mov r8, r8)
 8004e28:	48000400 	.word	0x48000400

08004e2c <TM1638_StbWrite>:

static void
TM1638_StbWrite(uint8_t Level)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	0002      	movs	r2, r0
 8004e34:	1dfb      	adds	r3, r7, #7
 8004e36:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(TM1638_STB_GPIO, TM1638_STB_PIN, Level);
 8004e38:	1dfb      	adds	r3, r7, #7
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	4804      	ldr	r0, [pc, #16]	; (8004e50 <TM1638_StbWrite+0x24>)
 8004e3e:	001a      	movs	r2, r3
 8004e40:	2140      	movs	r1, #64	; 0x40
 8004e42:	f7fc fb5e 	bl	8001502 <HAL_GPIO_WritePin>
}
 8004e46:	46c0      	nop			; (mov r8, r8)
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	b002      	add	sp, #8
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	46c0      	nop			; (mov r8, r8)
 8004e50:	48000400 	.word	0x48000400

08004e54 <TM1638_DelayUs>:

static void
TM1638_DelayUs(uint8_t Delay)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	0002      	movs	r2, r0
 8004e5c:	1dfb      	adds	r3, r7, #7
 8004e5e:	701a      	strb	r2, [r3, #0]
  // TODO: Implement a proper delay function. This one is not accurate.
  for (uint32_t DelayCounter = 0; DelayCounter < 100 * Delay; DelayCounter++)
 8004e60:	2300      	movs	r3, #0
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	e002      	b.n	8004e6c <TM1638_DelayUs+0x18>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	60fb      	str	r3, [r7, #12]
 8004e6c:	1dfb      	adds	r3, r7, #7
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	2264      	movs	r2, #100	; 0x64
 8004e72:	4353      	muls	r3, r2
 8004e74:	001a      	movs	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d3f4      	bcc.n	8004e66 <TM1638_DelayUs+0x12>
    DelayCounter = DelayCounter;
}
 8004e7c:	46c0      	nop			; (mov r8, r8)
 8004e7e:	46c0      	nop			; (mov r8, r8)
 8004e80:	46bd      	mov	sp, r7
 8004e82:	b004      	add	sp, #16
 8004e84:	bd80      	pop	{r7, pc}
	...

08004e88 <TM1638_Platform_Init>:
 * @param  Handler: Pointer to handler
 * @retval None
 */
void
TM1638_Platform_Init(TM1638_Handler_t *Handler)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  Handler->PlatformInit = TM1638_PlatformInit;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a0f      	ldr	r2, [pc, #60]	; (8004ed0 <TM1638_Platform_Init+0x48>)
 8004e94:	601a      	str	r2, [r3, #0]
  Handler->PlatformDeInit = TM1638_PlatformDeInit;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a0e      	ldr	r2, [pc, #56]	; (8004ed4 <TM1638_Platform_Init+0x4c>)
 8004e9a:	605a      	str	r2, [r3, #4]
  Handler->DioConfigOut = TM1638_DioConfigOut;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a0e      	ldr	r2, [pc, #56]	; (8004ed8 <TM1638_Platform_Init+0x50>)
 8004ea0:	609a      	str	r2, [r3, #8]
  Handler->DioConfigIn = TM1638_DioConfigIn;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a0d      	ldr	r2, [pc, #52]	; (8004edc <TM1638_Platform_Init+0x54>)
 8004ea6:	60da      	str	r2, [r3, #12]
  Handler->DioWrite = TM1638_DioWrite;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a0d      	ldr	r2, [pc, #52]	; (8004ee0 <TM1638_Platform_Init+0x58>)
 8004eac:	611a      	str	r2, [r3, #16]
  Handler->DioRead = TM1638_DioRead;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a0c      	ldr	r2, [pc, #48]	; (8004ee4 <TM1638_Platform_Init+0x5c>)
 8004eb2:	615a      	str	r2, [r3, #20]
  Handler->ClkWrite = TM1638_ClkWrite;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a0c      	ldr	r2, [pc, #48]	; (8004ee8 <TM1638_Platform_Init+0x60>)
 8004eb8:	619a      	str	r2, [r3, #24]
  Handler->StbWrite = TM1638_StbWrite;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a0b      	ldr	r2, [pc, #44]	; (8004eec <TM1638_Platform_Init+0x64>)
 8004ebe:	61da      	str	r2, [r3, #28]
  Handler->DelayUs = TM1638_DelayUs;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a0b      	ldr	r2, [pc, #44]	; (8004ef0 <TM1638_Platform_Init+0x68>)
 8004ec4:	621a      	str	r2, [r3, #32]
}
 8004ec6:	46c0      	nop			; (mov r8, r8)
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	b002      	add	sp, #8
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	46c0      	nop			; (mov r8, r8)
 8004ed0:	08004d59 	.word	0x08004d59
 8004ed4:	08004d85 	.word	0x08004d85
 8004ed8:	08004d91 	.word	0x08004d91
 8004edc:	08004da9 	.word	0x08004da9
 8004ee0:	08004dc1 	.word	0x08004dc1
 8004ee4:	08004de9 	.word	0x08004de9
 8004ee8:	08004e05 	.word	0x08004e05
 8004eec:	08004e2d 	.word	0x08004e2d
 8004ef0:	08004e55 	.word	0x08004e55

08004ef4 <__libc_init_array>:
 8004ef4:	b570      	push	{r4, r5, r6, lr}
 8004ef6:	2600      	movs	r6, #0
 8004ef8:	4d0c      	ldr	r5, [pc, #48]	; (8004f2c <__libc_init_array+0x38>)
 8004efa:	4c0d      	ldr	r4, [pc, #52]	; (8004f30 <__libc_init_array+0x3c>)
 8004efc:	1b64      	subs	r4, r4, r5
 8004efe:	10a4      	asrs	r4, r4, #2
 8004f00:	42a6      	cmp	r6, r4
 8004f02:	d109      	bne.n	8004f18 <__libc_init_array+0x24>
 8004f04:	2600      	movs	r6, #0
 8004f06:	f000 f82b 	bl	8004f60 <_init>
 8004f0a:	4d0a      	ldr	r5, [pc, #40]	; (8004f34 <__libc_init_array+0x40>)
 8004f0c:	4c0a      	ldr	r4, [pc, #40]	; (8004f38 <__libc_init_array+0x44>)
 8004f0e:	1b64      	subs	r4, r4, r5
 8004f10:	10a4      	asrs	r4, r4, #2
 8004f12:	42a6      	cmp	r6, r4
 8004f14:	d105      	bne.n	8004f22 <__libc_init_array+0x2e>
 8004f16:	bd70      	pop	{r4, r5, r6, pc}
 8004f18:	00b3      	lsls	r3, r6, #2
 8004f1a:	58eb      	ldr	r3, [r5, r3]
 8004f1c:	4798      	blx	r3
 8004f1e:	3601      	adds	r6, #1
 8004f20:	e7ee      	b.n	8004f00 <__libc_init_array+0xc>
 8004f22:	00b3      	lsls	r3, r6, #2
 8004f24:	58eb      	ldr	r3, [r5, r3]
 8004f26:	4798      	blx	r3
 8004f28:	3601      	adds	r6, #1
 8004f2a:	e7f2      	b.n	8004f12 <__libc_init_array+0x1e>
 8004f2c:	080051a0 	.word	0x080051a0
 8004f30:	080051a0 	.word	0x080051a0
 8004f34:	080051a0 	.word	0x080051a0
 8004f38:	080051a4 	.word	0x080051a4

08004f3c <memcpy>:
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	b510      	push	{r4, lr}
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d100      	bne.n	8004f46 <memcpy+0xa>
 8004f44:	bd10      	pop	{r4, pc}
 8004f46:	5ccc      	ldrb	r4, [r1, r3]
 8004f48:	54c4      	strb	r4, [r0, r3]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	e7f8      	b.n	8004f40 <memcpy+0x4>

08004f4e <memset>:
 8004f4e:	0003      	movs	r3, r0
 8004f50:	1882      	adds	r2, r0, r2
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d100      	bne.n	8004f58 <memset+0xa>
 8004f56:	4770      	bx	lr
 8004f58:	7019      	strb	r1, [r3, #0]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	e7f9      	b.n	8004f52 <memset+0x4>
	...

08004f60 <_init>:
 8004f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f62:	46c0      	nop			; (mov r8, r8)
 8004f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f66:	bc08      	pop	{r3}
 8004f68:	469e      	mov	lr, r3
 8004f6a:	4770      	bx	lr

08004f6c <_fini>:
 8004f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6e:	46c0      	nop			; (mov r8, r8)
 8004f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f72:	bc08      	pop	{r3}
 8004f74:	469e      	mov	lr, r3
 8004f76:	4770      	bx	lr
