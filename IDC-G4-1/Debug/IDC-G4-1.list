
IDC-G4-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054e4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ec  080055a4  080055a4  000155a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005890  08005890  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005890  08005890  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005890  08005890  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005890  08005890  00015890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005894  08005894  00015894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005898  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000760  20000078  08005910  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007d8  08005910  000207d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f612  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000220e  00000000  00000000  0002f6b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  000318c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d30  00000000  00000000  000326d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011211  00000000  00000000  00033408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001046c  00000000  00000000  00044619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00066f65  00000000  00000000  00054a85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bb9ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039c8  00000000  00000000  000bba3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800558c 	.word	0x0800558c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	0800558c 	.word	0x0800558c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800041e:	f000 fcc1 	bl	8000da4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000422:	f000 f8ef 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000426:	f000 fa15 	bl	8000854 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800042a:	f000 f9a5 	bl	8000778 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800042e:	f000 f9e1 	bl	80007f4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000432:	f000 f949 	bl	80006c8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  TM1638_Platform_Init(&Handler);
 8000436:	4b6a      	ldr	r3, [pc, #424]	; (80005e0 <main+0x1c8>)
 8000438:	0018      	movs	r0, r3
 800043a:	f004 f9d9 	bl	80047f0 <TM1638_Platform_Init>
  TM1638_Init(&Handler, TM1638DisplayTypeComAnode);
 800043e:	4b68      	ldr	r3, [pc, #416]	; (80005e0 <main+0x1c8>)
 8000440:	2101      	movs	r1, #1
 8000442:	0018      	movs	r0, r3
 8000444:	f003 fe89 	bl	800415a <TM1638_Init>
  TM1638_ConfigDisplay(&Handler, 4, TM1638DisplayStateON);
 8000448:	4b65      	ldr	r3, [pc, #404]	; (80005e0 <main+0x1c8>)
 800044a:	2201      	movs	r2, #1
 800044c:	2104      	movs	r1, #4
 800044e:	0018      	movs	r0, r3
 8000450:	f003 febb 	bl	80041ca <TM1638_ConfigDisplay>

  // 使能定时器TIM3的更新中
  __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);
 8000454:	4b63      	ldr	r3, [pc, #396]	; (80005e4 <main+0x1cc>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	68da      	ldr	r2, [r3, #12]
 800045a:	4b62      	ldr	r3, [pc, #392]	; (80005e4 <main+0x1cc>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	2101      	movs	r1, #1
 8000460:	430a      	orrs	r2, r1
 8000462:	60da      	str	r2, [r3, #12]
  // 启动定时器TIM3，开始计
  HAL_TIM_Base_Start_IT(&htim3);
 8000464:	4b5f      	ldr	r3, [pc, #380]	; (80005e4 <main+0x1cc>)
 8000466:	0018      	movs	r0, r3
 8000468:	f001 fdea 	bl	8002040 <HAL_TIM_Base_Start_IT>
//
//     memset(rx_buf, 0, sizeof(rx_buf)); // 清空缓冲准备下一次接�?????



      TM1638_ScanKeys(&Handler, Keys);
 800046c:	4b5e      	ldr	r3, [pc, #376]	; (80005e8 <main+0x1d0>)
 800046e:	681a      	ldr	r2, [r3, #0]
 8000470:	4b5b      	ldr	r3, [pc, #364]	; (80005e0 <main+0x1c8>)
 8000472:	0011      	movs	r1, r2
 8000474:	0018      	movs	r0, r3
 8000476:	f004 f86d 	bl	8004554 <TM1638_ScanKeys>

    // �????? 16 位二进制形式打印按键�?????
    SEGGER_RTT_WriteString(0, "Scanned key value (16-bit binary): ");
 800047a:	4b5c      	ldr	r3, [pc, #368]	; (80005ec <main+0x1d4>)
 800047c:	0019      	movs	r1, r3
 800047e:	2000      	movs	r0, #0
 8000480:	f003 fcce 	bl	8003e20 <SEGGER_RTT_WriteString>

    for (int i = 15; i >= 0; i--) {
 8000484:	230f      	movs	r3, #15
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	e012      	b.n	80004b0 <main+0x98>
        SEGGER_RTT_PutChar(0, (*Keys & (1 << i)) ? '1' : '0');
 800048a:	4b57      	ldr	r3, [pc, #348]	; (80005e8 <main+0x1d0>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	2101      	movs	r1, #1
 8000492:	687a      	ldr	r2, [r7, #4]
 8000494:	4091      	lsls	r1, r2
 8000496:	000a      	movs	r2, r1
 8000498:	4013      	ands	r3, r2
 800049a:	d001      	beq.n	80004a0 <main+0x88>
 800049c:	2331      	movs	r3, #49	; 0x31
 800049e:	e000      	b.n	80004a2 <main+0x8a>
 80004a0:	2330      	movs	r3, #48	; 0x30
 80004a2:	0019      	movs	r1, r3
 80004a4:	2000      	movs	r0, #0
 80004a6:	f003 fcd1 	bl	8003e4c <SEGGER_RTT_PutChar>
    for (int i = 15; i >= 0; i--) {
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	3b01      	subs	r3, #1
 80004ae:	607b      	str	r3, [r7, #4]
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	dae9      	bge.n	800048a <main+0x72>
    }
    SEGGER_RTT_WriteString(0, "\n");
 80004b6:	4b4e      	ldr	r3, [pc, #312]	; (80005f0 <main+0x1d8>)
 80004b8:	0019      	movs	r1, r3
 80004ba:	2000      	movs	r0, #0
 80004bc:	f003 fcb0 	bl	8003e20 <SEGGER_RTT_WriteString>

    // 判断按键第一位是否按�?????
    if (*Keys & 0x0001) {
 80004c0:	4b49      	ldr	r3, [pc, #292]	; (80005e8 <main+0x1d0>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	2201      	movs	r2, #1
 80004c8:	4013      	ands	r3, r2
 80004ca:	d00a      	beq.n	80004e2 <main+0xca>
        // 若按下，数码管第�?????位显�????? 7
        TM1638_SetSingleDigit_HEX(&Handler, 7, 0);
 80004cc:	4b44      	ldr	r3, [pc, #272]	; (80005e0 <main+0x1c8>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	2107      	movs	r1, #7
 80004d2:	0018      	movs	r0, r3
 80004d4:	f003 ffbc 	bl	8004450 <TM1638_SetSingleDigit_HEX>
        HAL_Delay(800);
 80004d8:	23c8      	movs	r3, #200	; 0xc8
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	0018      	movs	r0, r3
 80004de:	f000 fcc5 	bl	8000e6c <HAL_Delay>
    }

    // 判断按键第一位是否按�?????
    if (*Keys & 0x0002) {
 80004e2:	4b41      	ldr	r3, [pc, #260]	; (80005e8 <main+0x1d0>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	2202      	movs	r2, #2
 80004ea:	4013      	ands	r3, r2
 80004ec:	d00a      	beq.n	8000504 <main+0xec>
        // 若按下，数码管第�?????位显�????? 7
        TM1638_SetSingleDigit_HEX(&Handler, 1, 1);
 80004ee:	4b3c      	ldr	r3, [pc, #240]	; (80005e0 <main+0x1c8>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	2101      	movs	r1, #1
 80004f4:	0018      	movs	r0, r3
 80004f6:	f003 ffab 	bl	8004450 <TM1638_SetSingleDigit_HEX>
        HAL_Delay(800);
 80004fa:	23c8      	movs	r3, #200	; 0xc8
 80004fc:	009b      	lsls	r3, r3, #2
 80004fe:	0018      	movs	r0, r3
 8000500:	f000 fcb4 	bl	8000e6c <HAL_Delay>
    //        TM1638_SetSingleDigit_HEX(&Handler, 0, i);
    //    }


    // 检查是否接收到有效的 $GNRMC 语句
    if (gnrmcReceived) {
 8000504:	4b3b      	ldr	r3, [pc, #236]	; (80005f4 <main+0x1dc>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d065      	beq.n	80005d8 <main+0x1c0>
        // 转换为东八区时间
        hours = (hours + 8) % 24;
 800050c:	4b3a      	ldr	r3, [pc, #232]	; (80005f8 <main+0x1e0>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	3308      	adds	r3, #8
 8000512:	2118      	movs	r1, #24
 8000514:	0018      	movs	r0, r3
 8000516:	f7ff ff79 	bl	800040c <__aeabi_idivmod>
 800051a:	000b      	movs	r3, r1
 800051c:	001a      	movs	r2, r3
 800051e:	4b36      	ldr	r3, [pc, #216]	; (80005f8 <main+0x1e0>)
 8000520:	601a      	str	r2, [r3, #0]

        // 将时间显示在数码管后四位，修正显示顺序
        TM1638_SetSingleDigit_HEX(&Handler, minutes % 10, 4);  // 分钟个位
 8000522:	4b36      	ldr	r3, [pc, #216]	; (80005fc <main+0x1e4>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	210a      	movs	r1, #10
 8000528:	0018      	movs	r0, r3
 800052a:	f7ff ff6f 	bl	800040c <__aeabi_idivmod>
 800052e:	000b      	movs	r3, r1
 8000530:	b2d9      	uxtb	r1, r3
 8000532:	4b2b      	ldr	r3, [pc, #172]	; (80005e0 <main+0x1c8>)
 8000534:	2204      	movs	r2, #4
 8000536:	0018      	movs	r0, r3
 8000538:	f003 ff8a 	bl	8004450 <TM1638_SetSingleDigit_HEX>
        TM1638_SetSingleDigit_HEX(&Handler, minutes / 10, 5);  // 分钟十位
 800053c:	4b2f      	ldr	r3, [pc, #188]	; (80005fc <main+0x1e4>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	210a      	movs	r1, #10
 8000542:	0018      	movs	r0, r3
 8000544:	f7ff fe7c 	bl	8000240 <__divsi3>
 8000548:	0003      	movs	r3, r0
 800054a:	b2d9      	uxtb	r1, r3
 800054c:	4b24      	ldr	r3, [pc, #144]	; (80005e0 <main+0x1c8>)
 800054e:	2205      	movs	r2, #5
 8000550:	0018      	movs	r0, r3
 8000552:	f003 ff7d 	bl	8004450 <TM1638_SetSingleDigit_HEX>
        TM1638_SetSingleDigit_HEX(&Handler, hours % 10, 6);  // 小时个位
 8000556:	4b28      	ldr	r3, [pc, #160]	; (80005f8 <main+0x1e0>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	210a      	movs	r1, #10
 800055c:	0018      	movs	r0, r3
 800055e:	f7ff ff55 	bl	800040c <__aeabi_idivmod>
 8000562:	000b      	movs	r3, r1
 8000564:	b2d9      	uxtb	r1, r3
 8000566:	4b1e      	ldr	r3, [pc, #120]	; (80005e0 <main+0x1c8>)
 8000568:	2206      	movs	r2, #6
 800056a:	0018      	movs	r0, r3
 800056c:	f003 ff70 	bl	8004450 <TM1638_SetSingleDigit_HEX>
        TM1638_SetSingleDigit_HEX(&Handler, hours / 10, 7);  // 小时十位
 8000570:	4b21      	ldr	r3, [pc, #132]	; (80005f8 <main+0x1e0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	210a      	movs	r1, #10
 8000576:	0018      	movs	r0, r3
 8000578:	f7ff fe62 	bl	8000240 <__divsi3>
 800057c:	0003      	movs	r3, r0
 800057e:	b2d9      	uxtb	r1, r3
 8000580:	4b17      	ldr	r3, [pc, #92]	; (80005e0 <main+0x1c8>)
 8000582:	2207      	movs	r2, #7
 8000584:	0018      	movs	r0, r3
 8000586:	f003 ff63 	bl	8004450 <TM1638_SetSingleDigit_HEX>

        // 根据小数点状态设置第 6 位小数点
        if (decimalPointState) {
 800058a:	4b1d      	ldr	r3, [pc, #116]	; (8000600 <main+0x1e8>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d012      	beq.n	80005b8 <main+0x1a0>
            TM1638_SetSingleDigit_HEX(&Handler, hours %10 | TM1638DecimalPoint, 6);
 8000592:	4b19      	ldr	r3, [pc, #100]	; (80005f8 <main+0x1e0>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	210a      	movs	r1, #10
 8000598:	0018      	movs	r0, r3
 800059a:	f7ff ff37 	bl	800040c <__aeabi_idivmod>
 800059e:	000b      	movs	r3, r1
 80005a0:	b25b      	sxtb	r3, r3
 80005a2:	2280      	movs	r2, #128	; 0x80
 80005a4:	4252      	negs	r2, r2
 80005a6:	4313      	orrs	r3, r2
 80005a8:	b25b      	sxtb	r3, r3
 80005aa:	b2d9      	uxtb	r1, r3
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <main+0x1c8>)
 80005ae:	2206      	movs	r2, #6
 80005b0:	0018      	movs	r0, r3
 80005b2:	f003 ff4d 	bl	8004450 <TM1638_SetSingleDigit_HEX>
 80005b6:	e00c      	b.n	80005d2 <main+0x1ba>
        } else {
            TM1638_SetSingleDigit_HEX(&Handler, hours % 10, 6);
 80005b8:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <main+0x1e0>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	210a      	movs	r1, #10
 80005be:	0018      	movs	r0, r3
 80005c0:	f7ff ff24 	bl	800040c <__aeabi_idivmod>
 80005c4:	000b      	movs	r3, r1
 80005c6:	b2d9      	uxtb	r1, r3
 80005c8:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <main+0x1c8>)
 80005ca:	2206      	movs	r2, #6
 80005cc:	0018      	movs	r0, r3
 80005ce:	f003 ff3f 	bl	8004450 <TM1638_SetSingleDigit_HEX>
        }

        // 重置标志位
        gnrmcReceived = false;
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <main+0x1dc>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	701a      	strb	r2, [r3, #0]
    }

    HAL_Delay(50); // 延时 1 �?????
 80005d8:	2032      	movs	r0, #50	; 0x32
 80005da:	f000 fc47 	bl	8000e6c <HAL_Delay>
      TM1638_ScanKeys(&Handler, Keys);
 80005de:	e745      	b.n	800046c <main+0x54>
 80005e0:	200002d0 	.word	0x200002d0
 80005e4:	20000098 	.word	0x20000098
 80005e8:	20000000 	.word	0x20000000
 80005ec:	080055a4 	.word	0x080055a4
 80005f0:	080055c8 	.word	0x080055c8
 80005f4:	200002ba 	.word	0x200002ba
 80005f8:	200002bc 	.word	0x200002bc
 80005fc:	200002c0 	.word	0x200002c0
 8000600:	20000004 	.word	0x20000004

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b590      	push	{r4, r7, lr}
 8000606:	b095      	sub	sp, #84	; 0x54
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	2420      	movs	r4, #32
 800060c:	193b      	adds	r3, r7, r4
 800060e:	0018      	movs	r0, r3
 8000610:	2330      	movs	r3, #48	; 0x30
 8000612:	001a      	movs	r2, r3
 8000614:	2100      	movs	r1, #0
 8000616:	f004 f954 	bl	80048c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061a:	2310      	movs	r3, #16
 800061c:	18fb      	adds	r3, r7, r3
 800061e:	0018      	movs	r0, r3
 8000620:	2310      	movs	r3, #16
 8000622:	001a      	movs	r2, r3
 8000624:	2100      	movs	r1, #0
 8000626:	f004 f94c 	bl	80048c2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800062a:	003b      	movs	r3, r7
 800062c:	0018      	movs	r0, r3
 800062e:	2310      	movs	r3, #16
 8000630:	001a      	movs	r2, r3
 8000632:	2100      	movs	r1, #0
 8000634:	f004 f945 	bl	80048c2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000638:	0021      	movs	r1, r4
 800063a:	187b      	adds	r3, r7, r1
 800063c:	2201      	movs	r2, #1
 800063e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000640:	187b      	adds	r3, r7, r1
 8000642:	2201      	movs	r2, #1
 8000644:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000646:	187b      	adds	r3, r7, r1
 8000648:	2202      	movs	r2, #2
 800064a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064c:	187b      	adds	r3, r7, r1
 800064e:	2280      	movs	r2, #128	; 0x80
 8000650:	0252      	lsls	r2, r2, #9
 8000652:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000654:	187b      	adds	r3, r7, r1
 8000656:	2280      	movs	r2, #128	; 0x80
 8000658:	0352      	lsls	r2, r2, #13
 800065a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800065c:	187b      	adds	r3, r7, r1
 800065e:	2200      	movs	r2, #0
 8000660:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	187b      	adds	r3, r7, r1
 8000664:	0018      	movs	r0, r3
 8000666:	f000 ff47 	bl	80014f8 <HAL_RCC_OscConfig>
 800066a:	1e03      	subs	r3, r0, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800066e:	f000 fa21 	bl	8000ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000672:	2110      	movs	r1, #16
 8000674:	187b      	adds	r3, r7, r1
 8000676:	2207      	movs	r2, #7
 8000678:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067a:	187b      	adds	r3, r7, r1
 800067c:	2202      	movs	r2, #2
 800067e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	187b      	adds	r3, r7, r1
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000686:	187b      	adds	r3, r7, r1
 8000688:	2200      	movs	r2, #0
 800068a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800068c:	187b      	adds	r3, r7, r1
 800068e:	2101      	movs	r1, #1
 8000690:	0018      	movs	r0, r3
 8000692:	f001 fa4b 	bl	8001b2c <HAL_RCC_ClockConfig>
 8000696:	1e03      	subs	r3, r0, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800069a:	f000 fa0b 	bl	8000ab4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800069e:	003b      	movs	r3, r7
 80006a0:	2201      	movs	r2, #1
 80006a2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80006a4:	003b      	movs	r3, r7
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006aa:	003b      	movs	r3, r7
 80006ac:	0018      	movs	r0, r3
 80006ae:	f001 fba9 	bl	8001e04 <HAL_RCCEx_PeriphCLKConfig>
 80006b2:	1e03      	subs	r3, r0, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006b6:	f000 f9fd 	bl	8000ab4 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80006ba:	f001 fb05 	bl	8001cc8 <HAL_RCC_EnableCSS>
}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	b015      	add	sp, #84	; 0x54
 80006c4:	bd90      	pop	{r4, r7, pc}
	...

080006c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ce:	2308      	movs	r3, #8
 80006d0:	18fb      	adds	r3, r7, r3
 80006d2:	0018      	movs	r0, r3
 80006d4:	2310      	movs	r3, #16
 80006d6:	001a      	movs	r2, r3
 80006d8:	2100      	movs	r1, #0
 80006da:	f004 f8f2 	bl	80048c2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006de:	003b      	movs	r3, r7
 80006e0:	0018      	movs	r0, r3
 80006e2:	2308      	movs	r3, #8
 80006e4:	001a      	movs	r2, r3
 80006e6:	2100      	movs	r1, #0
 80006e8:	f004 f8eb 	bl	80048c2 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006ec:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <MX_TIM3_Init+0xa0>)
 80006ee:	4a1f      	ldr	r2, [pc, #124]	; (800076c <MX_TIM3_Init+0xa4>)
 80006f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4799;
 80006f2:	4b1d      	ldr	r3, [pc, #116]	; (8000768 <MX_TIM3_Init+0xa0>)
 80006f4:	4a1e      	ldr	r2, [pc, #120]	; (8000770 <MX_TIM3_Init+0xa8>)
 80006f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f8:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <MX_TIM3_Init+0xa0>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80006fe:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <MX_TIM3_Init+0xa0>)
 8000700:	4a1c      	ldr	r2, [pc, #112]	; (8000774 <MX_TIM3_Init+0xac>)
 8000702:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000704:	4b18      	ldr	r3, [pc, #96]	; (8000768 <MX_TIM3_Init+0xa0>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800070a:	4b17      	ldr	r3, [pc, #92]	; (8000768 <MX_TIM3_Init+0xa0>)
 800070c:	2280      	movs	r2, #128	; 0x80
 800070e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000710:	4b15      	ldr	r3, [pc, #84]	; (8000768 <MX_TIM3_Init+0xa0>)
 8000712:	0018      	movs	r0, r3
 8000714:	f001 fc44 	bl	8001fa0 <HAL_TIM_Base_Init>
 8000718:	1e03      	subs	r3, r0, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800071c:	f000 f9ca 	bl	8000ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000720:	2108      	movs	r1, #8
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2280      	movs	r2, #128	; 0x80
 8000726:	0152      	lsls	r2, r2, #5
 8000728:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800072a:	187a      	adds	r2, r7, r1
 800072c:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_TIM3_Init+0xa0>)
 800072e:	0011      	movs	r1, r2
 8000730:	0018      	movs	r0, r3
 8000732:	f001 fdbf 	bl	80022b4 <HAL_TIM_ConfigClockSource>
 8000736:	1e03      	subs	r3, r0, #0
 8000738:	d001      	beq.n	800073e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800073a:	f000 f9bb 	bl	8000ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800073e:	003b      	movs	r3, r7
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000744:	003b      	movs	r3, r7
 8000746:	2200      	movs	r2, #0
 8000748:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800074a:	003a      	movs	r2, r7
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_TIM3_Init+0xa0>)
 800074e:	0011      	movs	r1, r2
 8000750:	0018      	movs	r0, r3
 8000752:	f001 ffc1 	bl	80026d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000756:	1e03      	subs	r3, r0, #0
 8000758:	d001      	beq.n	800075e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800075a:	f000 f9ab 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	46bd      	mov	sp, r7
 8000762:	b006      	add	sp, #24
 8000764:	bd80      	pop	{r7, pc}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	20000098 	.word	0x20000098
 800076c:	40000400 	.word	0x40000400
 8000770:	000012bf 	.word	0x000012bf
 8000774:	000003e7 	.word	0x000003e7

08000778 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800077c:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <MX_USART1_UART_Init+0x6c>)
 800077e:	4a1a      	ldr	r2, [pc, #104]	; (80007e8 <MX_USART1_UART_Init+0x70>)
 8000780:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000782:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <MX_USART1_UART_Init+0x6c>)
 8000784:	22e1      	movs	r2, #225	; 0xe1
 8000786:	0252      	lsls	r2, r2, #9
 8000788:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <MX_USART1_UART_Init+0x6c>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000790:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_USART1_UART_Init+0x6c>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000796:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <MX_USART1_UART_Init+0x6c>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_USART1_UART_Init+0x6c>)
 800079e:	220c      	movs	r2, #12
 80007a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <MX_USART1_UART_Init+0x6c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a8:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_USART1_UART_Init+0x6c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <MX_USART1_UART_Init+0x6c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b4:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <MX_USART1_UART_Init+0x6c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ba:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <MX_USART1_UART_Init+0x6c>)
 80007bc:	0018      	movs	r0, r3
 80007be:	f001 fff3 	bl	80027a8 <HAL_UART_Init>
 80007c2:	1e03      	subs	r3, r0, #0
 80007c4:	d001      	beq.n	80007ca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007c6:	f000 f975 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  // 开启接收中断
  HAL_UART_Receive_IT(&huart1, &rx_buf[rx_index], 1);
 80007ca:	4b08      	ldr	r3, [pc, #32]	; (80007ec <MX_USART1_UART_Init+0x74>)
 80007cc:	881b      	ldrh	r3, [r3, #0]
 80007ce:	001a      	movs	r2, r3
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <MX_USART1_UART_Init+0x78>)
 80007d2:	18d1      	adds	r1, r2, r3
 80007d4:	4b03      	ldr	r3, [pc, #12]	; (80007e4 <MX_USART1_UART_Init+0x6c>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	0018      	movs	r0, r3
 80007da:	f002 f839 	bl	8002850 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_Init 2 */

}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	200000e0 	.word	0x200000e0
 80007e8:	40013800 	.word	0x40013800
 80007ec:	200002b8 	.word	0x200002b8
 80007f0:	200001f0 	.word	0x200001f0

080007f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_USART2_UART_Init+0x58>)
 80007fa:	4a15      	ldr	r2, [pc, #84]	; (8000850 <MX_USART2_UART_Init+0x5c>)
 80007fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80007fe:	4b13      	ldr	r3, [pc, #76]	; (800084c <MX_USART2_UART_Init+0x58>)
 8000800:	2296      	movs	r2, #150	; 0x96
 8000802:	0212      	lsls	r2, r2, #8
 8000804:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_USART2_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_USART2_UART_Init+0x58>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_USART2_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_USART2_UART_Init+0x58>)
 800081a:	220c      	movs	r2, #12
 800081c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <MX_USART2_UART_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_USART2_UART_Init+0x58>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <MX_USART2_UART_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_USART2_UART_Init+0x58>)
 8000832:	2200      	movs	r2, #0
 8000834:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000836:	4b05      	ldr	r3, [pc, #20]	; (800084c <MX_USART2_UART_Init+0x58>)
 8000838:	0018      	movs	r0, r3
 800083a:	f001 ffb5 	bl	80027a8 <HAL_UART_Init>
 800083e:	1e03      	subs	r3, r0, #0
 8000840:	d001      	beq.n	8000846 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000842:	f000 f937 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000168 	.word	0x20000168
 8000850:	40004400 	.word	0x40004400

08000854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000854:	b590      	push	{r4, r7, lr}
 8000856:	b08b      	sub	sp, #44	; 0x2c
 8000858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085a:	2414      	movs	r4, #20
 800085c:	193b      	adds	r3, r7, r4
 800085e:	0018      	movs	r0, r3
 8000860:	2314      	movs	r3, #20
 8000862:	001a      	movs	r2, r3
 8000864:	2100      	movs	r1, #0
 8000866:	f004 f82c 	bl	80048c2 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086a:	4b37      	ldr	r3, [pc, #220]	; (8000948 <MX_GPIO_Init+0xf4>)
 800086c:	695a      	ldr	r2, [r3, #20]
 800086e:	4b36      	ldr	r3, [pc, #216]	; (8000948 <MX_GPIO_Init+0xf4>)
 8000870:	2180      	movs	r1, #128	; 0x80
 8000872:	0309      	lsls	r1, r1, #12
 8000874:	430a      	orrs	r2, r1
 8000876:	615a      	str	r2, [r3, #20]
 8000878:	4b33      	ldr	r3, [pc, #204]	; (8000948 <MX_GPIO_Init+0xf4>)
 800087a:	695a      	ldr	r2, [r3, #20]
 800087c:	2380      	movs	r3, #128	; 0x80
 800087e:	031b      	lsls	r3, r3, #12
 8000880:	4013      	ands	r3, r2
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000886:	4b30      	ldr	r3, [pc, #192]	; (8000948 <MX_GPIO_Init+0xf4>)
 8000888:	695a      	ldr	r2, [r3, #20]
 800088a:	4b2f      	ldr	r3, [pc, #188]	; (8000948 <MX_GPIO_Init+0xf4>)
 800088c:	2180      	movs	r1, #128	; 0x80
 800088e:	03c9      	lsls	r1, r1, #15
 8000890:	430a      	orrs	r2, r1
 8000892:	615a      	str	r2, [r3, #20]
 8000894:	4b2c      	ldr	r3, [pc, #176]	; (8000948 <MX_GPIO_Init+0xf4>)
 8000896:	695a      	ldr	r2, [r3, #20]
 8000898:	2380      	movs	r3, #128	; 0x80
 800089a:	03db      	lsls	r3, r3, #15
 800089c:	4013      	ands	r3, r2
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	4b29      	ldr	r3, [pc, #164]	; (8000948 <MX_GPIO_Init+0xf4>)
 80008a4:	695a      	ldr	r2, [r3, #20]
 80008a6:	4b28      	ldr	r3, [pc, #160]	; (8000948 <MX_GPIO_Init+0xf4>)
 80008a8:	2180      	movs	r1, #128	; 0x80
 80008aa:	0289      	lsls	r1, r1, #10
 80008ac:	430a      	orrs	r2, r1
 80008ae:	615a      	str	r2, [r3, #20]
 80008b0:	4b25      	ldr	r3, [pc, #148]	; (8000948 <MX_GPIO_Init+0xf4>)
 80008b2:	695a      	ldr	r2, [r3, #20]
 80008b4:	2380      	movs	r3, #128	; 0x80
 80008b6:	029b      	lsls	r3, r3, #10
 80008b8:	4013      	ands	r3, r2
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008be:	4b22      	ldr	r3, [pc, #136]	; (8000948 <MX_GPIO_Init+0xf4>)
 80008c0:	695a      	ldr	r2, [r3, #20]
 80008c2:	4b21      	ldr	r3, [pc, #132]	; (8000948 <MX_GPIO_Init+0xf4>)
 80008c4:	2180      	movs	r1, #128	; 0x80
 80008c6:	02c9      	lsls	r1, r1, #11
 80008c8:	430a      	orrs	r2, r1
 80008ca:	615a      	str	r2, [r3, #20]
 80008cc:	4b1e      	ldr	r3, [pc, #120]	; (8000948 <MX_GPIO_Init+0xf4>)
 80008ce:	695a      	ldr	r2, [r3, #20]
 80008d0:	2380      	movs	r3, #128	; 0x80
 80008d2:	02db      	lsls	r3, r3, #11
 80008d4:	4013      	ands	r3, r2
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80008da:	2380      	movs	r3, #128	; 0x80
 80008dc:	019b      	lsls	r3, r3, #6
 80008de:	481b      	ldr	r0, [pc, #108]	; (800094c <MX_GPIO_Init+0xf8>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	0019      	movs	r1, r3
 80008e4:	f000 fdcf 	bl	8001486 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80008e8:	4b19      	ldr	r3, [pc, #100]	; (8000950 <MX_GPIO_Init+0xfc>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	2170      	movs	r1, #112	; 0x70
 80008ee:	0018      	movs	r0, r3
 80008f0:	f000 fdc9 	bl	8001486 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008f4:	193b      	adds	r3, r7, r4
 80008f6:	2280      	movs	r2, #128	; 0x80
 80008f8:	0192      	lsls	r2, r2, #6
 80008fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	193b      	adds	r3, r7, r4
 80008fe:	2201      	movs	r2, #1
 8000900:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	193b      	adds	r3, r7, r4
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	193b      	adds	r3, r7, r4
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090e:	193b      	adds	r3, r7, r4
 8000910:	4a0e      	ldr	r2, [pc, #56]	; (800094c <MX_GPIO_Init+0xf8>)
 8000912:	0019      	movs	r1, r3
 8000914:	0010      	movs	r0, r2
 8000916:	f000 fc29 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800091a:	0021      	movs	r1, r4
 800091c:	187b      	adds	r3, r7, r1
 800091e:	2270      	movs	r2, #112	; 0x70
 8000920:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	187b      	adds	r3, r7, r1
 8000924:	2201      	movs	r2, #1
 8000926:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	187b      	adds	r3, r7, r1
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2200      	movs	r2, #0
 8000932:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000934:	187b      	adds	r3, r7, r1
 8000936:	4a06      	ldr	r2, [pc, #24]	; (8000950 <MX_GPIO_Init+0xfc>)
 8000938:	0019      	movs	r1, r3
 800093a:	0010      	movs	r0, r2
 800093c:	f000 fc16 	bl	800116c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000940:	46c0      	nop			; (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	b00b      	add	sp, #44	; 0x2c
 8000946:	bd90      	pop	{r4, r7, pc}
 8000948:	40021000 	.word	0x40021000
 800094c:	48000800 	.word	0x48000800
 8000950:	48000400 	.word	0x48000400

08000954 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// 定时器中断处理函�?????
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
    if (htim == &htim3) {
 800095c:	687a      	ldr	r2, [r7, #4]
 800095e:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000960:	429a      	cmp	r2, r3
 8000962:	d12c      	bne.n	80009be <HAL_TIM_PeriodElapsedCallback+0x6a>

        timer_counter++;
 8000964:	4b19      	ldr	r3, [pc, #100]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	1c5a      	adds	r2, r3, #1
 800096a:	4b18      	ldr	r3, [pc, #96]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x78>)
 800096c:	601a      	str	r2, [r3, #0]
        blinkCounter++;
 800096e:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	1c5a      	adds	r2, r3, #1
 8000974:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000976:	601a      	str	r2, [r3, #0]

        if (timer_counter >= 1) {
 8000978:	4b14      	ldr	r3, [pc, #80]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x78>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d009      	beq.n	8000994 <HAL_TIM_PeriodElapsedCallback+0x40>
            // 在这里添�????? 1 秒间隔执行的代码
          //  SEGGER_RTT_WriteString(0, "Timer interrupt occurred!\n");
            timer_counter = 0;
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
            HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000986:	2380      	movs	r3, #128	; 0x80
 8000988:	019b      	lsls	r3, r3, #6
 800098a:	4a12      	ldr	r2, [pc, #72]	; (80009d4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800098c:	0019      	movs	r1, r3
 800098e:	0010      	movs	r0, r2
 8000990:	f000 fd96 	bl	80014c0 <HAL_GPIO_TogglePin>


        }

        if (blinkCounter >= 10) {  // 50 是主循环中的延时时间
 8000994:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b09      	cmp	r3, #9
 800099a:	d910      	bls.n	80009be <HAL_TIM_PeriodElapsedCallback+0x6a>
            blinkCounter = 0;
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
            decimalPointState = !decimalPointState;  // 切换小数点状态
 80009a2:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	1e5a      	subs	r2, r3, #1
 80009a8:	4193      	sbcs	r3, r2
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	2201      	movs	r2, #1
 80009ae:	4053      	eors	r3, r2
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	1c1a      	adds	r2, r3, #0
 80009b4:	2301      	movs	r3, #1
 80009b6:	4013      	ands	r3, r2
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80009bc:	701a      	strb	r2, [r3, #0]
        }
    }
}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	b002      	add	sp, #8
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	20000098 	.word	0x20000098
 80009cc:	200002cc 	.word	0x200002cc
 80009d0:	200002c8 	.word	0x200002c8
 80009d4:	48000800 	.word	0x48000800
 80009d8:	20000004 	.word	0x20000004

080009dc <HAL_UART_RxCpltCallback>:

// UART接收中断回调函数
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80009dc:	b590      	push	{r4, r7, lr}
 80009de:	b085      	sub	sp, #20
 80009e0:	af02      	add	r7, sp, #8
 80009e2:	6078      	str	r0, [r7, #4]
    if (huart == &huart1) {
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	4b27      	ldr	r3, [pc, #156]	; (8000a84 <HAL_UART_RxCpltCallback+0xa8>)
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d147      	bne.n	8000a7c <HAL_UART_RxCpltCallback+0xa0>
        if (rx_index < RX_BUF_SIZE - 1) {
 80009ec:	4b26      	ldr	r3, [pc, #152]	; (8000a88 <HAL_UART_RxCpltCallback+0xac>)
 80009ee:	881b      	ldrh	r3, [r3, #0]
 80009f0:	2bc6      	cmp	r3, #198	; 0xc6
 80009f2:	d843      	bhi.n	8000a7c <HAL_UART_RxCpltCallback+0xa0>
            if (rx_buf[rx_index] == '\n') {
 80009f4:	4b24      	ldr	r3, [pc, #144]	; (8000a88 <HAL_UART_RxCpltCallback+0xac>)
 80009f6:	881b      	ldrh	r3, [r3, #0]
 80009f8:	001a      	movs	r2, r3
 80009fa:	4b24      	ldr	r3, [pc, #144]	; (8000a8c <HAL_UART_RxCpltCallback+0xb0>)
 80009fc:	5c9b      	ldrb	r3, [r3, r2]
 80009fe:	2b0a      	cmp	r3, #10
 8000a00:	d12c      	bne.n	8000a5c <HAL_UART_RxCpltCallback+0x80>
                // 判断是否是 $GNRMC 语句
                if (strncmp((const char*)rx_buf, "$GNRMC", 6) == 0) {
 8000a02:	4923      	ldr	r1, [pc, #140]	; (8000a90 <HAL_UART_RxCpltCallback+0xb4>)
 8000a04:	4b21      	ldr	r3, [pc, #132]	; (8000a8c <HAL_UART_RxCpltCallback+0xb0>)
 8000a06:	2206      	movs	r2, #6
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f003 ff8d 	bl	8004928 <strncmp>
 8000a0e:	1e03      	subs	r3, r0, #0
 8000a10:	d10b      	bne.n	8000a2a <HAL_UART_RxCpltCallback+0x4e>
                    sscanf((const char*)rx_buf + 7, "%2d%2d%2d", &hours, &minutes, &seconds);
 8000a12:	4820      	ldr	r0, [pc, #128]	; (8000a94 <HAL_UART_RxCpltCallback+0xb8>)
 8000a14:	4c20      	ldr	r4, [pc, #128]	; (8000a98 <HAL_UART_RxCpltCallback+0xbc>)
 8000a16:	4a21      	ldr	r2, [pc, #132]	; (8000a9c <HAL_UART_RxCpltCallback+0xc0>)
 8000a18:	4921      	ldr	r1, [pc, #132]	; (8000aa0 <HAL_UART_RxCpltCallback+0xc4>)
 8000a1a:	4b22      	ldr	r3, [pc, #136]	; (8000aa4 <HAL_UART_RxCpltCallback+0xc8>)
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	0023      	movs	r3, r4
 8000a20:	f003 ff58 	bl	80048d4 <siscanf>
                    // 设置标志位，表示已接收到有效的 $GNRMC 语句
                    gnrmcReceived = true;
 8000a24:	4b20      	ldr	r3, [pc, #128]	; (8000aa8 <HAL_UART_RxCpltCallback+0xcc>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	701a      	strb	r2, [r3, #0]
                }

                // 接收到换行符，打印接收到的数据
                SEGGER_RTT_WriteString(0, "Received via UART: ");
 8000a2a:	4b20      	ldr	r3, [pc, #128]	; (8000aac <HAL_UART_RxCpltCallback+0xd0>)
 8000a2c:	0019      	movs	r1, r3
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f003 f9f6 	bl	8003e20 <SEGGER_RTT_WriteString>
                SEGGER_RTT_WriteString(0, (char*)rx_buf);
 8000a34:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <HAL_UART_RxCpltCallback+0xb0>)
 8000a36:	0019      	movs	r1, r3
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f003 f9f1 	bl	8003e20 <SEGGER_RTT_WriteString>
                SEGGER_RTT_WriteString(0, "\n");
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <HAL_UART_RxCpltCallback+0xd4>)
 8000a40:	0019      	movs	r1, r3
 8000a42:	2000      	movs	r0, #0
 8000a44:	f003 f9ec 	bl	8003e20 <SEGGER_RTT_WriteString>

                // 清空缓冲区
                memset(rx_buf, 0, sizeof(rx_buf));
 8000a48:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <HAL_UART_RxCpltCallback+0xb0>)
 8000a4a:	22c8      	movs	r2, #200	; 0xc8
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f003 ff37 	bl	80048c2 <memset>
                rx_index = 0; // 确保rx_index重置为0
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <HAL_UART_RxCpltCallback+0xac>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	801a      	strh	r2, [r3, #0]
 8000a5a:	e005      	b.n	8000a68 <HAL_UART_RxCpltCallback+0x8c>
            } else {
                // 接收一个字节数据
                rx_index++;
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <HAL_UART_RxCpltCallback+0xac>)
 8000a5e:	881b      	ldrh	r3, [r3, #0]
 8000a60:	3301      	adds	r3, #1
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <HAL_UART_RxCpltCallback+0xac>)
 8000a66:	801a      	strh	r2, [r3, #0]
            }
            // 继续开启下一个字节的接收中断
            HAL_UART_Receive_IT(&huart1, &rx_buf[rx_index], 1);
 8000a68:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <HAL_UART_RxCpltCallback+0xac>)
 8000a6a:	881b      	ldrh	r3, [r3, #0]
 8000a6c:	001a      	movs	r2, r3
 8000a6e:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <HAL_UART_RxCpltCallback+0xb0>)
 8000a70:	18d1      	adds	r1, r2, r3
 8000a72:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <HAL_UART_RxCpltCallback+0xa8>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	0018      	movs	r0, r3
 8000a78:	f001 feea 	bl	8002850 <HAL_UART_Receive_IT>
        }
    }
}
 8000a7c:	46c0      	nop			; (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	b003      	add	sp, #12
 8000a82:	bd90      	pop	{r4, r7, pc}
 8000a84:	200000e0 	.word	0x200000e0
 8000a88:	200002b8 	.word	0x200002b8
 8000a8c:	200001f0 	.word	0x200001f0
 8000a90:	080055cc 	.word	0x080055cc
 8000a94:	200001f7 	.word	0x200001f7
 8000a98:	200002c0 	.word	0x200002c0
 8000a9c:	200002bc 	.word	0x200002bc
 8000aa0:	080055d4 	.word	0x080055d4
 8000aa4:	200002c4 	.word	0x200002c4
 8000aa8:	200002ba 	.word	0x200002ba
 8000aac:	080055e0 	.word	0x080055e0
 8000ab0:	080055c8 	.word	0x080055c8

08000ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab8:	b672      	cpsid	i
}
 8000aba:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000abc:	e7fe      	b.n	8000abc <Error_Handler+0x8>
	...

08000ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <HAL_MspInit+0x44>)
 8000ac8:	699a      	ldr	r2, [r3, #24]
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <HAL_MspInit+0x44>)
 8000acc:	2101      	movs	r1, #1
 8000ace:	430a      	orrs	r2, r1
 8000ad0:	619a      	str	r2, [r3, #24]
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <HAL_MspInit+0x44>)
 8000ad4:	699b      	ldr	r3, [r3, #24]
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	4013      	ands	r3, r2
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <HAL_MspInit+0x44>)
 8000ae0:	69da      	ldr	r2, [r3, #28]
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <HAL_MspInit+0x44>)
 8000ae4:	2180      	movs	r1, #128	; 0x80
 8000ae6:	0549      	lsls	r1, r1, #21
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	61da      	str	r2, [r3, #28]
 8000aec:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <HAL_MspInit+0x44>)
 8000aee:	69da      	ldr	r2, [r3, #28]
 8000af0:	2380      	movs	r3, #128	; 0x80
 8000af2:	055b      	lsls	r3, r3, #21
 8000af4:	4013      	ands	r3, r2
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	46bd      	mov	sp, r7
 8000afe:	b002      	add	sp, #8
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	40021000 	.word	0x40021000

08000b08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a0d      	ldr	r2, [pc, #52]	; (8000b4c <HAL_TIM_Base_MspInit+0x44>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d113      	bne.n	8000b42 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <HAL_TIM_Base_MspInit+0x48>)
 8000b1c:	69da      	ldr	r2, [r3, #28]
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <HAL_TIM_Base_MspInit+0x48>)
 8000b20:	2102      	movs	r1, #2
 8000b22:	430a      	orrs	r2, r1
 8000b24:	61da      	str	r2, [r3, #28]
 8000b26:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <HAL_TIM_Base_MspInit+0x48>)
 8000b28:	69db      	ldr	r3, [r3, #28]
 8000b2a:	2202      	movs	r2, #2
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2100      	movs	r1, #0
 8000b36:	2010      	movs	r0, #16
 8000b38:	f000 fa68 	bl	800100c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b3c:	2010      	movs	r0, #16
 8000b3e:	f000 fa7a 	bl	8001036 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	46bd      	mov	sp, r7
 8000b46:	b004      	add	sp, #16
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	40000400 	.word	0x40000400
 8000b50:	40021000 	.word	0x40021000

08000b54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b54:	b590      	push	{r4, r7, lr}
 8000b56:	b08d      	sub	sp, #52	; 0x34
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	241c      	movs	r4, #28
 8000b5e:	193b      	adds	r3, r7, r4
 8000b60:	0018      	movs	r0, r3
 8000b62:	2314      	movs	r3, #20
 8000b64:	001a      	movs	r2, r3
 8000b66:	2100      	movs	r1, #0
 8000b68:	f003 feab 	bl	80048c2 <memset>
  if(huart->Instance==USART1)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a3d      	ldr	r2, [pc, #244]	; (8000c68 <HAL_UART_MspInit+0x114>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d13c      	bne.n	8000bf0 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b76:	4b3d      	ldr	r3, [pc, #244]	; (8000c6c <HAL_UART_MspInit+0x118>)
 8000b78:	699a      	ldr	r2, [r3, #24]
 8000b7a:	4b3c      	ldr	r3, [pc, #240]	; (8000c6c <HAL_UART_MspInit+0x118>)
 8000b7c:	2180      	movs	r1, #128	; 0x80
 8000b7e:	01c9      	lsls	r1, r1, #7
 8000b80:	430a      	orrs	r2, r1
 8000b82:	619a      	str	r2, [r3, #24]
 8000b84:	4b39      	ldr	r3, [pc, #228]	; (8000c6c <HAL_UART_MspInit+0x118>)
 8000b86:	699a      	ldr	r2, [r3, #24]
 8000b88:	2380      	movs	r3, #128	; 0x80
 8000b8a:	01db      	lsls	r3, r3, #7
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	61bb      	str	r3, [r7, #24]
 8000b90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	4b36      	ldr	r3, [pc, #216]	; (8000c6c <HAL_UART_MspInit+0x118>)
 8000b94:	695a      	ldr	r2, [r3, #20]
 8000b96:	4b35      	ldr	r3, [pc, #212]	; (8000c6c <HAL_UART_MspInit+0x118>)
 8000b98:	2180      	movs	r1, #128	; 0x80
 8000b9a:	0289      	lsls	r1, r1, #10
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	615a      	str	r2, [r3, #20]
 8000ba0:	4b32      	ldr	r3, [pc, #200]	; (8000c6c <HAL_UART_MspInit+0x118>)
 8000ba2:	695a      	ldr	r2, [r3, #20]
 8000ba4:	2380      	movs	r3, #128	; 0x80
 8000ba6:	029b      	lsls	r3, r3, #10
 8000ba8:	4013      	ands	r3, r2
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bae:	193b      	adds	r3, r7, r4
 8000bb0:	22c0      	movs	r2, #192	; 0xc0
 8000bb2:	00d2      	lsls	r2, r2, #3
 8000bb4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	0021      	movs	r1, r4
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	2202      	movs	r2, #2
 8000bbc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	2203      	movs	r2, #3
 8000bc8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	2201      	movs	r2, #1
 8000bce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd0:	187a      	adds	r2, r7, r1
 8000bd2:	2390      	movs	r3, #144	; 0x90
 8000bd4:	05db      	lsls	r3, r3, #23
 8000bd6:	0011      	movs	r1, r2
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f000 fac7 	bl	800116c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	201b      	movs	r0, #27
 8000be4:	f000 fa12 	bl	800100c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000be8:	201b      	movs	r0, #27
 8000bea:	f000 fa24 	bl	8001036 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bee:	e037      	b.n	8000c60 <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART2)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a1e      	ldr	r2, [pc, #120]	; (8000c70 <HAL_UART_MspInit+0x11c>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d132      	bne.n	8000c60 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bfa:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <HAL_UART_MspInit+0x118>)
 8000bfc:	69da      	ldr	r2, [r3, #28]
 8000bfe:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <HAL_UART_MspInit+0x118>)
 8000c00:	2180      	movs	r1, #128	; 0x80
 8000c02:	0289      	lsls	r1, r1, #10
 8000c04:	430a      	orrs	r2, r1
 8000c06:	61da      	str	r2, [r3, #28]
 8000c08:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <HAL_UART_MspInit+0x118>)
 8000c0a:	69da      	ldr	r2, [r3, #28]
 8000c0c:	2380      	movs	r3, #128	; 0x80
 8000c0e:	029b      	lsls	r3, r3, #10
 8000c10:	4013      	ands	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <HAL_UART_MspInit+0x118>)
 8000c18:	695a      	ldr	r2, [r3, #20]
 8000c1a:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <HAL_UART_MspInit+0x118>)
 8000c1c:	2180      	movs	r1, #128	; 0x80
 8000c1e:	0289      	lsls	r1, r1, #10
 8000c20:	430a      	orrs	r2, r1
 8000c22:	615a      	str	r2, [r3, #20]
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <HAL_UART_MspInit+0x118>)
 8000c26:	695a      	ldr	r2, [r3, #20]
 8000c28:	2380      	movs	r3, #128	; 0x80
 8000c2a:	029b      	lsls	r3, r3, #10
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c32:	211c      	movs	r1, #28
 8000c34:	187b      	adds	r3, r7, r1
 8000c36:	220c      	movs	r2, #12
 8000c38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	187b      	adds	r3, r7, r1
 8000c3c:	2202      	movs	r2, #2
 8000c3e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	187b      	adds	r3, r7, r1
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c46:	187b      	adds	r3, r7, r1
 8000c48:	2203      	movs	r2, #3
 8000c4a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	2201      	movs	r2, #1
 8000c50:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	187a      	adds	r2, r7, r1
 8000c54:	2390      	movs	r3, #144	; 0x90
 8000c56:	05db      	lsls	r3, r3, #23
 8000c58:	0011      	movs	r1, r2
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f000 fa86 	bl	800116c <HAL_GPIO_Init>
}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	b00d      	add	sp, #52	; 0x34
 8000c66:	bd90      	pop	{r4, r7, pc}
 8000c68:	40013800 	.word	0x40013800
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	40004400 	.word	0x40004400

08000c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000c78:	f001 f8aa 	bl	8001dd0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <NMI_Handler+0x8>

08000c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <HardFault_Handler+0x4>

08000c84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c88:	46c0      	nop			; (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c9c:	f000 f8ca 	bl	8000e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca0:	46c0      	nop			; (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <TIM3_IRQHandler+0x14>)
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f001 fa12 	bl	80020d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000cb4:	46c0      	nop			; (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	20000098 	.word	0x20000098

08000cc0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <USART1_IRQHandler+0x14>)
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f001 fe1a 	bl	8002900 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ccc:	46c0      	nop			; (mov r8, r8)
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	200000e0 	.word	0x200000e0

08000cd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce0:	4a14      	ldr	r2, [pc, #80]	; (8000d34 <_sbrk+0x5c>)
 8000ce2:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <_sbrk+0x60>)
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cec:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <_sbrk+0x64>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d102      	bne.n	8000cfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf4:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <_sbrk+0x64>)
 8000cf6:	4a12      	ldr	r2, [pc, #72]	; (8000d40 <_sbrk+0x68>)
 8000cf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <_sbrk+0x64>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	18d3      	adds	r3, r2, r3
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d207      	bcs.n	8000d18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d08:	f003 fda8 	bl	800485c <__errno>
 8000d0c:	0003      	movs	r3, r0
 8000d0e:	220c      	movs	r2, #12
 8000d10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d12:	2301      	movs	r3, #1
 8000d14:	425b      	negs	r3, r3
 8000d16:	e009      	b.n	8000d2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <_sbrk+0x64>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d1e:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <_sbrk+0x64>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	18d2      	adds	r2, r2, r3
 8000d26:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <_sbrk+0x64>)
 8000d28:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
}
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b006      	add	sp, #24
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20002000 	.word	0x20002000
 8000d38:	00000400 	.word	0x00000400
 8000d3c:	20000308 	.word	0x20000308
 8000d40:	200007d8 	.word	0x200007d8

08000d44 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000d48:	46c0      	nop			; (mov r8, r8)
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d50:	480d      	ldr	r0, [pc, #52]	; (8000d88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d52:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d54:	f7ff fff6 	bl	8000d44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d58:	480c      	ldr	r0, [pc, #48]	; (8000d8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d5a:	490d      	ldr	r1, [pc, #52]	; (8000d90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d5c:	4a0d      	ldr	r2, [pc, #52]	; (8000d94 <LoopForever+0xe>)
  movs r3, #0
 8000d5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d60:	e002      	b.n	8000d68 <LoopCopyDataInit>

08000d62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d66:	3304      	adds	r3, #4

08000d68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d6c:	d3f9      	bcc.n	8000d62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6e:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d70:	4c0a      	ldr	r4, [pc, #40]	; (8000d9c <LoopForever+0x16>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d74:	e001      	b.n	8000d7a <LoopFillZerobss>

08000d76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d78:	3204      	adds	r2, #4

08000d7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d7c:	d3fb      	bcc.n	8000d76 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d7e:	f003 fd73 	bl	8004868 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d82:	f7ff fb49 	bl	8000418 <main>

08000d86 <LoopForever>:

LoopForever:
    b LoopForever
 8000d86:	e7fe      	b.n	8000d86 <LoopForever>
  ldr   r0, =_estack
 8000d88:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000d8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d90:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000d94:	08005898 	.word	0x08005898
  ldr r2, =_sbss
 8000d98:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000d9c:	200007d8 	.word	0x200007d8

08000da0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000da0:	e7fe      	b.n	8000da0 <ADC1_IRQHandler>
	...

08000da4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da8:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <HAL_Init+0x24>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_Init+0x24>)
 8000dae:	2110      	movs	r1, #16
 8000db0:	430a      	orrs	r2, r1
 8000db2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000db4:	2003      	movs	r0, #3
 8000db6:	f000 f809 	bl	8000dcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dba:	f7ff fe81 	bl	8000ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dbe:	2300      	movs	r3, #0
}
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	40022000 	.word	0x40022000

08000dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dcc:	b590      	push	{r4, r7, lr}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd4:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <HAL_InitTick+0x5c>)
 8000dd6:	681c      	ldr	r4, [r3, #0]
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <HAL_InitTick+0x60>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	0019      	movs	r1, r3
 8000dde:	23fa      	movs	r3, #250	; 0xfa
 8000de0:	0098      	lsls	r0, r3, #2
 8000de2:	f7ff f9a3 	bl	800012c <__udivsi3>
 8000de6:	0003      	movs	r3, r0
 8000de8:	0019      	movs	r1, r3
 8000dea:	0020      	movs	r0, r4
 8000dec:	f7ff f99e 	bl	800012c <__udivsi3>
 8000df0:	0003      	movs	r3, r0
 8000df2:	0018      	movs	r0, r3
 8000df4:	f000 f92f 	bl	8001056 <HAL_SYSTICK_Config>
 8000df8:	1e03      	subs	r3, r0, #0
 8000dfa:	d001      	beq.n	8000e00 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e00f      	b.n	8000e20 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b03      	cmp	r3, #3
 8000e04:	d80b      	bhi.n	8000e1e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	2301      	movs	r3, #1
 8000e0a:	425b      	negs	r3, r3
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f000 f8fc 	bl	800100c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_InitTick+0x64>)
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e000      	b.n	8000e20 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
}
 8000e20:	0018      	movs	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b003      	add	sp, #12
 8000e26:	bd90      	pop	{r4, r7, pc}
 8000e28:	20000008 	.word	0x20000008
 8000e2c:	20000010 	.word	0x20000010
 8000e30:	2000000c 	.word	0x2000000c

08000e34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <HAL_IncTick+0x1c>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	001a      	movs	r2, r3
 8000e3e:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <HAL_IncTick+0x20>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	18d2      	adds	r2, r2, r3
 8000e44:	4b03      	ldr	r3, [pc, #12]	; (8000e54 <HAL_IncTick+0x20>)
 8000e46:	601a      	str	r2, [r3, #0]
}
 8000e48:	46c0      	nop			; (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	20000010 	.word	0x20000010
 8000e54:	2000030c 	.word	0x2000030c

08000e58 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e5c:	4b02      	ldr	r3, [pc, #8]	; (8000e68 <HAL_GetTick+0x10>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	0018      	movs	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	2000030c 	.word	0x2000030c

08000e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e74:	f7ff fff0 	bl	8000e58 <HAL_GetTick>
 8000e78:	0003      	movs	r3, r0
 8000e7a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	3301      	adds	r3, #1
 8000e84:	d005      	beq.n	8000e92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e86:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <HAL_Delay+0x44>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	001a      	movs	r2, r3
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	189b      	adds	r3, r3, r2
 8000e90:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	f7ff ffe0 	bl	8000e58 <HAL_GetTick>
 8000e98:	0002      	movs	r2, r0
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d8f7      	bhi.n	8000e94 <HAL_Delay+0x28>
  {
  }
}
 8000ea4:	46c0      	nop			; (mov r8, r8)
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	b004      	add	sp, #16
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	20000010 	.word	0x20000010

08000eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	0002      	movs	r2, r0
 8000ebc:	1dfb      	adds	r3, r7, #7
 8000ebe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ec0:	1dfb      	adds	r3, r7, #7
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b7f      	cmp	r3, #127	; 0x7f
 8000ec6:	d809      	bhi.n	8000edc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec8:	1dfb      	adds	r3, r7, #7
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	001a      	movs	r2, r3
 8000ece:	231f      	movs	r3, #31
 8000ed0:	401a      	ands	r2, r3
 8000ed2:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <__NVIC_EnableIRQ+0x30>)
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	4091      	lsls	r1, r2
 8000ed8:	000a      	movs	r2, r1
 8000eda:	601a      	str	r2, [r3, #0]
  }
}
 8000edc:	46c0      	nop			; (mov r8, r8)
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	b002      	add	sp, #8
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	e000e100 	.word	0xe000e100

08000ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee8:	b590      	push	{r4, r7, lr}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	0002      	movs	r2, r0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	1dfb      	adds	r3, r7, #7
 8000ef4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ef6:	1dfb      	adds	r3, r7, #7
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b7f      	cmp	r3, #127	; 0x7f
 8000efc:	d828      	bhi.n	8000f50 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000efe:	4a2f      	ldr	r2, [pc, #188]	; (8000fbc <__NVIC_SetPriority+0xd4>)
 8000f00:	1dfb      	adds	r3, r7, #7
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	b25b      	sxtb	r3, r3
 8000f06:	089b      	lsrs	r3, r3, #2
 8000f08:	33c0      	adds	r3, #192	; 0xc0
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	589b      	ldr	r3, [r3, r2]
 8000f0e:	1dfa      	adds	r2, r7, #7
 8000f10:	7812      	ldrb	r2, [r2, #0]
 8000f12:	0011      	movs	r1, r2
 8000f14:	2203      	movs	r2, #3
 8000f16:	400a      	ands	r2, r1
 8000f18:	00d2      	lsls	r2, r2, #3
 8000f1a:	21ff      	movs	r1, #255	; 0xff
 8000f1c:	4091      	lsls	r1, r2
 8000f1e:	000a      	movs	r2, r1
 8000f20:	43d2      	mvns	r2, r2
 8000f22:	401a      	ands	r2, r3
 8000f24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	019b      	lsls	r3, r3, #6
 8000f2a:	22ff      	movs	r2, #255	; 0xff
 8000f2c:	401a      	ands	r2, r3
 8000f2e:	1dfb      	adds	r3, r7, #7
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	0018      	movs	r0, r3
 8000f34:	2303      	movs	r3, #3
 8000f36:	4003      	ands	r3, r0
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f3c:	481f      	ldr	r0, [pc, #124]	; (8000fbc <__NVIC_SetPriority+0xd4>)
 8000f3e:	1dfb      	adds	r3, r7, #7
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	b25b      	sxtb	r3, r3
 8000f44:	089b      	lsrs	r3, r3, #2
 8000f46:	430a      	orrs	r2, r1
 8000f48:	33c0      	adds	r3, #192	; 0xc0
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f4e:	e031      	b.n	8000fb4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f50:	4a1b      	ldr	r2, [pc, #108]	; (8000fc0 <__NVIC_SetPriority+0xd8>)
 8000f52:	1dfb      	adds	r3, r7, #7
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	0019      	movs	r1, r3
 8000f58:	230f      	movs	r3, #15
 8000f5a:	400b      	ands	r3, r1
 8000f5c:	3b08      	subs	r3, #8
 8000f5e:	089b      	lsrs	r3, r3, #2
 8000f60:	3306      	adds	r3, #6
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	18d3      	adds	r3, r2, r3
 8000f66:	3304      	adds	r3, #4
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	1dfa      	adds	r2, r7, #7
 8000f6c:	7812      	ldrb	r2, [r2, #0]
 8000f6e:	0011      	movs	r1, r2
 8000f70:	2203      	movs	r2, #3
 8000f72:	400a      	ands	r2, r1
 8000f74:	00d2      	lsls	r2, r2, #3
 8000f76:	21ff      	movs	r1, #255	; 0xff
 8000f78:	4091      	lsls	r1, r2
 8000f7a:	000a      	movs	r2, r1
 8000f7c:	43d2      	mvns	r2, r2
 8000f7e:	401a      	ands	r2, r3
 8000f80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	019b      	lsls	r3, r3, #6
 8000f86:	22ff      	movs	r2, #255	; 0xff
 8000f88:	401a      	ands	r2, r3
 8000f8a:	1dfb      	adds	r3, r7, #7
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	0018      	movs	r0, r3
 8000f90:	2303      	movs	r3, #3
 8000f92:	4003      	ands	r3, r0
 8000f94:	00db      	lsls	r3, r3, #3
 8000f96:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f98:	4809      	ldr	r0, [pc, #36]	; (8000fc0 <__NVIC_SetPriority+0xd8>)
 8000f9a:	1dfb      	adds	r3, r7, #7
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	001c      	movs	r4, r3
 8000fa0:	230f      	movs	r3, #15
 8000fa2:	4023      	ands	r3, r4
 8000fa4:	3b08      	subs	r3, #8
 8000fa6:	089b      	lsrs	r3, r3, #2
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	3306      	adds	r3, #6
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	18c3      	adds	r3, r0, r3
 8000fb0:	3304      	adds	r3, #4
 8000fb2:	601a      	str	r2, [r3, #0]
}
 8000fb4:	46c0      	nop			; (mov r8, r8)
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b003      	add	sp, #12
 8000fba:	bd90      	pop	{r4, r7, pc}
 8000fbc:	e000e100 	.word	0xe000e100
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	1e5a      	subs	r2, r3, #1
 8000fd0:	2380      	movs	r3, #128	; 0x80
 8000fd2:	045b      	lsls	r3, r3, #17
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d301      	bcc.n	8000fdc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e010      	b.n	8000ffe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <SysTick_Config+0x44>)
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	3a01      	subs	r2, #1
 8000fe2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	425b      	negs	r3, r3
 8000fe8:	2103      	movs	r1, #3
 8000fea:	0018      	movs	r0, r3
 8000fec:	f7ff ff7c 	bl	8000ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff0:	4b05      	ldr	r3, [pc, #20]	; (8001008 <SysTick_Config+0x44>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff6:	4b04      	ldr	r3, [pc, #16]	; (8001008 <SysTick_Config+0x44>)
 8000ff8:	2207      	movs	r2, #7
 8000ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	0018      	movs	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	b002      	add	sp, #8
 8001004:	bd80      	pop	{r7, pc}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	e000e010 	.word	0xe000e010

0800100c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	210f      	movs	r1, #15
 8001018:	187b      	adds	r3, r7, r1
 800101a:	1c02      	adds	r2, r0, #0
 800101c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	187b      	adds	r3, r7, r1
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	b25b      	sxtb	r3, r3
 8001026:	0011      	movs	r1, r2
 8001028:	0018      	movs	r0, r3
 800102a:	f7ff ff5d 	bl	8000ee8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	46bd      	mov	sp, r7
 8001032:	b004      	add	sp, #16
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
 800103c:	0002      	movs	r2, r0
 800103e:	1dfb      	adds	r3, r7, #7
 8001040:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001042:	1dfb      	adds	r3, r7, #7
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	b25b      	sxtb	r3, r3
 8001048:	0018      	movs	r0, r3
 800104a:	f7ff ff33 	bl	8000eb4 <__NVIC_EnableIRQ>
}
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	46bd      	mov	sp, r7
 8001052:	b002      	add	sp, #8
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	0018      	movs	r0, r3
 8001062:	f7ff ffaf 	bl	8000fc4 <SysTick_Config>
 8001066:	0003      	movs	r3, r0
}
 8001068:	0018      	movs	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	b002      	add	sp, #8
 800106e:	bd80      	pop	{r7, pc}

08001070 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2221      	movs	r2, #33	; 0x21
 800107c:	5c9b      	ldrb	r3, [r3, r2]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b02      	cmp	r3, #2
 8001082:	d008      	beq.n	8001096 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2204      	movs	r2, #4
 8001088:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2220      	movs	r2, #32
 800108e:	2100      	movs	r1, #0
 8001090:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e020      	b.n	80010d8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	210e      	movs	r1, #14
 80010a2:	438a      	bics	r2, r1
 80010a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2101      	movs	r1, #1
 80010b2:	438a      	bics	r2, r1
 80010b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010be:	2101      	movs	r1, #1
 80010c0:	4091      	lsls	r1, r2
 80010c2:	000a      	movs	r2, r1
 80010c4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2221      	movs	r2, #33	; 0x21
 80010ca:	2101      	movs	r1, #1
 80010cc:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2220      	movs	r2, #32
 80010d2:	2100      	movs	r1, #0
 80010d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	0018      	movs	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	b002      	add	sp, #8
 80010de:	bd80      	pop	{r7, pc}

080010e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010e8:	210f      	movs	r1, #15
 80010ea:	187b      	adds	r3, r7, r1
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2221      	movs	r2, #33	; 0x21
 80010f4:	5c9b      	ldrb	r3, [r3, r2]
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d006      	beq.n	800110a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2204      	movs	r2, #4
 8001100:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001102:	187b      	adds	r3, r7, r1
 8001104:	2201      	movs	r2, #1
 8001106:	701a      	strb	r2, [r3, #0]
 8001108:	e028      	b.n	800115c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	210e      	movs	r1, #14
 8001116:	438a      	bics	r2, r1
 8001118:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2101      	movs	r1, #1
 8001126:	438a      	bics	r2, r1
 8001128:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001132:	2101      	movs	r1, #1
 8001134:	4091      	lsls	r1, r2
 8001136:	000a      	movs	r2, r1
 8001138:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2221      	movs	r2, #33	; 0x21
 800113e:	2101      	movs	r1, #1
 8001140:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2220      	movs	r2, #32
 8001146:	2100      	movs	r1, #0
 8001148:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800114e:	2b00      	cmp	r3, #0
 8001150:	d004      	beq.n	800115c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	0010      	movs	r0, r2
 800115a:	4798      	blx	r3
    }
  }
  return status;
 800115c:	230f      	movs	r3, #15
 800115e:	18fb      	adds	r3, r7, r3
 8001160:	781b      	ldrb	r3, [r3, #0]
}
 8001162:	0018      	movs	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	b004      	add	sp, #16
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800117a:	e14f      	b.n	800141c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2101      	movs	r1, #1
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	4091      	lsls	r1, r2
 8001186:	000a      	movs	r2, r1
 8001188:	4013      	ands	r3, r2
 800118a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d100      	bne.n	8001194 <HAL_GPIO_Init+0x28>
 8001192:	e140      	b.n	8001416 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	2203      	movs	r2, #3
 800119a:	4013      	ands	r3, r2
 800119c:	2b01      	cmp	r3, #1
 800119e:	d005      	beq.n	80011ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	2203      	movs	r2, #3
 80011a6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d130      	bne.n	800120e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	2203      	movs	r2, #3
 80011b8:	409a      	lsls	r2, r3
 80011ba:	0013      	movs	r3, r2
 80011bc:	43da      	mvns	r2, r3
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	68da      	ldr	r2, [r3, #12]
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	409a      	lsls	r2, r3
 80011ce:	0013      	movs	r3, r2
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011e2:	2201      	movs	r2, #1
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	409a      	lsls	r2, r3
 80011e8:	0013      	movs	r3, r2
 80011ea:	43da      	mvns	r2, r3
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	4013      	ands	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	091b      	lsrs	r3, r3, #4
 80011f8:	2201      	movs	r2, #1
 80011fa:	401a      	ands	r2, r3
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	409a      	lsls	r2, r3
 8001200:	0013      	movs	r3, r2
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2203      	movs	r2, #3
 8001214:	4013      	ands	r3, r2
 8001216:	2b03      	cmp	r3, #3
 8001218:	d017      	beq.n	800124a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	2203      	movs	r2, #3
 8001226:	409a      	lsls	r2, r3
 8001228:	0013      	movs	r3, r2
 800122a:	43da      	mvns	r2, r3
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	4013      	ands	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	409a      	lsls	r2, r3
 800123c:	0013      	movs	r3, r2
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2203      	movs	r2, #3
 8001250:	4013      	ands	r3, r2
 8001252:	2b02      	cmp	r3, #2
 8001254:	d123      	bne.n	800129e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	08da      	lsrs	r2, r3, #3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3208      	adds	r2, #8
 800125e:	0092      	lsls	r2, r2, #2
 8001260:	58d3      	ldr	r3, [r2, r3]
 8001262:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	2207      	movs	r2, #7
 8001268:	4013      	ands	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	220f      	movs	r2, #15
 800126e:	409a      	lsls	r2, r3
 8001270:	0013      	movs	r3, r2
 8001272:	43da      	mvns	r2, r3
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	4013      	ands	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	691a      	ldr	r2, [r3, #16]
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	2107      	movs	r1, #7
 8001282:	400b      	ands	r3, r1
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	409a      	lsls	r2, r3
 8001288:	0013      	movs	r3, r2
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	08da      	lsrs	r2, r3, #3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3208      	adds	r2, #8
 8001298:	0092      	lsls	r2, r2, #2
 800129a:	6939      	ldr	r1, [r7, #16]
 800129c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	2203      	movs	r2, #3
 80012aa:	409a      	lsls	r2, r3
 80012ac:	0013      	movs	r3, r2
 80012ae:	43da      	mvns	r2, r3
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2203      	movs	r2, #3
 80012bc:	401a      	ands	r2, r3
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	409a      	lsls	r2, r3
 80012c4:	0013      	movs	r3, r2
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	23c0      	movs	r3, #192	; 0xc0
 80012d8:	029b      	lsls	r3, r3, #10
 80012da:	4013      	ands	r3, r2
 80012dc:	d100      	bne.n	80012e0 <HAL_GPIO_Init+0x174>
 80012de:	e09a      	b.n	8001416 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e0:	4b54      	ldr	r3, [pc, #336]	; (8001434 <HAL_GPIO_Init+0x2c8>)
 80012e2:	699a      	ldr	r2, [r3, #24]
 80012e4:	4b53      	ldr	r3, [pc, #332]	; (8001434 <HAL_GPIO_Init+0x2c8>)
 80012e6:	2101      	movs	r1, #1
 80012e8:	430a      	orrs	r2, r1
 80012ea:	619a      	str	r2, [r3, #24]
 80012ec:	4b51      	ldr	r3, [pc, #324]	; (8001434 <HAL_GPIO_Init+0x2c8>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	2201      	movs	r2, #1
 80012f2:	4013      	ands	r3, r2
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012f8:	4a4f      	ldr	r2, [pc, #316]	; (8001438 <HAL_GPIO_Init+0x2cc>)
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	089b      	lsrs	r3, r3, #2
 80012fe:	3302      	adds	r3, #2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	589b      	ldr	r3, [r3, r2]
 8001304:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	2203      	movs	r2, #3
 800130a:	4013      	ands	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	220f      	movs	r2, #15
 8001310:	409a      	lsls	r2, r3
 8001312:	0013      	movs	r3, r2
 8001314:	43da      	mvns	r2, r3
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	4013      	ands	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	2390      	movs	r3, #144	; 0x90
 8001320:	05db      	lsls	r3, r3, #23
 8001322:	429a      	cmp	r2, r3
 8001324:	d013      	beq.n	800134e <HAL_GPIO_Init+0x1e2>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a44      	ldr	r2, [pc, #272]	; (800143c <HAL_GPIO_Init+0x2d0>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d00d      	beq.n	800134a <HAL_GPIO_Init+0x1de>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a43      	ldr	r2, [pc, #268]	; (8001440 <HAL_GPIO_Init+0x2d4>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d007      	beq.n	8001346 <HAL_GPIO_Init+0x1da>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a42      	ldr	r2, [pc, #264]	; (8001444 <HAL_GPIO_Init+0x2d8>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d101      	bne.n	8001342 <HAL_GPIO_Init+0x1d6>
 800133e:	2303      	movs	r3, #3
 8001340:	e006      	b.n	8001350 <HAL_GPIO_Init+0x1e4>
 8001342:	2305      	movs	r3, #5
 8001344:	e004      	b.n	8001350 <HAL_GPIO_Init+0x1e4>
 8001346:	2302      	movs	r3, #2
 8001348:	e002      	b.n	8001350 <HAL_GPIO_Init+0x1e4>
 800134a:	2301      	movs	r3, #1
 800134c:	e000      	b.n	8001350 <HAL_GPIO_Init+0x1e4>
 800134e:	2300      	movs	r3, #0
 8001350:	697a      	ldr	r2, [r7, #20]
 8001352:	2103      	movs	r1, #3
 8001354:	400a      	ands	r2, r1
 8001356:	0092      	lsls	r2, r2, #2
 8001358:	4093      	lsls	r3, r2
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001360:	4935      	ldr	r1, [pc, #212]	; (8001438 <HAL_GPIO_Init+0x2cc>)
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	089b      	lsrs	r3, r3, #2
 8001366:	3302      	adds	r3, #2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800136e:	4b36      	ldr	r3, [pc, #216]	; (8001448 <HAL_GPIO_Init+0x2dc>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	43da      	mvns	r2, r3
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	4013      	ands	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	2380      	movs	r3, #128	; 0x80
 8001384:	035b      	lsls	r3, r3, #13
 8001386:	4013      	ands	r3, r2
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4313      	orrs	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001392:	4b2d      	ldr	r3, [pc, #180]	; (8001448 <HAL_GPIO_Init+0x2dc>)
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001398:	4b2b      	ldr	r3, [pc, #172]	; (8001448 <HAL_GPIO_Init+0x2dc>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	43da      	mvns	r2, r3
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685a      	ldr	r2, [r3, #4]
 80013ac:	2380      	movs	r3, #128	; 0x80
 80013ae:	039b      	lsls	r3, r3, #14
 80013b0:	4013      	ands	r3, r2
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013bc:	4b22      	ldr	r3, [pc, #136]	; (8001448 <HAL_GPIO_Init+0x2dc>)
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80013c2:	4b21      	ldr	r3, [pc, #132]	; (8001448 <HAL_GPIO_Init+0x2dc>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	43da      	mvns	r2, r3
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	4013      	ands	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	2380      	movs	r3, #128	; 0x80
 80013d8:	029b      	lsls	r3, r3, #10
 80013da:	4013      	ands	r3, r2
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013e6:	4b18      	ldr	r3, [pc, #96]	; (8001448 <HAL_GPIO_Init+0x2dc>)
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80013ec:	4b16      	ldr	r3, [pc, #88]	; (8001448 <HAL_GPIO_Init+0x2dc>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	43da      	mvns	r2, r3
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	4013      	ands	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685a      	ldr	r2, [r3, #4]
 8001400:	2380      	movs	r3, #128	; 0x80
 8001402:	025b      	lsls	r3, r3, #9
 8001404:	4013      	ands	r3, r2
 8001406:	d003      	beq.n	8001410 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	4313      	orrs	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001410:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <HAL_GPIO_Init+0x2dc>)
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	3301      	adds	r3, #1
 800141a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	40da      	lsrs	r2, r3
 8001424:	1e13      	subs	r3, r2, #0
 8001426:	d000      	beq.n	800142a <HAL_GPIO_Init+0x2be>
 8001428:	e6a8      	b.n	800117c <HAL_GPIO_Init+0x10>
  } 
}
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	46c0      	nop			; (mov r8, r8)
 800142e:	46bd      	mov	sp, r7
 8001430:	b006      	add	sp, #24
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40021000 	.word	0x40021000
 8001438:	40010000 	.word	0x40010000
 800143c:	48000400 	.word	0x48000400
 8001440:	48000800 	.word	0x48000800
 8001444:	48000c00 	.word	0x48000c00
 8001448:	40010400 	.word	0x40010400

0800144c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	000a      	movs	r2, r1
 8001456:	1cbb      	adds	r3, r7, #2
 8001458:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	1cba      	adds	r2, r7, #2
 8001460:	8812      	ldrh	r2, [r2, #0]
 8001462:	4013      	ands	r3, r2
 8001464:	d004      	beq.n	8001470 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001466:	230f      	movs	r3, #15
 8001468:	18fb      	adds	r3, r7, r3
 800146a:	2201      	movs	r2, #1
 800146c:	701a      	strb	r2, [r3, #0]
 800146e:	e003      	b.n	8001478 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001470:	230f      	movs	r3, #15
 8001472:	18fb      	adds	r3, r7, r3
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001478:	230f      	movs	r3, #15
 800147a:	18fb      	adds	r3, r7, r3
 800147c:	781b      	ldrb	r3, [r3, #0]
  }
 800147e:	0018      	movs	r0, r3
 8001480:	46bd      	mov	sp, r7
 8001482:	b004      	add	sp, #16
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
 800148e:	0008      	movs	r0, r1
 8001490:	0011      	movs	r1, r2
 8001492:	1cbb      	adds	r3, r7, #2
 8001494:	1c02      	adds	r2, r0, #0
 8001496:	801a      	strh	r2, [r3, #0]
 8001498:	1c7b      	adds	r3, r7, #1
 800149a:	1c0a      	adds	r2, r1, #0
 800149c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800149e:	1c7b      	adds	r3, r7, #1
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d004      	beq.n	80014b0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014a6:	1cbb      	adds	r3, r7, #2
 80014a8:	881a      	ldrh	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014ae:	e003      	b.n	80014b8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014b0:	1cbb      	adds	r3, r7, #2
 80014b2:	881a      	ldrh	r2, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014b8:	46c0      	nop			; (mov r8, r8)
 80014ba:	46bd      	mov	sp, r7
 80014bc:	b002      	add	sp, #8
 80014be:	bd80      	pop	{r7, pc}

080014c0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	000a      	movs	r2, r1
 80014ca:	1cbb      	adds	r3, r7, #2
 80014cc:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014d4:	1cbb      	adds	r3, r7, #2
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	68fa      	ldr	r2, [r7, #12]
 80014da:	4013      	ands	r3, r2
 80014dc:	041a      	lsls	r2, r3, #16
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	43db      	mvns	r3, r3
 80014e2:	1cb9      	adds	r1, r7, #2
 80014e4:	8809      	ldrh	r1, [r1, #0]
 80014e6:	400b      	ands	r3, r1
 80014e8:	431a      	orrs	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	619a      	str	r2, [r3, #24]
}
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	46bd      	mov	sp, r7
 80014f2:	b004      	add	sp, #16
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e301      	b.n	8001b0e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2201      	movs	r2, #1
 8001510:	4013      	ands	r3, r2
 8001512:	d100      	bne.n	8001516 <HAL_RCC_OscConfig+0x1e>
 8001514:	e08d      	b.n	8001632 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001516:	4bc3      	ldr	r3, [pc, #780]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	220c      	movs	r2, #12
 800151c:	4013      	ands	r3, r2
 800151e:	2b04      	cmp	r3, #4
 8001520:	d00e      	beq.n	8001540 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001522:	4bc0      	ldr	r3, [pc, #768]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	220c      	movs	r2, #12
 8001528:	4013      	ands	r3, r2
 800152a:	2b08      	cmp	r3, #8
 800152c:	d116      	bne.n	800155c <HAL_RCC_OscConfig+0x64>
 800152e:	4bbd      	ldr	r3, [pc, #756]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 8001530:	685a      	ldr	r2, [r3, #4]
 8001532:	2380      	movs	r3, #128	; 0x80
 8001534:	025b      	lsls	r3, r3, #9
 8001536:	401a      	ands	r2, r3
 8001538:	2380      	movs	r3, #128	; 0x80
 800153a:	025b      	lsls	r3, r3, #9
 800153c:	429a      	cmp	r2, r3
 800153e:	d10d      	bne.n	800155c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001540:	4bb8      	ldr	r3, [pc, #736]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	029b      	lsls	r3, r3, #10
 8001548:	4013      	ands	r3, r2
 800154a:	d100      	bne.n	800154e <HAL_RCC_OscConfig+0x56>
 800154c:	e070      	b.n	8001630 <HAL_RCC_OscConfig+0x138>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d000      	beq.n	8001558 <HAL_RCC_OscConfig+0x60>
 8001556:	e06b      	b.n	8001630 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e2d8      	b.n	8001b0e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d107      	bne.n	8001574 <HAL_RCC_OscConfig+0x7c>
 8001564:	4baf      	ldr	r3, [pc, #700]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4bae      	ldr	r3, [pc, #696]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 800156a:	2180      	movs	r1, #128	; 0x80
 800156c:	0249      	lsls	r1, r1, #9
 800156e:	430a      	orrs	r2, r1
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	e02f      	b.n	80015d4 <HAL_RCC_OscConfig+0xdc>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d10c      	bne.n	8001596 <HAL_RCC_OscConfig+0x9e>
 800157c:	4ba9      	ldr	r3, [pc, #676]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4ba8      	ldr	r3, [pc, #672]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 8001582:	49a9      	ldr	r1, [pc, #676]	; (8001828 <HAL_RCC_OscConfig+0x330>)
 8001584:	400a      	ands	r2, r1
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	4ba6      	ldr	r3, [pc, #664]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4ba5      	ldr	r3, [pc, #660]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 800158e:	49a7      	ldr	r1, [pc, #668]	; (800182c <HAL_RCC_OscConfig+0x334>)
 8001590:	400a      	ands	r2, r1
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	e01e      	b.n	80015d4 <HAL_RCC_OscConfig+0xdc>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b05      	cmp	r3, #5
 800159c:	d10e      	bne.n	80015bc <HAL_RCC_OscConfig+0xc4>
 800159e:	4ba1      	ldr	r3, [pc, #644]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	4ba0      	ldr	r3, [pc, #640]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 80015a4:	2180      	movs	r1, #128	; 0x80
 80015a6:	02c9      	lsls	r1, r1, #11
 80015a8:	430a      	orrs	r2, r1
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	4b9d      	ldr	r3, [pc, #628]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	4b9c      	ldr	r3, [pc, #624]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 80015b2:	2180      	movs	r1, #128	; 0x80
 80015b4:	0249      	lsls	r1, r1, #9
 80015b6:	430a      	orrs	r2, r1
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	e00b      	b.n	80015d4 <HAL_RCC_OscConfig+0xdc>
 80015bc:	4b99      	ldr	r3, [pc, #612]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b98      	ldr	r3, [pc, #608]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 80015c2:	4999      	ldr	r1, [pc, #612]	; (8001828 <HAL_RCC_OscConfig+0x330>)
 80015c4:	400a      	ands	r2, r1
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	4b96      	ldr	r3, [pc, #600]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4b95      	ldr	r3, [pc, #596]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 80015ce:	4997      	ldr	r1, [pc, #604]	; (800182c <HAL_RCC_OscConfig+0x334>)
 80015d0:	400a      	ands	r2, r1
 80015d2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d014      	beq.n	8001606 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015dc:	f7ff fc3c 	bl	8000e58 <HAL_GetTick>
 80015e0:	0003      	movs	r3, r0
 80015e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015e6:	f7ff fc37 	bl	8000e58 <HAL_GetTick>
 80015ea:	0002      	movs	r2, r0
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b64      	cmp	r3, #100	; 0x64
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e28a      	b.n	8001b0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f8:	4b8a      	ldr	r3, [pc, #552]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	2380      	movs	r3, #128	; 0x80
 80015fe:	029b      	lsls	r3, r3, #10
 8001600:	4013      	ands	r3, r2
 8001602:	d0f0      	beq.n	80015e6 <HAL_RCC_OscConfig+0xee>
 8001604:	e015      	b.n	8001632 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001606:	f7ff fc27 	bl	8000e58 <HAL_GetTick>
 800160a:	0003      	movs	r3, r0
 800160c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001610:	f7ff fc22 	bl	8000e58 <HAL_GetTick>
 8001614:	0002      	movs	r2, r0
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b64      	cmp	r3, #100	; 0x64
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e275      	b.n	8001b0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001622:	4b80      	ldr	r3, [pc, #512]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	2380      	movs	r3, #128	; 0x80
 8001628:	029b      	lsls	r3, r3, #10
 800162a:	4013      	ands	r3, r2
 800162c:	d1f0      	bne.n	8001610 <HAL_RCC_OscConfig+0x118>
 800162e:	e000      	b.n	8001632 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001630:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2202      	movs	r2, #2
 8001638:	4013      	ands	r3, r2
 800163a:	d100      	bne.n	800163e <HAL_RCC_OscConfig+0x146>
 800163c:	e069      	b.n	8001712 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800163e:	4b79      	ldr	r3, [pc, #484]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	220c      	movs	r2, #12
 8001644:	4013      	ands	r3, r2
 8001646:	d00b      	beq.n	8001660 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001648:	4b76      	ldr	r3, [pc, #472]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	220c      	movs	r2, #12
 800164e:	4013      	ands	r3, r2
 8001650:	2b08      	cmp	r3, #8
 8001652:	d11c      	bne.n	800168e <HAL_RCC_OscConfig+0x196>
 8001654:	4b73      	ldr	r3, [pc, #460]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	025b      	lsls	r3, r3, #9
 800165c:	4013      	ands	r3, r2
 800165e:	d116      	bne.n	800168e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001660:	4b70      	ldr	r3, [pc, #448]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2202      	movs	r2, #2
 8001666:	4013      	ands	r3, r2
 8001668:	d005      	beq.n	8001676 <HAL_RCC_OscConfig+0x17e>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d001      	beq.n	8001676 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e24b      	b.n	8001b0e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001676:	4b6b      	ldr	r3, [pc, #428]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	22f8      	movs	r2, #248	; 0xf8
 800167c:	4393      	bics	r3, r2
 800167e:	0019      	movs	r1, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	691b      	ldr	r3, [r3, #16]
 8001684:	00da      	lsls	r2, r3, #3
 8001686:	4b67      	ldr	r3, [pc, #412]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 8001688:	430a      	orrs	r2, r1
 800168a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800168c:	e041      	b.n	8001712 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d024      	beq.n	80016e0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001696:	4b63      	ldr	r3, [pc, #396]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	4b62      	ldr	r3, [pc, #392]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 800169c:	2101      	movs	r1, #1
 800169e:	430a      	orrs	r2, r1
 80016a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a2:	f7ff fbd9 	bl	8000e58 <HAL_GetTick>
 80016a6:	0003      	movs	r3, r0
 80016a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016ac:	f7ff fbd4 	bl	8000e58 <HAL_GetTick>
 80016b0:	0002      	movs	r2, r0
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e227      	b.n	8001b0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016be:	4b59      	ldr	r3, [pc, #356]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2202      	movs	r2, #2
 80016c4:	4013      	ands	r3, r2
 80016c6:	d0f1      	beq.n	80016ac <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c8:	4b56      	ldr	r3, [pc, #344]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	22f8      	movs	r2, #248	; 0xf8
 80016ce:	4393      	bics	r3, r2
 80016d0:	0019      	movs	r1, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	00da      	lsls	r2, r3, #3
 80016d8:	4b52      	ldr	r3, [pc, #328]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 80016da:	430a      	orrs	r2, r1
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	e018      	b.n	8001712 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016e0:	4b50      	ldr	r3, [pc, #320]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4b4f      	ldr	r3, [pc, #316]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 80016e6:	2101      	movs	r1, #1
 80016e8:	438a      	bics	r2, r1
 80016ea:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ec:	f7ff fbb4 	bl	8000e58 <HAL_GetTick>
 80016f0:	0003      	movs	r3, r0
 80016f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016f6:	f7ff fbaf 	bl	8000e58 <HAL_GetTick>
 80016fa:	0002      	movs	r2, r0
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e202      	b.n	8001b0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001708:	4b46      	ldr	r3, [pc, #280]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2202      	movs	r2, #2
 800170e:	4013      	ands	r3, r2
 8001710:	d1f1      	bne.n	80016f6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2208      	movs	r2, #8
 8001718:	4013      	ands	r3, r2
 800171a:	d036      	beq.n	800178a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	69db      	ldr	r3, [r3, #28]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d019      	beq.n	8001758 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001724:	4b3f      	ldr	r3, [pc, #252]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 8001726:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001728:	4b3e      	ldr	r3, [pc, #248]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 800172a:	2101      	movs	r1, #1
 800172c:	430a      	orrs	r2, r1
 800172e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001730:	f7ff fb92 	bl	8000e58 <HAL_GetTick>
 8001734:	0003      	movs	r3, r0
 8001736:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800173a:	f7ff fb8d 	bl	8000e58 <HAL_GetTick>
 800173e:	0002      	movs	r2, r0
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e1e0      	b.n	8001b0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800174c:	4b35      	ldr	r3, [pc, #212]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	2202      	movs	r2, #2
 8001752:	4013      	ands	r3, r2
 8001754:	d0f1      	beq.n	800173a <HAL_RCC_OscConfig+0x242>
 8001756:	e018      	b.n	800178a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001758:	4b32      	ldr	r3, [pc, #200]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 800175a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800175c:	4b31      	ldr	r3, [pc, #196]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 800175e:	2101      	movs	r1, #1
 8001760:	438a      	bics	r2, r1
 8001762:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001764:	f7ff fb78 	bl	8000e58 <HAL_GetTick>
 8001768:	0003      	movs	r3, r0
 800176a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800176e:	f7ff fb73 	bl	8000e58 <HAL_GetTick>
 8001772:	0002      	movs	r2, r0
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e1c6      	b.n	8001b0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001780:	4b28      	ldr	r3, [pc, #160]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	2202      	movs	r2, #2
 8001786:	4013      	ands	r3, r2
 8001788:	d1f1      	bne.n	800176e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2204      	movs	r2, #4
 8001790:	4013      	ands	r3, r2
 8001792:	d100      	bne.n	8001796 <HAL_RCC_OscConfig+0x29e>
 8001794:	e0b4      	b.n	8001900 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001796:	201f      	movs	r0, #31
 8001798:	183b      	adds	r3, r7, r0
 800179a:	2200      	movs	r2, #0
 800179c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800179e:	4b21      	ldr	r3, [pc, #132]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 80017a0:	69da      	ldr	r2, [r3, #28]
 80017a2:	2380      	movs	r3, #128	; 0x80
 80017a4:	055b      	lsls	r3, r3, #21
 80017a6:	4013      	ands	r3, r2
 80017a8:	d110      	bne.n	80017cc <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017aa:	4b1e      	ldr	r3, [pc, #120]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 80017ac:	69da      	ldr	r2, [r3, #28]
 80017ae:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 80017b0:	2180      	movs	r1, #128	; 0x80
 80017b2:	0549      	lsls	r1, r1, #21
 80017b4:	430a      	orrs	r2, r1
 80017b6:	61da      	str	r2, [r3, #28]
 80017b8:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 80017ba:	69da      	ldr	r2, [r3, #28]
 80017bc:	2380      	movs	r3, #128	; 0x80
 80017be:	055b      	lsls	r3, r3, #21
 80017c0:	4013      	ands	r3, r2
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80017c6:	183b      	adds	r3, r7, r0
 80017c8:	2201      	movs	r2, #1
 80017ca:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017cc:	4b18      	ldr	r3, [pc, #96]	; (8001830 <HAL_RCC_OscConfig+0x338>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	2380      	movs	r3, #128	; 0x80
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	4013      	ands	r3, r2
 80017d6:	d11a      	bne.n	800180e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017d8:	4b15      	ldr	r3, [pc, #84]	; (8001830 <HAL_RCC_OscConfig+0x338>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4b14      	ldr	r3, [pc, #80]	; (8001830 <HAL_RCC_OscConfig+0x338>)
 80017de:	2180      	movs	r1, #128	; 0x80
 80017e0:	0049      	lsls	r1, r1, #1
 80017e2:	430a      	orrs	r2, r1
 80017e4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017e6:	f7ff fb37 	bl	8000e58 <HAL_GetTick>
 80017ea:	0003      	movs	r3, r0
 80017ec:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017f0:	f7ff fb32 	bl	8000e58 <HAL_GetTick>
 80017f4:	0002      	movs	r2, r0
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b64      	cmp	r3, #100	; 0x64
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e185      	b.n	8001b0e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <HAL_RCC_OscConfig+0x338>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	2380      	movs	r3, #128	; 0x80
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	4013      	ands	r3, r2
 800180c:	d0f0      	beq.n	80017f0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d10e      	bne.n	8001834 <HAL_RCC_OscConfig+0x33c>
 8001816:	4b03      	ldr	r3, [pc, #12]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 8001818:	6a1a      	ldr	r2, [r3, #32]
 800181a:	4b02      	ldr	r3, [pc, #8]	; (8001824 <HAL_RCC_OscConfig+0x32c>)
 800181c:	2101      	movs	r1, #1
 800181e:	430a      	orrs	r2, r1
 8001820:	621a      	str	r2, [r3, #32]
 8001822:	e035      	b.n	8001890 <HAL_RCC_OscConfig+0x398>
 8001824:	40021000 	.word	0x40021000
 8001828:	fffeffff 	.word	0xfffeffff
 800182c:	fffbffff 	.word	0xfffbffff
 8001830:	40007000 	.word	0x40007000
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d10c      	bne.n	8001856 <HAL_RCC_OscConfig+0x35e>
 800183c:	4bb6      	ldr	r3, [pc, #728]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 800183e:	6a1a      	ldr	r2, [r3, #32]
 8001840:	4bb5      	ldr	r3, [pc, #724]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 8001842:	2101      	movs	r1, #1
 8001844:	438a      	bics	r2, r1
 8001846:	621a      	str	r2, [r3, #32]
 8001848:	4bb3      	ldr	r3, [pc, #716]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 800184a:	6a1a      	ldr	r2, [r3, #32]
 800184c:	4bb2      	ldr	r3, [pc, #712]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 800184e:	2104      	movs	r1, #4
 8001850:	438a      	bics	r2, r1
 8001852:	621a      	str	r2, [r3, #32]
 8001854:	e01c      	b.n	8001890 <HAL_RCC_OscConfig+0x398>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	2b05      	cmp	r3, #5
 800185c:	d10c      	bne.n	8001878 <HAL_RCC_OscConfig+0x380>
 800185e:	4bae      	ldr	r3, [pc, #696]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 8001860:	6a1a      	ldr	r2, [r3, #32]
 8001862:	4bad      	ldr	r3, [pc, #692]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 8001864:	2104      	movs	r1, #4
 8001866:	430a      	orrs	r2, r1
 8001868:	621a      	str	r2, [r3, #32]
 800186a:	4bab      	ldr	r3, [pc, #684]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 800186c:	6a1a      	ldr	r2, [r3, #32]
 800186e:	4baa      	ldr	r3, [pc, #680]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 8001870:	2101      	movs	r1, #1
 8001872:	430a      	orrs	r2, r1
 8001874:	621a      	str	r2, [r3, #32]
 8001876:	e00b      	b.n	8001890 <HAL_RCC_OscConfig+0x398>
 8001878:	4ba7      	ldr	r3, [pc, #668]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 800187a:	6a1a      	ldr	r2, [r3, #32]
 800187c:	4ba6      	ldr	r3, [pc, #664]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 800187e:	2101      	movs	r1, #1
 8001880:	438a      	bics	r2, r1
 8001882:	621a      	str	r2, [r3, #32]
 8001884:	4ba4      	ldr	r3, [pc, #656]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 8001886:	6a1a      	ldr	r2, [r3, #32]
 8001888:	4ba3      	ldr	r3, [pc, #652]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 800188a:	2104      	movs	r1, #4
 800188c:	438a      	bics	r2, r1
 800188e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d014      	beq.n	80018c2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001898:	f7ff fade 	bl	8000e58 <HAL_GetTick>
 800189c:	0003      	movs	r3, r0
 800189e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018a0:	e009      	b.n	80018b6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018a2:	f7ff fad9 	bl	8000e58 <HAL_GetTick>
 80018a6:	0002      	movs	r2, r0
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	4a9b      	ldr	r2, [pc, #620]	; (8001b1c <HAL_RCC_OscConfig+0x624>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e12b      	b.n	8001b0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b6:	4b98      	ldr	r3, [pc, #608]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 80018b8:	6a1b      	ldr	r3, [r3, #32]
 80018ba:	2202      	movs	r2, #2
 80018bc:	4013      	ands	r3, r2
 80018be:	d0f0      	beq.n	80018a2 <HAL_RCC_OscConfig+0x3aa>
 80018c0:	e013      	b.n	80018ea <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c2:	f7ff fac9 	bl	8000e58 <HAL_GetTick>
 80018c6:	0003      	movs	r3, r0
 80018c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ca:	e009      	b.n	80018e0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018cc:	f7ff fac4 	bl	8000e58 <HAL_GetTick>
 80018d0:	0002      	movs	r2, r0
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	4a91      	ldr	r2, [pc, #580]	; (8001b1c <HAL_RCC_OscConfig+0x624>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e116      	b.n	8001b0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e0:	4b8d      	ldr	r3, [pc, #564]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	2202      	movs	r2, #2
 80018e6:	4013      	ands	r3, r2
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018ea:	231f      	movs	r3, #31
 80018ec:	18fb      	adds	r3, r7, r3
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d105      	bne.n	8001900 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018f4:	4b88      	ldr	r3, [pc, #544]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 80018f6:	69da      	ldr	r2, [r3, #28]
 80018f8:	4b87      	ldr	r3, [pc, #540]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 80018fa:	4989      	ldr	r1, [pc, #548]	; (8001b20 <HAL_RCC_OscConfig+0x628>)
 80018fc:	400a      	ands	r2, r1
 80018fe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2210      	movs	r2, #16
 8001906:	4013      	ands	r3, r2
 8001908:	d063      	beq.n	80019d2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d12a      	bne.n	8001968 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001912:	4b81      	ldr	r3, [pc, #516]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 8001914:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001916:	4b80      	ldr	r3, [pc, #512]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 8001918:	2104      	movs	r1, #4
 800191a:	430a      	orrs	r2, r1
 800191c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800191e:	4b7e      	ldr	r3, [pc, #504]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 8001920:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001922:	4b7d      	ldr	r3, [pc, #500]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 8001924:	2101      	movs	r1, #1
 8001926:	430a      	orrs	r2, r1
 8001928:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192a:	f7ff fa95 	bl	8000e58 <HAL_GetTick>
 800192e:	0003      	movs	r3, r0
 8001930:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001934:	f7ff fa90 	bl	8000e58 <HAL_GetTick>
 8001938:	0002      	movs	r2, r0
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e0e3      	b.n	8001b0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001946:	4b74      	ldr	r3, [pc, #464]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 8001948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800194a:	2202      	movs	r2, #2
 800194c:	4013      	ands	r3, r2
 800194e:	d0f1      	beq.n	8001934 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001950:	4b71      	ldr	r3, [pc, #452]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 8001952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001954:	22f8      	movs	r2, #248	; 0xf8
 8001956:	4393      	bics	r3, r2
 8001958:	0019      	movs	r1, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	00da      	lsls	r2, r3, #3
 8001960:	4b6d      	ldr	r3, [pc, #436]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 8001962:	430a      	orrs	r2, r1
 8001964:	635a      	str	r2, [r3, #52]	; 0x34
 8001966:	e034      	b.n	80019d2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	3305      	adds	r3, #5
 800196e:	d111      	bne.n	8001994 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001970:	4b69      	ldr	r3, [pc, #420]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 8001972:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001974:	4b68      	ldr	r3, [pc, #416]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 8001976:	2104      	movs	r1, #4
 8001978:	438a      	bics	r2, r1
 800197a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800197c:	4b66      	ldr	r3, [pc, #408]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 800197e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001980:	22f8      	movs	r2, #248	; 0xf8
 8001982:	4393      	bics	r3, r2
 8001984:	0019      	movs	r1, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	00da      	lsls	r2, r3, #3
 800198c:	4b62      	ldr	r3, [pc, #392]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 800198e:	430a      	orrs	r2, r1
 8001990:	635a      	str	r2, [r3, #52]	; 0x34
 8001992:	e01e      	b.n	80019d2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001994:	4b60      	ldr	r3, [pc, #384]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 8001996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001998:	4b5f      	ldr	r3, [pc, #380]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 800199a:	2104      	movs	r1, #4
 800199c:	430a      	orrs	r2, r1
 800199e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80019a0:	4b5d      	ldr	r3, [pc, #372]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 80019a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019a4:	4b5c      	ldr	r3, [pc, #368]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 80019a6:	2101      	movs	r1, #1
 80019a8:	438a      	bics	r2, r1
 80019aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ac:	f7ff fa54 	bl	8000e58 <HAL_GetTick>
 80019b0:	0003      	movs	r3, r0
 80019b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80019b6:	f7ff fa4f 	bl	8000e58 <HAL_GetTick>
 80019ba:	0002      	movs	r2, r0
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e0a2      	b.n	8001b0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80019c8:	4b53      	ldr	r3, [pc, #332]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 80019ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019cc:	2202      	movs	r2, #2
 80019ce:	4013      	ands	r3, r2
 80019d0:	d1f1      	bne.n	80019b6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d100      	bne.n	80019dc <HAL_RCC_OscConfig+0x4e4>
 80019da:	e097      	b.n	8001b0c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019dc:	4b4e      	ldr	r3, [pc, #312]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	220c      	movs	r2, #12
 80019e2:	4013      	ands	r3, r2
 80019e4:	2b08      	cmp	r3, #8
 80019e6:	d100      	bne.n	80019ea <HAL_RCC_OscConfig+0x4f2>
 80019e8:	e06b      	b.n	8001ac2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d14c      	bne.n	8001a8c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f2:	4b49      	ldr	r3, [pc, #292]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	4b48      	ldr	r3, [pc, #288]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 80019f8:	494a      	ldr	r1, [pc, #296]	; (8001b24 <HAL_RCC_OscConfig+0x62c>)
 80019fa:	400a      	ands	r2, r1
 80019fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fe:	f7ff fa2b 	bl	8000e58 <HAL_GetTick>
 8001a02:	0003      	movs	r3, r0
 8001a04:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a08:	f7ff fa26 	bl	8000e58 <HAL_GetTick>
 8001a0c:	0002      	movs	r2, r0
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e079      	b.n	8001b0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a1a:	4b3f      	ldr	r3, [pc, #252]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	2380      	movs	r3, #128	; 0x80
 8001a20:	049b      	lsls	r3, r3, #18
 8001a22:	4013      	ands	r3, r2
 8001a24:	d1f0      	bne.n	8001a08 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a26:	4b3c      	ldr	r3, [pc, #240]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 8001a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2a:	220f      	movs	r2, #15
 8001a2c:	4393      	bics	r3, r2
 8001a2e:	0019      	movs	r1, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a34:	4b38      	ldr	r3, [pc, #224]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 8001a36:	430a      	orrs	r2, r1
 8001a38:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a3a:	4b37      	ldr	r3, [pc, #220]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	4a3a      	ldr	r2, [pc, #232]	; (8001b28 <HAL_RCC_OscConfig+0x630>)
 8001a40:	4013      	ands	r3, r2
 8001a42:	0019      	movs	r1, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	4b32      	ldr	r3, [pc, #200]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 8001a50:	430a      	orrs	r2, r1
 8001a52:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a54:	4b30      	ldr	r3, [pc, #192]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4b2f      	ldr	r3, [pc, #188]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 8001a5a:	2180      	movs	r1, #128	; 0x80
 8001a5c:	0449      	lsls	r1, r1, #17
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a62:	f7ff f9f9 	bl	8000e58 <HAL_GetTick>
 8001a66:	0003      	movs	r3, r0
 8001a68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a6c:	f7ff f9f4 	bl	8000e58 <HAL_GetTick>
 8001a70:	0002      	movs	r2, r0
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e047      	b.n	8001b0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a7e:	4b26      	ldr	r3, [pc, #152]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	2380      	movs	r3, #128	; 0x80
 8001a84:	049b      	lsls	r3, r3, #18
 8001a86:	4013      	ands	r3, r2
 8001a88:	d0f0      	beq.n	8001a6c <HAL_RCC_OscConfig+0x574>
 8001a8a:	e03f      	b.n	8001b0c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a8c:	4b22      	ldr	r3, [pc, #136]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 8001a92:	4924      	ldr	r1, [pc, #144]	; (8001b24 <HAL_RCC_OscConfig+0x62c>)
 8001a94:	400a      	ands	r2, r1
 8001a96:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a98:	f7ff f9de 	bl	8000e58 <HAL_GetTick>
 8001a9c:	0003      	movs	r3, r0
 8001a9e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa2:	f7ff f9d9 	bl	8000e58 <HAL_GetTick>
 8001aa6:	0002      	movs	r2, r0
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e02c      	b.n	8001b0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab4:	4b18      	ldr	r3, [pc, #96]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	049b      	lsls	r3, r3, #18
 8001abc:	4013      	ands	r3, r2
 8001abe:	d1f0      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x5aa>
 8001ac0:	e024      	b.n	8001b0c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d101      	bne.n	8001ace <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e01f      	b.n	8001b0e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001ace:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001ad4:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <HAL_RCC_OscConfig+0x620>)
 8001ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	025b      	lsls	r3, r3, #9
 8001ae0:	401a      	ands	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d10e      	bne.n	8001b08 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	220f      	movs	r2, #15
 8001aee:	401a      	ands	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d107      	bne.n	8001b08 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	23f0      	movs	r3, #240	; 0xf0
 8001afc:	039b      	lsls	r3, r3, #14
 8001afe:	401a      	ands	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d001      	beq.n	8001b0c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e000      	b.n	8001b0e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	0018      	movs	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	b008      	add	sp, #32
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	46c0      	nop			; (mov r8, r8)
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	00001388 	.word	0x00001388
 8001b20:	efffffff 	.word	0xefffffff
 8001b24:	feffffff 	.word	0xfeffffff
 8001b28:	ffc2ffff 	.word	0xffc2ffff

08001b2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e0b3      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b40:	4b5b      	ldr	r3, [pc, #364]	; (8001cb0 <HAL_RCC_ClockConfig+0x184>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2201      	movs	r2, #1
 8001b46:	4013      	ands	r3, r2
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d911      	bls.n	8001b72 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4e:	4b58      	ldr	r3, [pc, #352]	; (8001cb0 <HAL_RCC_ClockConfig+0x184>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2201      	movs	r2, #1
 8001b54:	4393      	bics	r3, r2
 8001b56:	0019      	movs	r1, r3
 8001b58:	4b55      	ldr	r3, [pc, #340]	; (8001cb0 <HAL_RCC_ClockConfig+0x184>)
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b60:	4b53      	ldr	r3, [pc, #332]	; (8001cb0 <HAL_RCC_ClockConfig+0x184>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2201      	movs	r2, #1
 8001b66:	4013      	ands	r3, r2
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d001      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e09a      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2202      	movs	r2, #2
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d015      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2204      	movs	r2, #4
 8001b82:	4013      	ands	r3, r2
 8001b84:	d006      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b86:	4b4b      	ldr	r3, [pc, #300]	; (8001cb4 <HAL_RCC_ClockConfig+0x188>)
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	4b4a      	ldr	r3, [pc, #296]	; (8001cb4 <HAL_RCC_ClockConfig+0x188>)
 8001b8c:	21e0      	movs	r1, #224	; 0xe0
 8001b8e:	00c9      	lsls	r1, r1, #3
 8001b90:	430a      	orrs	r2, r1
 8001b92:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b94:	4b47      	ldr	r3, [pc, #284]	; (8001cb4 <HAL_RCC_ClockConfig+0x188>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	22f0      	movs	r2, #240	; 0xf0
 8001b9a:	4393      	bics	r3, r2
 8001b9c:	0019      	movs	r1, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689a      	ldr	r2, [r3, #8]
 8001ba2:	4b44      	ldr	r3, [pc, #272]	; (8001cb4 <HAL_RCC_ClockConfig+0x188>)
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2201      	movs	r2, #1
 8001bae:	4013      	ands	r3, r2
 8001bb0:	d040      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d107      	bne.n	8001bca <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bba:	4b3e      	ldr	r3, [pc, #248]	; (8001cb4 <HAL_RCC_ClockConfig+0x188>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	029b      	lsls	r3, r3, #10
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d114      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e06e      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d107      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bd2:	4b38      	ldr	r3, [pc, #224]	; (8001cb4 <HAL_RCC_ClockConfig+0x188>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	2380      	movs	r3, #128	; 0x80
 8001bd8:	049b      	lsls	r3, r3, #18
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d108      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e062      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be2:	4b34      	ldr	r3, [pc, #208]	; (8001cb4 <HAL_RCC_ClockConfig+0x188>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2202      	movs	r2, #2
 8001be8:	4013      	ands	r3, r2
 8001bea:	d101      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e05b      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bf0:	4b30      	ldr	r3, [pc, #192]	; (8001cb4 <HAL_RCC_ClockConfig+0x188>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	4393      	bics	r3, r2
 8001bf8:	0019      	movs	r1, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	4b2d      	ldr	r3, [pc, #180]	; (8001cb4 <HAL_RCC_ClockConfig+0x188>)
 8001c00:	430a      	orrs	r2, r1
 8001c02:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c04:	f7ff f928 	bl	8000e58 <HAL_GetTick>
 8001c08:	0003      	movs	r3, r0
 8001c0a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0c:	e009      	b.n	8001c22 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c0e:	f7ff f923 	bl	8000e58 <HAL_GetTick>
 8001c12:	0002      	movs	r2, r0
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	4a27      	ldr	r2, [pc, #156]	; (8001cb8 <HAL_RCC_ClockConfig+0x18c>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e042      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c22:	4b24      	ldr	r3, [pc, #144]	; (8001cb4 <HAL_RCC_ClockConfig+0x188>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	220c      	movs	r2, #12
 8001c28:	401a      	ands	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d1ec      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c34:	4b1e      	ldr	r3, [pc, #120]	; (8001cb0 <HAL_RCC_ClockConfig+0x184>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d211      	bcs.n	8001c66 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c42:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <HAL_RCC_ClockConfig+0x184>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2201      	movs	r2, #1
 8001c48:	4393      	bics	r3, r2
 8001c4a:	0019      	movs	r1, r3
 8001c4c:	4b18      	ldr	r3, [pc, #96]	; (8001cb0 <HAL_RCC_ClockConfig+0x184>)
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c54:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <HAL_RCC_ClockConfig+0x184>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d001      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e020      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2204      	movs	r2, #4
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	d009      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c70:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <HAL_RCC_ClockConfig+0x188>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	4a11      	ldr	r2, [pc, #68]	; (8001cbc <HAL_RCC_ClockConfig+0x190>)
 8001c76:	4013      	ands	r3, r2
 8001c78:	0019      	movs	r1, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68da      	ldr	r2, [r3, #12]
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	; (8001cb4 <HAL_RCC_ClockConfig+0x188>)
 8001c80:	430a      	orrs	r2, r1
 8001c82:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c84:	f000 f82e 	bl	8001ce4 <HAL_RCC_GetSysClockFreq>
 8001c88:	0001      	movs	r1, r0
 8001c8a:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <HAL_RCC_ClockConfig+0x188>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	091b      	lsrs	r3, r3, #4
 8001c90:	220f      	movs	r2, #15
 8001c92:	4013      	ands	r3, r2
 8001c94:	4a0a      	ldr	r2, [pc, #40]	; (8001cc0 <HAL_RCC_ClockConfig+0x194>)
 8001c96:	5cd3      	ldrb	r3, [r2, r3]
 8001c98:	000a      	movs	r2, r1
 8001c9a:	40da      	lsrs	r2, r3
 8001c9c:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <HAL_RCC_ClockConfig+0x198>)
 8001c9e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ca0:	2003      	movs	r0, #3
 8001ca2:	f7ff f893 	bl	8000dcc <HAL_InitTick>
  
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	0018      	movs	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	b004      	add	sp, #16
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40022000 	.word	0x40022000
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	00001388 	.word	0x00001388
 8001cbc:	fffff8ff 	.word	0xfffff8ff
 8001cc0:	08005618 	.word	0x08005618
 8001cc4:	20000008 	.word	0x20000008

08001cc8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to 
  *         the Cortex-M0 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8001ccc:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <HAL_RCC_EnableCSS+0x18>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4b03      	ldr	r3, [pc, #12]	; (8001ce0 <HAL_RCC_EnableCSS+0x18>)
 8001cd2:	2180      	movs	r1, #128	; 0x80
 8001cd4:	0309      	lsls	r1, r1, #12
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	601a      	str	r2, [r3, #0]
}
 8001cda:	46c0      	nop			; (mov r8, r8)
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40021000 	.word	0x40021000

08001ce4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60bb      	str	r3, [r7, #8]
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001cfe:	4b20      	ldr	r3, [pc, #128]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	220c      	movs	r2, #12
 8001d08:	4013      	ands	r3, r2
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	d002      	beq.n	8001d14 <HAL_RCC_GetSysClockFreq+0x30>
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	d003      	beq.n	8001d1a <HAL_RCC_GetSysClockFreq+0x36>
 8001d12:	e02c      	b.n	8001d6e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d14:	4b1b      	ldr	r3, [pc, #108]	; (8001d84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d16:	613b      	str	r3, [r7, #16]
      break;
 8001d18:	e02c      	b.n	8001d74 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	0c9b      	lsrs	r3, r3, #18
 8001d1e:	220f      	movs	r2, #15
 8001d20:	4013      	ands	r3, r2
 8001d22:	4a19      	ldr	r2, [pc, #100]	; (8001d88 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d24:	5cd3      	ldrb	r3, [r2, r3]
 8001d26:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001d28:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2c:	220f      	movs	r2, #15
 8001d2e:	4013      	ands	r3, r2
 8001d30:	4a16      	ldr	r2, [pc, #88]	; (8001d8c <HAL_RCC_GetSysClockFreq+0xa8>)
 8001d32:	5cd3      	ldrb	r3, [r2, r3]
 8001d34:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	2380      	movs	r3, #128	; 0x80
 8001d3a:	025b      	lsls	r3, r3, #9
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d009      	beq.n	8001d54 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d40:	68b9      	ldr	r1, [r7, #8]
 8001d42:	4810      	ldr	r0, [pc, #64]	; (8001d84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d44:	f7fe f9f2 	bl	800012c <__udivsi3>
 8001d48:	0003      	movs	r3, r0
 8001d4a:	001a      	movs	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4353      	muls	r3, r2
 8001d50:	617b      	str	r3, [r7, #20]
 8001d52:	e009      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	000a      	movs	r2, r1
 8001d58:	0152      	lsls	r2, r2, #5
 8001d5a:	1a52      	subs	r2, r2, r1
 8001d5c:	0193      	lsls	r3, r2, #6
 8001d5e:	1a9b      	subs	r3, r3, r2
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	185b      	adds	r3, r3, r1
 8001d64:	021b      	lsls	r3, r3, #8
 8001d66:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	613b      	str	r3, [r7, #16]
      break;
 8001d6c:	e002      	b.n	8001d74 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d6e:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d70:	613b      	str	r3, [r7, #16]
      break;
 8001d72:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d74:	693b      	ldr	r3, [r7, #16]
}
 8001d76:	0018      	movs	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	b006      	add	sp, #24
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	40021000 	.word	0x40021000
 8001d84:	007a1200 	.word	0x007a1200
 8001d88:	08005630 	.word	0x08005630
 8001d8c:	08005640 	.word	0x08005640

08001d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d94:	4b02      	ldr	r3, [pc, #8]	; (8001da0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d96:	681b      	ldr	r3, [r3, #0]
}
 8001d98:	0018      	movs	r0, r3
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	46c0      	nop			; (mov r8, r8)
 8001da0:	20000008 	.word	0x20000008

08001da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001da8:	f7ff fff2 	bl	8001d90 <HAL_RCC_GetHCLKFreq>
 8001dac:	0001      	movs	r1, r0
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	0a1b      	lsrs	r3, r3, #8
 8001db4:	2207      	movs	r2, #7
 8001db6:	4013      	ands	r3, r2
 8001db8:	4a04      	ldr	r2, [pc, #16]	; (8001dcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dba:	5cd3      	ldrb	r3, [r2, r3]
 8001dbc:	40d9      	lsrs	r1, r3
 8001dbe:	000b      	movs	r3, r1
}    
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	46c0      	nop			; (mov r8, r8)
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	08005628 	.word	0x08005628

08001dd0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8001dd4:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <HAL_RCC_NMI_IRQHandler+0x20>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	2280      	movs	r2, #128	; 0x80
 8001dda:	4013      	ands	r3, r2
 8001ddc:	2b80      	cmp	r3, #128	; 0x80
 8001dde:	d104      	bne.n	8001dea <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8001de0:	f000 f80a 	bl	8001df8 <HAL_RCC_CSSCallback>
    
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8001de4:	4b03      	ldr	r3, [pc, #12]	; (8001df4 <HAL_RCC_NMI_IRQHandler+0x24>)
 8001de6:	2280      	movs	r2, #128	; 0x80
 8001de8:	701a      	strb	r2, [r3, #0]
  }
}
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40021000 	.word	0x40021000
 8001df4:	4002100a 	.word	0x4002100a

08001df8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */ 
}
 8001dfc:	46c0      	nop			; (mov r8, r8)
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	2380      	movs	r3, #128	; 0x80
 8001e1a:	025b      	lsls	r3, r3, #9
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	d100      	bne.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001e20:	e08e      	b.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001e22:	2017      	movs	r0, #23
 8001e24:	183b      	adds	r3, r7, r0
 8001e26:	2200      	movs	r2, #0
 8001e28:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e2a:	4b57      	ldr	r3, [pc, #348]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e2c:	69da      	ldr	r2, [r3, #28]
 8001e2e:	2380      	movs	r3, #128	; 0x80
 8001e30:	055b      	lsls	r3, r3, #21
 8001e32:	4013      	ands	r3, r2
 8001e34:	d110      	bne.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e36:	4b54      	ldr	r3, [pc, #336]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e38:	69da      	ldr	r2, [r3, #28]
 8001e3a:	4b53      	ldr	r3, [pc, #332]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e3c:	2180      	movs	r1, #128	; 0x80
 8001e3e:	0549      	lsls	r1, r1, #21
 8001e40:	430a      	orrs	r2, r1
 8001e42:	61da      	str	r2, [r3, #28]
 8001e44:	4b50      	ldr	r3, [pc, #320]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e46:	69da      	ldr	r2, [r3, #28]
 8001e48:	2380      	movs	r3, #128	; 0x80
 8001e4a:	055b      	lsls	r3, r3, #21
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e52:	183b      	adds	r3, r7, r0
 8001e54:	2201      	movs	r2, #1
 8001e56:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e58:	4b4c      	ldr	r3, [pc, #304]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	2380      	movs	r3, #128	; 0x80
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	4013      	ands	r3, r2
 8001e62:	d11a      	bne.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e64:	4b49      	ldr	r3, [pc, #292]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4b48      	ldr	r3, [pc, #288]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001e6a:	2180      	movs	r1, #128	; 0x80
 8001e6c:	0049      	lsls	r1, r1, #1
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e72:	f7fe fff1 	bl	8000e58 <HAL_GetTick>
 8001e76:	0003      	movs	r3, r0
 8001e78:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7a:	e008      	b.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e7c:	f7fe ffec 	bl	8000e58 <HAL_GetTick>
 8001e80:	0002      	movs	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b64      	cmp	r3, #100	; 0x64
 8001e88:	d901      	bls.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e077      	b.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8e:	4b3f      	ldr	r3, [pc, #252]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	2380      	movs	r3, #128	; 0x80
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	4013      	ands	r3, r2
 8001e98:	d0f0      	beq.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e9a:	4b3b      	ldr	r3, [pc, #236]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e9c:	6a1a      	ldr	r2, [r3, #32]
 8001e9e:	23c0      	movs	r3, #192	; 0xc0
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d034      	beq.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	23c0      	movs	r3, #192	; 0xc0
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d02c      	beq.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ebc:	4b32      	ldr	r3, [pc, #200]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	4a33      	ldr	r2, [pc, #204]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ec6:	4b30      	ldr	r3, [pc, #192]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ec8:	6a1a      	ldr	r2, [r3, #32]
 8001eca:	4b2f      	ldr	r3, [pc, #188]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ecc:	2180      	movs	r1, #128	; 0x80
 8001ece:	0249      	lsls	r1, r1, #9
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ed4:	4b2c      	ldr	r3, [pc, #176]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ed6:	6a1a      	ldr	r2, [r3, #32]
 8001ed8:	4b2b      	ldr	r3, [pc, #172]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001eda:	492e      	ldr	r1, [pc, #184]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001edc:	400a      	ands	r2, r1
 8001ede:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ee0:	4b29      	ldr	r3, [pc, #164]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	4013      	ands	r3, r2
 8001eec:	d013      	beq.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eee:	f7fe ffb3 	bl	8000e58 <HAL_GetTick>
 8001ef2:	0003      	movs	r3, r0
 8001ef4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef6:	e009      	b.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ef8:	f7fe ffae 	bl	8000e58 <HAL_GetTick>
 8001efc:	0002      	movs	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	4a25      	ldr	r2, [pc, #148]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e038      	b.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f0c:	4b1e      	ldr	r3, [pc, #120]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	2202      	movs	r2, #2
 8001f12:	4013      	ands	r3, r2
 8001f14:	d0f0      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f16:	4b1c      	ldr	r3, [pc, #112]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	4a1d      	ldr	r2, [pc, #116]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	0019      	movs	r1, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	4b18      	ldr	r3, [pc, #96]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f26:	430a      	orrs	r2, r1
 8001f28:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f2a:	2317      	movs	r3, #23
 8001f2c:	18fb      	adds	r3, r7, r3
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d105      	bne.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f34:	4b14      	ldr	r3, [pc, #80]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f36:	69da      	ldr	r2, [r3, #28]
 8001f38:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f3a:	4918      	ldr	r1, [pc, #96]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001f3c:	400a      	ands	r2, r1
 8001f3e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2201      	movs	r2, #1
 8001f46:	4013      	ands	r3, r2
 8001f48:	d009      	beq.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f4a:	4b0f      	ldr	r3, [pc, #60]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	2203      	movs	r2, #3
 8001f50:	4393      	bics	r3, r2
 8001f52:	0019      	movs	r1, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2220      	movs	r2, #32
 8001f64:	4013      	ands	r3, r2
 8001f66:	d009      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f68:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6c:	2210      	movs	r2, #16
 8001f6e:	4393      	bics	r3, r2
 8001f70:	0019      	movs	r1, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	0018      	movs	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	b006      	add	sp, #24
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	40007000 	.word	0x40007000
 8001f90:	fffffcff 	.word	0xfffffcff
 8001f94:	fffeffff 	.word	0xfffeffff
 8001f98:	00001388 	.word	0x00001388
 8001f9c:	efffffff 	.word	0xefffffff

08001fa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e042      	b.n	8002038 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	223d      	movs	r2, #61	; 0x3d
 8001fb6:	5c9b      	ldrb	r3, [r3, r2]
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d107      	bne.n	8001fce <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	223c      	movs	r2, #60	; 0x3c
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	0018      	movs	r0, r3
 8001fca:	f7fe fd9d 	bl	8000b08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	223d      	movs	r2, #61	; 0x3d
 8001fd2:	2102      	movs	r1, #2
 8001fd4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3304      	adds	r3, #4
 8001fde:	0019      	movs	r1, r3
 8001fe0:	0010      	movs	r0, r2
 8001fe2:	f000 fa5b 	bl	800249c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2246      	movs	r2, #70	; 0x46
 8001fea:	2101      	movs	r1, #1
 8001fec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	223e      	movs	r2, #62	; 0x3e
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	5499      	strb	r1, [r3, r2]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	223f      	movs	r2, #63	; 0x3f
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	5499      	strb	r1, [r3, r2]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2240      	movs	r2, #64	; 0x40
 8002002:	2101      	movs	r1, #1
 8002004:	5499      	strb	r1, [r3, r2]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2241      	movs	r2, #65	; 0x41
 800200a:	2101      	movs	r1, #1
 800200c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2242      	movs	r2, #66	; 0x42
 8002012:	2101      	movs	r1, #1
 8002014:	5499      	strb	r1, [r3, r2]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2243      	movs	r2, #67	; 0x43
 800201a:	2101      	movs	r1, #1
 800201c:	5499      	strb	r1, [r3, r2]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2244      	movs	r2, #68	; 0x44
 8002022:	2101      	movs	r1, #1
 8002024:	5499      	strb	r1, [r3, r2]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2245      	movs	r2, #69	; 0x45
 800202a:	2101      	movs	r1, #1
 800202c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	223d      	movs	r2, #61	; 0x3d
 8002032:	2101      	movs	r1, #1
 8002034:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	0018      	movs	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	b002      	add	sp, #8
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	223d      	movs	r2, #61	; 0x3d
 800204c:	5c9b      	ldrb	r3, [r3, r2]
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b01      	cmp	r3, #1
 8002052:	d001      	beq.n	8002058 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e035      	b.n	80020c4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	223d      	movs	r2, #61	; 0x3d
 800205c:	2102      	movs	r1, #2
 800205e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2101      	movs	r1, #1
 800206c:	430a      	orrs	r2, r1
 800206e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a15      	ldr	r2, [pc, #84]	; (80020cc <HAL_TIM_Base_Start_IT+0x8c>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d009      	beq.n	800208e <HAL_TIM_Base_Start_IT+0x4e>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a14      	ldr	r2, [pc, #80]	; (80020d0 <HAL_TIM_Base_Start_IT+0x90>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d004      	beq.n	800208e <HAL_TIM_Base_Start_IT+0x4e>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a12      	ldr	r2, [pc, #72]	; (80020d4 <HAL_TIM_Base_Start_IT+0x94>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d111      	bne.n	80020b2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	2207      	movs	r2, #7
 8002096:	4013      	ands	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2b06      	cmp	r3, #6
 800209e:	d010      	beq.n	80020c2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2101      	movs	r1, #1
 80020ac:	430a      	orrs	r2, r1
 80020ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020b0:	e007      	b.n	80020c2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2101      	movs	r1, #1
 80020be:	430a      	orrs	r2, r1
 80020c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	0018      	movs	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b004      	add	sp, #16
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40012c00 	.word	0x40012c00
 80020d0:	40000400 	.word	0x40000400
 80020d4:	40014000 	.word	0x40014000

080020d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	2202      	movs	r2, #2
 80020f4:	4013      	ands	r3, r2
 80020f6:	d021      	beq.n	800213c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2202      	movs	r2, #2
 80020fc:	4013      	ands	r3, r2
 80020fe:	d01d      	beq.n	800213c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2203      	movs	r2, #3
 8002106:	4252      	negs	r2, r2
 8002108:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	2203      	movs	r2, #3
 8002118:	4013      	ands	r3, r2
 800211a:	d004      	beq.n	8002126 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	0018      	movs	r0, r3
 8002120:	f000 f9a4 	bl	800246c <HAL_TIM_IC_CaptureCallback>
 8002124:	e007      	b.n	8002136 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	0018      	movs	r0, r3
 800212a:	f000 f997 	bl	800245c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	0018      	movs	r0, r3
 8002132:	f000 f9a3 	bl	800247c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2204      	movs	r2, #4
 8002140:	4013      	ands	r3, r2
 8002142:	d022      	beq.n	800218a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2204      	movs	r2, #4
 8002148:	4013      	ands	r3, r2
 800214a:	d01e      	beq.n	800218a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2205      	movs	r2, #5
 8002152:	4252      	negs	r2, r2
 8002154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2202      	movs	r2, #2
 800215a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	699a      	ldr	r2, [r3, #24]
 8002162:	23c0      	movs	r3, #192	; 0xc0
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4013      	ands	r3, r2
 8002168:	d004      	beq.n	8002174 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	0018      	movs	r0, r3
 800216e:	f000 f97d 	bl	800246c <HAL_TIM_IC_CaptureCallback>
 8002172:	e007      	b.n	8002184 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	0018      	movs	r0, r3
 8002178:	f000 f970 	bl	800245c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	0018      	movs	r0, r3
 8002180:	f000 f97c 	bl	800247c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	2208      	movs	r2, #8
 800218e:	4013      	ands	r3, r2
 8002190:	d021      	beq.n	80021d6 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2208      	movs	r2, #8
 8002196:	4013      	ands	r3, r2
 8002198:	d01d      	beq.n	80021d6 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2209      	movs	r2, #9
 80021a0:	4252      	negs	r2, r2
 80021a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2204      	movs	r2, #4
 80021a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	2203      	movs	r2, #3
 80021b2:	4013      	ands	r3, r2
 80021b4:	d004      	beq.n	80021c0 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	0018      	movs	r0, r3
 80021ba:	f000 f957 	bl	800246c <HAL_TIM_IC_CaptureCallback>
 80021be:	e007      	b.n	80021d0 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	0018      	movs	r0, r3
 80021c4:	f000 f94a 	bl	800245c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	0018      	movs	r0, r3
 80021cc:	f000 f956 	bl	800247c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2210      	movs	r2, #16
 80021da:	4013      	ands	r3, r2
 80021dc:	d022      	beq.n	8002224 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2210      	movs	r2, #16
 80021e2:	4013      	ands	r3, r2
 80021e4:	d01e      	beq.n	8002224 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2211      	movs	r2, #17
 80021ec:	4252      	negs	r2, r2
 80021ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2208      	movs	r2, #8
 80021f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	69da      	ldr	r2, [r3, #28]
 80021fc:	23c0      	movs	r3, #192	; 0xc0
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4013      	ands	r3, r2
 8002202:	d004      	beq.n	800220e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	0018      	movs	r0, r3
 8002208:	f000 f930 	bl	800246c <HAL_TIM_IC_CaptureCallback>
 800220c:	e007      	b.n	800221e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	0018      	movs	r0, r3
 8002212:	f000 f923 	bl	800245c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	0018      	movs	r0, r3
 800221a:	f000 f92f 	bl	800247c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2201      	movs	r2, #1
 8002228:	4013      	ands	r3, r2
 800222a:	d00c      	beq.n	8002246 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2201      	movs	r2, #1
 8002230:	4013      	ands	r3, r2
 8002232:	d008      	beq.n	8002246 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2202      	movs	r2, #2
 800223a:	4252      	negs	r2, r2
 800223c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	0018      	movs	r0, r3
 8002242:	f7fe fb87 	bl	8000954 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	2280      	movs	r2, #128	; 0x80
 800224a:	4013      	ands	r3, r2
 800224c:	d00c      	beq.n	8002268 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2280      	movs	r2, #128	; 0x80
 8002252:	4013      	ands	r3, r2
 8002254:	d008      	beq.n	8002268 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2281      	movs	r2, #129	; 0x81
 800225c:	4252      	negs	r2, r2
 800225e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	0018      	movs	r0, r3
 8002264:	f000 fa98 	bl	8002798 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	2240      	movs	r2, #64	; 0x40
 800226c:	4013      	ands	r3, r2
 800226e:	d00c      	beq.n	800228a <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2240      	movs	r2, #64	; 0x40
 8002274:	4013      	ands	r3, r2
 8002276:	d008      	beq.n	800228a <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2241      	movs	r2, #65	; 0x41
 800227e:	4252      	negs	r2, r2
 8002280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	0018      	movs	r0, r3
 8002286:	f000 f901 	bl	800248c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2220      	movs	r2, #32
 800228e:	4013      	ands	r3, r2
 8002290:	d00c      	beq.n	80022ac <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2220      	movs	r2, #32
 8002296:	4013      	ands	r3, r2
 8002298:	d008      	beq.n	80022ac <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2221      	movs	r2, #33	; 0x21
 80022a0:	4252      	negs	r2, r2
 80022a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	0018      	movs	r0, r3
 80022a8:	f000 fa6e 	bl	8002788 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022ac:	46c0      	nop			; (mov r8, r8)
 80022ae:	46bd      	mov	sp, r7
 80022b0:	b004      	add	sp, #16
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022be:	230f      	movs	r3, #15
 80022c0:	18fb      	adds	r3, r7, r3
 80022c2:	2200      	movs	r2, #0
 80022c4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	223c      	movs	r2, #60	; 0x3c
 80022ca:	5c9b      	ldrb	r3, [r3, r2]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d101      	bne.n	80022d4 <HAL_TIM_ConfigClockSource+0x20>
 80022d0:	2302      	movs	r3, #2
 80022d2:	e0bc      	b.n	800244e <HAL_TIM_ConfigClockSource+0x19a>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	223c      	movs	r2, #60	; 0x3c
 80022d8:	2101      	movs	r1, #1
 80022da:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	223d      	movs	r2, #61	; 0x3d
 80022e0:	2102      	movs	r1, #2
 80022e2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	2277      	movs	r2, #119	; 0x77
 80022f0:	4393      	bics	r3, r2
 80022f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	4a58      	ldr	r2, [pc, #352]	; (8002458 <HAL_TIM_ConfigClockSource+0x1a4>)
 80022f8:	4013      	ands	r3, r2
 80022fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2280      	movs	r2, #128	; 0x80
 800230a:	0192      	lsls	r2, r2, #6
 800230c:	4293      	cmp	r3, r2
 800230e:	d040      	beq.n	8002392 <HAL_TIM_ConfigClockSource+0xde>
 8002310:	2280      	movs	r2, #128	; 0x80
 8002312:	0192      	lsls	r2, r2, #6
 8002314:	4293      	cmp	r3, r2
 8002316:	d900      	bls.n	800231a <HAL_TIM_ConfigClockSource+0x66>
 8002318:	e088      	b.n	800242c <HAL_TIM_ConfigClockSource+0x178>
 800231a:	2280      	movs	r2, #128	; 0x80
 800231c:	0152      	lsls	r2, r2, #5
 800231e:	4293      	cmp	r3, r2
 8002320:	d100      	bne.n	8002324 <HAL_TIM_ConfigClockSource+0x70>
 8002322:	e088      	b.n	8002436 <HAL_TIM_ConfigClockSource+0x182>
 8002324:	2280      	movs	r2, #128	; 0x80
 8002326:	0152      	lsls	r2, r2, #5
 8002328:	4293      	cmp	r3, r2
 800232a:	d900      	bls.n	800232e <HAL_TIM_ConfigClockSource+0x7a>
 800232c:	e07e      	b.n	800242c <HAL_TIM_ConfigClockSource+0x178>
 800232e:	2b70      	cmp	r3, #112	; 0x70
 8002330:	d018      	beq.n	8002364 <HAL_TIM_ConfigClockSource+0xb0>
 8002332:	d900      	bls.n	8002336 <HAL_TIM_ConfigClockSource+0x82>
 8002334:	e07a      	b.n	800242c <HAL_TIM_ConfigClockSource+0x178>
 8002336:	2b60      	cmp	r3, #96	; 0x60
 8002338:	d04f      	beq.n	80023da <HAL_TIM_ConfigClockSource+0x126>
 800233a:	d900      	bls.n	800233e <HAL_TIM_ConfigClockSource+0x8a>
 800233c:	e076      	b.n	800242c <HAL_TIM_ConfigClockSource+0x178>
 800233e:	2b50      	cmp	r3, #80	; 0x50
 8002340:	d03b      	beq.n	80023ba <HAL_TIM_ConfigClockSource+0x106>
 8002342:	d900      	bls.n	8002346 <HAL_TIM_ConfigClockSource+0x92>
 8002344:	e072      	b.n	800242c <HAL_TIM_ConfigClockSource+0x178>
 8002346:	2b40      	cmp	r3, #64	; 0x40
 8002348:	d057      	beq.n	80023fa <HAL_TIM_ConfigClockSource+0x146>
 800234a:	d900      	bls.n	800234e <HAL_TIM_ConfigClockSource+0x9a>
 800234c:	e06e      	b.n	800242c <HAL_TIM_ConfigClockSource+0x178>
 800234e:	2b30      	cmp	r3, #48	; 0x30
 8002350:	d063      	beq.n	800241a <HAL_TIM_ConfigClockSource+0x166>
 8002352:	d86b      	bhi.n	800242c <HAL_TIM_ConfigClockSource+0x178>
 8002354:	2b20      	cmp	r3, #32
 8002356:	d060      	beq.n	800241a <HAL_TIM_ConfigClockSource+0x166>
 8002358:	d868      	bhi.n	800242c <HAL_TIM_ConfigClockSource+0x178>
 800235a:	2b00      	cmp	r3, #0
 800235c:	d05d      	beq.n	800241a <HAL_TIM_ConfigClockSource+0x166>
 800235e:	2b10      	cmp	r3, #16
 8002360:	d05b      	beq.n	800241a <HAL_TIM_ConfigClockSource+0x166>
 8002362:	e063      	b.n	800242c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6818      	ldr	r0, [r3, #0]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	6899      	ldr	r1, [r3, #8]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	f000 f990 	bl	8002698 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	2277      	movs	r2, #119	; 0x77
 8002384:	4313      	orrs	r3, r2
 8002386:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68ba      	ldr	r2, [r7, #8]
 800238e:	609a      	str	r2, [r3, #8]
      break;
 8002390:	e052      	b.n	8002438 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6818      	ldr	r0, [r3, #0]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	6899      	ldr	r1, [r3, #8]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	f000 f979 	bl	8002698 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2180      	movs	r1, #128	; 0x80
 80023b2:	01c9      	lsls	r1, r1, #7
 80023b4:	430a      	orrs	r2, r1
 80023b6:	609a      	str	r2, [r3, #8]
      break;
 80023b8:	e03e      	b.n	8002438 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6818      	ldr	r0, [r3, #0]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	6859      	ldr	r1, [r3, #4]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	001a      	movs	r2, r3
 80023c8:	f000 f8ec 	bl	80025a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2150      	movs	r1, #80	; 0x50
 80023d2:	0018      	movs	r0, r3
 80023d4:	f000 f946 	bl	8002664 <TIM_ITRx_SetConfig>
      break;
 80023d8:	e02e      	b.n	8002438 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6818      	ldr	r0, [r3, #0]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	6859      	ldr	r1, [r3, #4]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	001a      	movs	r2, r3
 80023e8:	f000 f90a 	bl	8002600 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2160      	movs	r1, #96	; 0x60
 80023f2:	0018      	movs	r0, r3
 80023f4:	f000 f936 	bl	8002664 <TIM_ITRx_SetConfig>
      break;
 80023f8:	e01e      	b.n	8002438 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6818      	ldr	r0, [r3, #0]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	6859      	ldr	r1, [r3, #4]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	001a      	movs	r2, r3
 8002408:	f000 f8cc 	bl	80025a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2140      	movs	r1, #64	; 0x40
 8002412:	0018      	movs	r0, r3
 8002414:	f000 f926 	bl	8002664 <TIM_ITRx_SetConfig>
      break;
 8002418:	e00e      	b.n	8002438 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	0019      	movs	r1, r3
 8002424:	0010      	movs	r0, r2
 8002426:	f000 f91d 	bl	8002664 <TIM_ITRx_SetConfig>
      break;
 800242a:	e005      	b.n	8002438 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800242c:	230f      	movs	r3, #15
 800242e:	18fb      	adds	r3, r7, r3
 8002430:	2201      	movs	r2, #1
 8002432:	701a      	strb	r2, [r3, #0]
      break;
 8002434:	e000      	b.n	8002438 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002436:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	223d      	movs	r2, #61	; 0x3d
 800243c:	2101      	movs	r1, #1
 800243e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	223c      	movs	r2, #60	; 0x3c
 8002444:	2100      	movs	r1, #0
 8002446:	5499      	strb	r1, [r3, r2]

  return status;
 8002448:	230f      	movs	r3, #15
 800244a:	18fb      	adds	r3, r7, r3
 800244c:	781b      	ldrb	r3, [r3, #0]
}
 800244e:	0018      	movs	r0, r3
 8002450:	46bd      	mov	sp, r7
 8002452:	b004      	add	sp, #16
 8002454:	bd80      	pop	{r7, pc}
 8002456:	46c0      	nop			; (mov r8, r8)
 8002458:	ffff00ff 	.word	0xffff00ff

0800245c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002464:	46c0      	nop			; (mov r8, r8)
 8002466:	46bd      	mov	sp, r7
 8002468:	b002      	add	sp, #8
 800246a:	bd80      	pop	{r7, pc}

0800246c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002474:	46c0      	nop			; (mov r8, r8)
 8002476:	46bd      	mov	sp, r7
 8002478:	b002      	add	sp, #8
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002484:	46c0      	nop			; (mov r8, r8)
 8002486:	46bd      	mov	sp, r7
 8002488:	b002      	add	sp, #8
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002494:	46c0      	nop			; (mov r8, r8)
 8002496:	46bd      	mov	sp, r7
 8002498:	b002      	add	sp, #8
 800249a:	bd80      	pop	{r7, pc}

0800249c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a36      	ldr	r2, [pc, #216]	; (8002588 <TIM_Base_SetConfig+0xec>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d003      	beq.n	80024bc <TIM_Base_SetConfig+0x20>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a35      	ldr	r2, [pc, #212]	; (800258c <TIM_Base_SetConfig+0xf0>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d108      	bne.n	80024ce <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2270      	movs	r2, #112	; 0x70
 80024c0:	4393      	bics	r3, r2
 80024c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a2d      	ldr	r2, [pc, #180]	; (8002588 <TIM_Base_SetConfig+0xec>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d013      	beq.n	80024fe <TIM_Base_SetConfig+0x62>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a2c      	ldr	r2, [pc, #176]	; (800258c <TIM_Base_SetConfig+0xf0>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d00f      	beq.n	80024fe <TIM_Base_SetConfig+0x62>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a2b      	ldr	r2, [pc, #172]	; (8002590 <TIM_Base_SetConfig+0xf4>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d00b      	beq.n	80024fe <TIM_Base_SetConfig+0x62>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a2a      	ldr	r2, [pc, #168]	; (8002594 <TIM_Base_SetConfig+0xf8>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d007      	beq.n	80024fe <TIM_Base_SetConfig+0x62>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a29      	ldr	r2, [pc, #164]	; (8002598 <TIM_Base_SetConfig+0xfc>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d003      	beq.n	80024fe <TIM_Base_SetConfig+0x62>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a28      	ldr	r2, [pc, #160]	; (800259c <TIM_Base_SetConfig+0x100>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d108      	bne.n	8002510 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	4a27      	ldr	r2, [pc, #156]	; (80025a0 <TIM_Base_SetConfig+0x104>)
 8002502:	4013      	ands	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	4313      	orrs	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2280      	movs	r2, #128	; 0x80
 8002514:	4393      	bics	r3, r2
 8002516:	001a      	movs	r2, r3
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	4313      	orrs	r3, r2
 800251e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a13      	ldr	r2, [pc, #76]	; (8002588 <TIM_Base_SetConfig+0xec>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d00b      	beq.n	8002556 <TIM_Base_SetConfig+0xba>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a14      	ldr	r2, [pc, #80]	; (8002594 <TIM_Base_SetConfig+0xf8>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d007      	beq.n	8002556 <TIM_Base_SetConfig+0xba>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a13      	ldr	r2, [pc, #76]	; (8002598 <TIM_Base_SetConfig+0xfc>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d003      	beq.n	8002556 <TIM_Base_SetConfig+0xba>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a12      	ldr	r2, [pc, #72]	; (800259c <TIM_Base_SetConfig+0x100>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d103      	bne.n	800255e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	691a      	ldr	r2, [r3, #16]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	2201      	movs	r2, #1
 800256a:	4013      	ands	r3, r2
 800256c:	2b01      	cmp	r3, #1
 800256e:	d106      	bne.n	800257e <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	2201      	movs	r2, #1
 8002576:	4393      	bics	r3, r2
 8002578:	001a      	movs	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	611a      	str	r2, [r3, #16]
  }
}
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	46bd      	mov	sp, r7
 8002582:	b004      	add	sp, #16
 8002584:	bd80      	pop	{r7, pc}
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	40012c00 	.word	0x40012c00
 800258c:	40000400 	.word	0x40000400
 8002590:	40002000 	.word	0x40002000
 8002594:	40014000 	.word	0x40014000
 8002598:	40014400 	.word	0x40014400
 800259c:	40014800 	.word	0x40014800
 80025a0:	fffffcff 	.word	0xfffffcff

080025a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	2201      	movs	r2, #1
 80025bc:	4393      	bics	r3, r2
 80025be:	001a      	movs	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	22f0      	movs	r2, #240	; 0xf0
 80025ce:	4393      	bics	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	011b      	lsls	r3, r3, #4
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	4313      	orrs	r3, r2
 80025da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	220a      	movs	r2, #10
 80025e0:	4393      	bics	r3, r2
 80025e2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	621a      	str	r2, [r3, #32]
}
 80025f8:	46c0      	nop			; (mov r8, r8)
 80025fa:	46bd      	mov	sp, r7
 80025fc:	b006      	add	sp, #24
 80025fe:	bd80      	pop	{r7, pc}

08002600 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	2210      	movs	r2, #16
 8002618:	4393      	bics	r3, r2
 800261a:	001a      	movs	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	4a0d      	ldr	r2, [pc, #52]	; (8002660 <TIM_TI2_ConfigInputStage+0x60>)
 800262a:	4013      	ands	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	031b      	lsls	r3, r3, #12
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	4313      	orrs	r3, r2
 8002636:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	22a0      	movs	r2, #160	; 0xa0
 800263c:	4393      	bics	r3, r2
 800263e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	4313      	orrs	r3, r2
 8002648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	621a      	str	r2, [r3, #32]
}
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	46bd      	mov	sp, r7
 800265a:	b006      	add	sp, #24
 800265c:	bd80      	pop	{r7, pc}
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	ffff0fff 	.word	0xffff0fff

08002664 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2270      	movs	r2, #112	; 0x70
 8002678:	4393      	bics	r3, r2
 800267a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	4313      	orrs	r3, r2
 8002682:	2207      	movs	r2, #7
 8002684:	4313      	orrs	r3, r2
 8002686:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	609a      	str	r2, [r3, #8]
}
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	46bd      	mov	sp, r7
 8002692:	b004      	add	sp, #16
 8002694:	bd80      	pop	{r7, pc}
	...

08002698 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
 80026a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	4a09      	ldr	r2, [pc, #36]	; (80026d4 <TIM_ETR_SetConfig+0x3c>)
 80026b0:	4013      	ands	r3, r2
 80026b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	021a      	lsls	r2, r3, #8
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	431a      	orrs	r2, r3
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	4313      	orrs	r3, r2
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	609a      	str	r2, [r3, #8]
}
 80026cc:	46c0      	nop			; (mov r8, r8)
 80026ce:	46bd      	mov	sp, r7
 80026d0:	b006      	add	sp, #24
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	ffff00ff 	.word	0xffff00ff

080026d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	223c      	movs	r2, #60	; 0x3c
 80026e6:	5c9b      	ldrb	r3, [r3, r2]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d101      	bne.n	80026f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026ec:	2302      	movs	r3, #2
 80026ee:	e041      	b.n	8002774 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	223c      	movs	r2, #60	; 0x3c
 80026f4:	2101      	movs	r1, #1
 80026f6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	223d      	movs	r2, #61	; 0x3d
 80026fc:	2102      	movs	r1, #2
 80026fe:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2270      	movs	r2, #112	; 0x70
 8002714:	4393      	bics	r3, r2
 8002716:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	4313      	orrs	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a13      	ldr	r2, [pc, #76]	; (800277c <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d009      	beq.n	8002748 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a11      	ldr	r2, [pc, #68]	; (8002780 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d004      	beq.n	8002748 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a10      	ldr	r2, [pc, #64]	; (8002784 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d10c      	bne.n	8002762 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	2280      	movs	r2, #128	; 0x80
 800274c:	4393      	bics	r3, r2
 800274e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	4313      	orrs	r3, r2
 8002758:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	223d      	movs	r2, #61	; 0x3d
 8002766:	2101      	movs	r1, #1
 8002768:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	223c      	movs	r2, #60	; 0x3c
 800276e:	2100      	movs	r1, #0
 8002770:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	0018      	movs	r0, r3
 8002776:	46bd      	mov	sp, r7
 8002778:	b004      	add	sp, #16
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40012c00 	.word	0x40012c00
 8002780:	40000400 	.word	0x40000400
 8002784:	40014000 	.word	0x40014000

08002788 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002790:	46c0      	nop			; (mov r8, r8)
 8002792:	46bd      	mov	sp, r7
 8002794:	b002      	add	sp, #8
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027a0:	46c0      	nop			; (mov r8, r8)
 80027a2:	46bd      	mov	sp, r7
 80027a4:	b002      	add	sp, #8
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e044      	b.n	8002844 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d107      	bne.n	80027d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2278      	movs	r2, #120	; 0x78
 80027c6:	2100      	movs	r1, #0
 80027c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	0018      	movs	r0, r3
 80027ce:	f7fe f9c1 	bl	8000b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2224      	movs	r2, #36	; 0x24
 80027d6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2101      	movs	r1, #1
 80027e4:	438a      	bics	r2, r1
 80027e6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	0018      	movs	r0, r3
 80027f4:	f000 fca8 	bl	8003148 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	0018      	movs	r0, r3
 80027fc:	f000 fb64 	bl	8002ec8 <UART_SetConfig>
 8002800:	0003      	movs	r3, r0
 8002802:	2b01      	cmp	r3, #1
 8002804:	d101      	bne.n	800280a <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e01c      	b.n	8002844 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	490d      	ldr	r1, [pc, #52]	; (800284c <HAL_UART_Init+0xa4>)
 8002816:	400a      	ands	r2, r1
 8002818:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2108      	movs	r1, #8
 8002826:	438a      	bics	r2, r1
 8002828:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2101      	movs	r1, #1
 8002836:	430a      	orrs	r2, r1
 8002838:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	0018      	movs	r0, r3
 800283e:	f000 fd37 	bl	80032b0 <UART_CheckIdleState>
 8002842:	0003      	movs	r3, r0
}
 8002844:	0018      	movs	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	b002      	add	sp, #8
 800284a:	bd80      	pop	{r7, pc}
 800284c:	fffff7ff 	.word	0xfffff7ff

08002850 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b088      	sub	sp, #32
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	1dbb      	adds	r3, r7, #6
 800285c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2280      	movs	r2, #128	; 0x80
 8002862:	589b      	ldr	r3, [r3, r2]
 8002864:	2b20      	cmp	r3, #32
 8002866:	d145      	bne.n	80028f4 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_UART_Receive_IT+0x26>
 800286e:	1dbb      	adds	r3, r7, #6
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e03d      	b.n	80028f6 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	2380      	movs	r3, #128	; 0x80
 8002880:	015b      	lsls	r3, r3, #5
 8002882:	429a      	cmp	r2, r3
 8002884:	d109      	bne.n	800289a <HAL_UART_Receive_IT+0x4a>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d105      	bne.n	800289a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	2201      	movs	r2, #1
 8002892:	4013      	ands	r3, r2
 8002894:	d001      	beq.n	800289a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e02d      	b.n	80028f6 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	2380      	movs	r3, #128	; 0x80
 80028a8:	041b      	lsls	r3, r3, #16
 80028aa:	4013      	ands	r3, r2
 80028ac:	d019      	beq.n	80028e2 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028ae:	f3ef 8310 	mrs	r3, PRIMASK
 80028b2:	613b      	str	r3, [r7, #16]
  return(result);
 80028b4:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80028b6:	61fb      	str	r3, [r7, #28]
 80028b8:	2301      	movs	r3, #1
 80028ba:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	f383 8810 	msr	PRIMASK, r3
}
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2180      	movs	r1, #128	; 0x80
 80028d0:	04c9      	lsls	r1, r1, #19
 80028d2:	430a      	orrs	r2, r1
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	f383 8810 	msr	PRIMASK, r3
}
 80028e0:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80028e2:	1dbb      	adds	r3, r7, #6
 80028e4:	881a      	ldrh	r2, [r3, #0]
 80028e6:	68b9      	ldr	r1, [r7, #8]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	0018      	movs	r0, r3
 80028ec:	f000 fdf8 	bl	80034e0 <UART_Start_Receive_IT>
 80028f0:	0003      	movs	r3, r0
 80028f2:	e000      	b.n	80028f6 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80028f4:	2302      	movs	r3, #2
  }
}
 80028f6:	0018      	movs	r0, r3
 80028f8:	46bd      	mov	sp, r7
 80028fa:	b008      	add	sp, #32
 80028fc:	bd80      	pop	{r7, pc}
	...

08002900 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002900:	b590      	push	{r4, r7, lr}
 8002902:	b0ab      	sub	sp, #172	; 0xac
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	22a4      	movs	r2, #164	; 0xa4
 8002910:	18b9      	adds	r1, r7, r2
 8002912:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	20a0      	movs	r0, #160	; 0xa0
 800291c:	1839      	adds	r1, r7, r0
 800291e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	219c      	movs	r1, #156	; 0x9c
 8002928:	1879      	adds	r1, r7, r1
 800292a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800292c:	0011      	movs	r1, r2
 800292e:	18bb      	adds	r3, r7, r2
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a99      	ldr	r2, [pc, #612]	; (8002b98 <HAL_UART_IRQHandler+0x298>)
 8002934:	4013      	ands	r3, r2
 8002936:	2298      	movs	r2, #152	; 0x98
 8002938:	18bc      	adds	r4, r7, r2
 800293a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800293c:	18bb      	adds	r3, r7, r2
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d114      	bne.n	800296e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002944:	187b      	adds	r3, r7, r1
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2220      	movs	r2, #32
 800294a:	4013      	ands	r3, r2
 800294c:	d00f      	beq.n	800296e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800294e:	183b      	adds	r3, r7, r0
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2220      	movs	r2, #32
 8002954:	4013      	ands	r3, r2
 8002956:	d00a      	beq.n	800296e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800295c:	2b00      	cmp	r3, #0
 800295e:	d100      	bne.n	8002962 <HAL_UART_IRQHandler+0x62>
 8002960:	e286      	b.n	8002e70 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	0010      	movs	r0, r2
 800296a:	4798      	blx	r3
      }
      return;
 800296c:	e280      	b.n	8002e70 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800296e:	2398      	movs	r3, #152	; 0x98
 8002970:	18fb      	adds	r3, r7, r3
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d100      	bne.n	800297a <HAL_UART_IRQHandler+0x7a>
 8002978:	e114      	b.n	8002ba4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800297a:	239c      	movs	r3, #156	; 0x9c
 800297c:	18fb      	adds	r3, r7, r3
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2201      	movs	r2, #1
 8002982:	4013      	ands	r3, r2
 8002984:	d106      	bne.n	8002994 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002986:	23a0      	movs	r3, #160	; 0xa0
 8002988:	18fb      	adds	r3, r7, r3
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a83      	ldr	r2, [pc, #524]	; (8002b9c <HAL_UART_IRQHandler+0x29c>)
 800298e:	4013      	ands	r3, r2
 8002990:	d100      	bne.n	8002994 <HAL_UART_IRQHandler+0x94>
 8002992:	e107      	b.n	8002ba4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002994:	23a4      	movs	r3, #164	; 0xa4
 8002996:	18fb      	adds	r3, r7, r3
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2201      	movs	r2, #1
 800299c:	4013      	ands	r3, r2
 800299e:	d012      	beq.n	80029c6 <HAL_UART_IRQHandler+0xc6>
 80029a0:	23a0      	movs	r3, #160	; 0xa0
 80029a2:	18fb      	adds	r3, r7, r3
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	2380      	movs	r3, #128	; 0x80
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	4013      	ands	r3, r2
 80029ac:	d00b      	beq.n	80029c6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2201      	movs	r2, #1
 80029b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2284      	movs	r2, #132	; 0x84
 80029ba:	589b      	ldr	r3, [r3, r2]
 80029bc:	2201      	movs	r2, #1
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2184      	movs	r1, #132	; 0x84
 80029c4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029c6:	23a4      	movs	r3, #164	; 0xa4
 80029c8:	18fb      	adds	r3, r7, r3
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2202      	movs	r2, #2
 80029ce:	4013      	ands	r3, r2
 80029d0:	d011      	beq.n	80029f6 <HAL_UART_IRQHandler+0xf6>
 80029d2:	239c      	movs	r3, #156	; 0x9c
 80029d4:	18fb      	adds	r3, r7, r3
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2201      	movs	r2, #1
 80029da:	4013      	ands	r3, r2
 80029dc:	d00b      	beq.n	80029f6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2202      	movs	r2, #2
 80029e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2284      	movs	r2, #132	; 0x84
 80029ea:	589b      	ldr	r3, [r3, r2]
 80029ec:	2204      	movs	r2, #4
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2184      	movs	r1, #132	; 0x84
 80029f4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029f6:	23a4      	movs	r3, #164	; 0xa4
 80029f8:	18fb      	adds	r3, r7, r3
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2204      	movs	r2, #4
 80029fe:	4013      	ands	r3, r2
 8002a00:	d011      	beq.n	8002a26 <HAL_UART_IRQHandler+0x126>
 8002a02:	239c      	movs	r3, #156	; 0x9c
 8002a04:	18fb      	adds	r3, r7, r3
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d00b      	beq.n	8002a26 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2204      	movs	r2, #4
 8002a14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2284      	movs	r2, #132	; 0x84
 8002a1a:	589b      	ldr	r3, [r3, r2]
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2184      	movs	r1, #132	; 0x84
 8002a24:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a26:	23a4      	movs	r3, #164	; 0xa4
 8002a28:	18fb      	adds	r3, r7, r3
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2208      	movs	r2, #8
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d017      	beq.n	8002a62 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a32:	23a0      	movs	r3, #160	; 0xa0
 8002a34:	18fb      	adds	r3, r7, r3
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2220      	movs	r2, #32
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	d105      	bne.n	8002a4a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002a3e:	239c      	movs	r3, #156	; 0x9c
 8002a40:	18fb      	adds	r3, r7, r3
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2201      	movs	r2, #1
 8002a46:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a48:	d00b      	beq.n	8002a62 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2208      	movs	r2, #8
 8002a50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2284      	movs	r2, #132	; 0x84
 8002a56:	589b      	ldr	r3, [r3, r2]
 8002a58:	2208      	movs	r2, #8
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2184      	movs	r1, #132	; 0x84
 8002a60:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a62:	23a4      	movs	r3, #164	; 0xa4
 8002a64:	18fb      	adds	r3, r7, r3
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	2380      	movs	r3, #128	; 0x80
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	d013      	beq.n	8002a98 <HAL_UART_IRQHandler+0x198>
 8002a70:	23a0      	movs	r3, #160	; 0xa0
 8002a72:	18fb      	adds	r3, r7, r3
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	2380      	movs	r3, #128	; 0x80
 8002a78:	04db      	lsls	r3, r3, #19
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d00c      	beq.n	8002a98 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2280      	movs	r2, #128	; 0x80
 8002a84:	0112      	lsls	r2, r2, #4
 8002a86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2284      	movs	r2, #132	; 0x84
 8002a8c:	589b      	ldr	r3, [r3, r2]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	431a      	orrs	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2184      	movs	r1, #132	; 0x84
 8002a96:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2284      	movs	r2, #132	; 0x84
 8002a9c:	589b      	ldr	r3, [r3, r2]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d100      	bne.n	8002aa4 <HAL_UART_IRQHandler+0x1a4>
 8002aa2:	e1e7      	b.n	8002e74 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002aa4:	23a4      	movs	r3, #164	; 0xa4
 8002aa6:	18fb      	adds	r3, r7, r3
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2220      	movs	r2, #32
 8002aac:	4013      	ands	r3, r2
 8002aae:	d00e      	beq.n	8002ace <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ab0:	23a0      	movs	r3, #160	; 0xa0
 8002ab2:	18fb      	adds	r3, r7, r3
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	4013      	ands	r3, r2
 8002aba:	d008      	beq.n	8002ace <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d004      	beq.n	8002ace <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	0010      	movs	r0, r2
 8002acc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2284      	movs	r2, #132	; 0x84
 8002ad2:	589b      	ldr	r3, [r3, r2]
 8002ad4:	2194      	movs	r1, #148	; 0x94
 8002ad6:	187a      	adds	r2, r7, r1
 8002ad8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	2240      	movs	r2, #64	; 0x40
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	2b40      	cmp	r3, #64	; 0x40
 8002ae6:	d004      	beq.n	8002af2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002ae8:	187b      	adds	r3, r7, r1
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2228      	movs	r2, #40	; 0x28
 8002aee:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002af0:	d047      	beq.n	8002b82 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	0018      	movs	r0, r3
 8002af6:	f000 fda9 	bl	800364c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	2240      	movs	r2, #64	; 0x40
 8002b02:	4013      	ands	r3, r2
 8002b04:	2b40      	cmp	r3, #64	; 0x40
 8002b06:	d137      	bne.n	8002b78 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b08:	f3ef 8310 	mrs	r3, PRIMASK
 8002b0c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002b0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b10:	2090      	movs	r0, #144	; 0x90
 8002b12:	183a      	adds	r2, r7, r0
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	2301      	movs	r3, #1
 8002b18:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b1c:	f383 8810 	msr	PRIMASK, r3
}
 8002b20:	46c0      	nop			; (mov r8, r8)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2140      	movs	r1, #64	; 0x40
 8002b2e:	438a      	bics	r2, r1
 8002b30:	609a      	str	r2, [r3, #8]
 8002b32:	183b      	adds	r3, r7, r0
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b3a:	f383 8810 	msr	PRIMASK, r3
}
 8002b3e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d012      	beq.n	8002b6e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b4c:	4a14      	ldr	r2, [pc, #80]	; (8002ba0 <HAL_UART_IRQHandler+0x2a0>)
 8002b4e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b54:	0018      	movs	r0, r3
 8002b56:	f7fe fac3 	bl	80010e0 <HAL_DMA_Abort_IT>
 8002b5a:	1e03      	subs	r3, r0, #0
 8002b5c:	d01a      	beq.n	8002b94 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b68:	0018      	movs	r0, r3
 8002b6a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b6c:	e012      	b.n	8002b94 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	0018      	movs	r0, r3
 8002b72:	f000 f995 	bl	8002ea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b76:	e00d      	b.n	8002b94 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f000 f990 	bl	8002ea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b80:	e008      	b.n	8002b94 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	0018      	movs	r0, r3
 8002b86:	f000 f98b 	bl	8002ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2284      	movs	r2, #132	; 0x84
 8002b8e:	2100      	movs	r1, #0
 8002b90:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002b92:	e16f      	b.n	8002e74 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b94:	46c0      	nop			; (mov r8, r8)
    return;
 8002b96:	e16d      	b.n	8002e74 <HAL_UART_IRQHandler+0x574>
 8002b98:	0000080f 	.word	0x0000080f
 8002b9c:	04000120 	.word	0x04000120
 8002ba0:	08003715 	.word	0x08003715

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d000      	beq.n	8002bae <HAL_UART_IRQHandler+0x2ae>
 8002bac:	e139      	b.n	8002e22 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002bae:	23a4      	movs	r3, #164	; 0xa4
 8002bb0:	18fb      	adds	r3, r7, r3
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2210      	movs	r2, #16
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	d100      	bne.n	8002bbc <HAL_UART_IRQHandler+0x2bc>
 8002bba:	e132      	b.n	8002e22 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002bbc:	23a0      	movs	r3, #160	; 0xa0
 8002bbe:	18fb      	adds	r3, r7, r3
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2210      	movs	r2, #16
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d100      	bne.n	8002bca <HAL_UART_IRQHandler+0x2ca>
 8002bc8:	e12b      	b.n	8002e22 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2210      	movs	r2, #16
 8002bd0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2240      	movs	r2, #64	; 0x40
 8002bda:	4013      	ands	r3, r2
 8002bdc:	2b40      	cmp	r3, #64	; 0x40
 8002bde:	d000      	beq.n	8002be2 <HAL_UART_IRQHandler+0x2e2>
 8002be0:	e09f      	b.n	8002d22 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	217e      	movs	r1, #126	; 0x7e
 8002bec:	187b      	adds	r3, r7, r1
 8002bee:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002bf0:	187b      	adds	r3, r7, r1
 8002bf2:	881b      	ldrh	r3, [r3, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d100      	bne.n	8002bfa <HAL_UART_IRQHandler+0x2fa>
 8002bf8:	e13e      	b.n	8002e78 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2258      	movs	r2, #88	; 0x58
 8002bfe:	5a9b      	ldrh	r3, [r3, r2]
 8002c00:	187a      	adds	r2, r7, r1
 8002c02:	8812      	ldrh	r2, [r2, #0]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d300      	bcc.n	8002c0a <HAL_UART_IRQHandler+0x30a>
 8002c08:	e136      	b.n	8002e78 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	187a      	adds	r2, r7, r1
 8002c0e:	215a      	movs	r1, #90	; 0x5a
 8002c10:	8812      	ldrh	r2, [r2, #0]
 8002c12:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	2b20      	cmp	r3, #32
 8002c1c:	d06f      	beq.n	8002cfe <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c1e:	f3ef 8310 	mrs	r3, PRIMASK
 8002c22:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c26:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c28:	2301      	movs	r3, #1
 8002c2a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c2e:	f383 8810 	msr	PRIMASK, r3
}
 8002c32:	46c0      	nop			; (mov r8, r8)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4992      	ldr	r1, [pc, #584]	; (8002e88 <HAL_UART_IRQHandler+0x588>)
 8002c40:	400a      	ands	r2, r1
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c46:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c4a:	f383 8810 	msr	PRIMASK, r3
}
 8002c4e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c50:	f3ef 8310 	mrs	r3, PRIMASK
 8002c54:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c58:	677b      	str	r3, [r7, #116]	; 0x74
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c60:	f383 8810 	msr	PRIMASK, r3
}
 8002c64:	46c0      	nop			; (mov r8, r8)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2101      	movs	r1, #1
 8002c72:	438a      	bics	r2, r1
 8002c74:	609a      	str	r2, [r3, #8]
 8002c76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c78:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c7c:	f383 8810 	msr	PRIMASK, r3
}
 8002c80:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c82:	f3ef 8310 	mrs	r3, PRIMASK
 8002c86:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002c88:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c8a:	673b      	str	r3, [r7, #112]	; 0x70
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c92:	f383 8810 	msr	PRIMASK, r3
}
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2140      	movs	r1, #64	; 0x40
 8002ca4:	438a      	bics	r2, r1
 8002ca6:	609a      	str	r2, [r3, #8]
 8002ca8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002caa:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cae:	f383 8810 	msr	PRIMASK, r3
}
 8002cb2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2280      	movs	r2, #128	; 0x80
 8002cb8:	2120      	movs	r1, #32
 8002cba:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cc2:	f3ef 8310 	mrs	r3, PRIMASK
 8002cc6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ccc:	2301      	movs	r3, #1
 8002cce:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cd2:	f383 8810 	msr	PRIMASK, r3
}
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2110      	movs	r1, #16
 8002ce4:	438a      	bics	r2, r1
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cea:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cee:	f383 8810 	msr	PRIMASK, r3
}
 8002cf2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f7fe f9b9 	bl	8001070 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2202      	movs	r2, #2
 8002d02:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2258      	movs	r2, #88	; 0x58
 8002d08:	5a9a      	ldrh	r2, [r3, r2]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	215a      	movs	r1, #90	; 0x5a
 8002d0e:	5a5b      	ldrh	r3, [r3, r1]
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	0011      	movs	r1, r2
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	f000 f8c8 	bl	8002eb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d20:	e0aa      	b.n	8002e78 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2258      	movs	r2, #88	; 0x58
 8002d26:	5a99      	ldrh	r1, [r3, r2]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	225a      	movs	r2, #90	; 0x5a
 8002d2c:	5a9b      	ldrh	r3, [r3, r2]
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	208e      	movs	r0, #142	; 0x8e
 8002d32:	183b      	adds	r3, r7, r0
 8002d34:	1a8a      	subs	r2, r1, r2
 8002d36:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	225a      	movs	r2, #90	; 0x5a
 8002d3c:	5a9b      	ldrh	r3, [r3, r2]
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d100      	bne.n	8002d46 <HAL_UART_IRQHandler+0x446>
 8002d44:	e09a      	b.n	8002e7c <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8002d46:	183b      	adds	r3, r7, r0
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d100      	bne.n	8002d50 <HAL_UART_IRQHandler+0x450>
 8002d4e:	e095      	b.n	8002e7c <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d50:	f3ef 8310 	mrs	r3, PRIMASK
 8002d54:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d56:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d58:	2488      	movs	r4, #136	; 0x88
 8002d5a:	193a      	adds	r2, r7, r4
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	2301      	movs	r3, #1
 8002d60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	f383 8810 	msr	PRIMASK, r3
}
 8002d68:	46c0      	nop			; (mov r8, r8)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4945      	ldr	r1, [pc, #276]	; (8002e8c <HAL_UART_IRQHandler+0x58c>)
 8002d76:	400a      	ands	r2, r1
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	193b      	adds	r3, r7, r4
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	f383 8810 	msr	PRIMASK, r3
}
 8002d86:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d88:	f3ef 8310 	mrs	r3, PRIMASK
 8002d8c:	61bb      	str	r3, [r7, #24]
  return(result);
 8002d8e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d90:	2484      	movs	r4, #132	; 0x84
 8002d92:	193a      	adds	r2, r7, r4
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	2301      	movs	r3, #1
 8002d98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	f383 8810 	msr	PRIMASK, r3
}
 8002da0:	46c0      	nop			; (mov r8, r8)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2101      	movs	r1, #1
 8002dae:	438a      	bics	r2, r1
 8002db0:	609a      	str	r2, [r3, #8]
 8002db2:	193b      	adds	r3, r7, r4
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	f383 8810 	msr	PRIMASK, r3
}
 8002dbe:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2280      	movs	r2, #128	; 0x80
 8002dc4:	2120      	movs	r1, #32
 8002dc6:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dd4:	f3ef 8310 	mrs	r3, PRIMASK
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ddc:	2480      	movs	r4, #128	; 0x80
 8002dde:	193a      	adds	r2, r7, r4
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	2301      	movs	r3, #1
 8002de4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de8:	f383 8810 	msr	PRIMASK, r3
}
 8002dec:	46c0      	nop			; (mov r8, r8)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2110      	movs	r1, #16
 8002dfa:	438a      	bics	r2, r1
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	193b      	adds	r3, r7, r4
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e06:	f383 8810 	msr	PRIMASK, r3
}
 8002e0a:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e12:	183b      	adds	r3, r7, r0
 8002e14:	881a      	ldrh	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	0011      	movs	r1, r2
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	f000 f848 	bl	8002eb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e20:	e02c      	b.n	8002e7c <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002e22:	23a4      	movs	r3, #164	; 0xa4
 8002e24:	18fb      	adds	r3, r7, r3
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2280      	movs	r2, #128	; 0x80
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	d00f      	beq.n	8002e4e <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002e2e:	23a0      	movs	r3, #160	; 0xa0
 8002e30:	18fb      	adds	r3, r7, r3
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2280      	movs	r2, #128	; 0x80
 8002e36:	4013      	ands	r3, r2
 8002e38:	d009      	beq.n	8002e4e <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d01e      	beq.n	8002e80 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	0010      	movs	r0, r2
 8002e4a:	4798      	blx	r3
    }
    return;
 8002e4c:	e018      	b.n	8002e80 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002e4e:	23a4      	movs	r3, #164	; 0xa4
 8002e50:	18fb      	adds	r3, r7, r3
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2240      	movs	r2, #64	; 0x40
 8002e56:	4013      	ands	r3, r2
 8002e58:	d013      	beq.n	8002e82 <HAL_UART_IRQHandler+0x582>
 8002e5a:	23a0      	movs	r3, #160	; 0xa0
 8002e5c:	18fb      	adds	r3, r7, r3
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2240      	movs	r2, #64	; 0x40
 8002e62:	4013      	ands	r3, r2
 8002e64:	d00d      	beq.n	8002e82 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	0018      	movs	r0, r3
 8002e6a:	f000 fc6a 	bl	8003742 <UART_EndTransmit_IT>
    return;
 8002e6e:	e008      	b.n	8002e82 <HAL_UART_IRQHandler+0x582>
      return;
 8002e70:	46c0      	nop			; (mov r8, r8)
 8002e72:	e006      	b.n	8002e82 <HAL_UART_IRQHandler+0x582>
    return;
 8002e74:	46c0      	nop			; (mov r8, r8)
 8002e76:	e004      	b.n	8002e82 <HAL_UART_IRQHandler+0x582>
      return;
 8002e78:	46c0      	nop			; (mov r8, r8)
 8002e7a:	e002      	b.n	8002e82 <HAL_UART_IRQHandler+0x582>
      return;
 8002e7c:	46c0      	nop			; (mov r8, r8)
 8002e7e:	e000      	b.n	8002e82 <HAL_UART_IRQHandler+0x582>
    return;
 8002e80:	46c0      	nop			; (mov r8, r8)
  }

}
 8002e82:	46bd      	mov	sp, r7
 8002e84:	b02b      	add	sp, #172	; 0xac
 8002e86:	bd90      	pop	{r4, r7, pc}
 8002e88:	fffffeff 	.word	0xfffffeff
 8002e8c:	fffffedf 	.word	0xfffffedf

08002e90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002e98:	46c0      	nop			; (mov r8, r8)
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	b002      	add	sp, #8
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002ea8:	46c0      	nop			; (mov r8, r8)
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	b002      	add	sp, #8
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	000a      	movs	r2, r1
 8002eba:	1cbb      	adds	r3, r7, #2
 8002ebc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	b002      	add	sp, #8
 8002ec4:	bd80      	pop	{r7, pc}
	...

08002ec8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b088      	sub	sp, #32
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ed0:	231e      	movs	r3, #30
 8002ed2:	18fb      	adds	r3, r7, r3
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a8d      	ldr	r2, [pc, #564]	; (800312c <UART_SetConfig+0x264>)
 8002ef8:	4013      	ands	r3, r2
 8002efa:	0019      	movs	r1, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	4a88      	ldr	r2, [pc, #544]	; (8003130 <UART_SetConfig+0x268>)
 8002f0e:	4013      	ands	r3, r2
 8002f10:	0019      	movs	r1, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68da      	ldr	r2, [r3, #12]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	4a7f      	ldr	r2, [pc, #508]	; (8003134 <UART_SetConfig+0x26c>)
 8002f36:	4013      	ands	r3, r2
 8002f38:	0019      	movs	r1, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a7b      	ldr	r2, [pc, #492]	; (8003138 <UART_SetConfig+0x270>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d127      	bne.n	8002f9e <UART_SetConfig+0xd6>
 8002f4e:	4b7b      	ldr	r3, [pc, #492]	; (800313c <UART_SetConfig+0x274>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	2203      	movs	r2, #3
 8002f54:	4013      	ands	r3, r2
 8002f56:	2b03      	cmp	r3, #3
 8002f58:	d00d      	beq.n	8002f76 <UART_SetConfig+0xae>
 8002f5a:	d81b      	bhi.n	8002f94 <UART_SetConfig+0xcc>
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d014      	beq.n	8002f8a <UART_SetConfig+0xc2>
 8002f60:	d818      	bhi.n	8002f94 <UART_SetConfig+0xcc>
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d002      	beq.n	8002f6c <UART_SetConfig+0xa4>
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d00a      	beq.n	8002f80 <UART_SetConfig+0xb8>
 8002f6a:	e013      	b.n	8002f94 <UART_SetConfig+0xcc>
 8002f6c:	231f      	movs	r3, #31
 8002f6e:	18fb      	adds	r3, r7, r3
 8002f70:	2200      	movs	r2, #0
 8002f72:	701a      	strb	r2, [r3, #0]
 8002f74:	e021      	b.n	8002fba <UART_SetConfig+0xf2>
 8002f76:	231f      	movs	r3, #31
 8002f78:	18fb      	adds	r3, r7, r3
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	701a      	strb	r2, [r3, #0]
 8002f7e:	e01c      	b.n	8002fba <UART_SetConfig+0xf2>
 8002f80:	231f      	movs	r3, #31
 8002f82:	18fb      	adds	r3, r7, r3
 8002f84:	2204      	movs	r2, #4
 8002f86:	701a      	strb	r2, [r3, #0]
 8002f88:	e017      	b.n	8002fba <UART_SetConfig+0xf2>
 8002f8a:	231f      	movs	r3, #31
 8002f8c:	18fb      	adds	r3, r7, r3
 8002f8e:	2208      	movs	r2, #8
 8002f90:	701a      	strb	r2, [r3, #0]
 8002f92:	e012      	b.n	8002fba <UART_SetConfig+0xf2>
 8002f94:	231f      	movs	r3, #31
 8002f96:	18fb      	adds	r3, r7, r3
 8002f98:	2210      	movs	r2, #16
 8002f9a:	701a      	strb	r2, [r3, #0]
 8002f9c:	e00d      	b.n	8002fba <UART_SetConfig+0xf2>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a67      	ldr	r2, [pc, #412]	; (8003140 <UART_SetConfig+0x278>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d104      	bne.n	8002fb2 <UART_SetConfig+0xea>
 8002fa8:	231f      	movs	r3, #31
 8002faa:	18fb      	adds	r3, r7, r3
 8002fac:	2200      	movs	r2, #0
 8002fae:	701a      	strb	r2, [r3, #0]
 8002fb0:	e003      	b.n	8002fba <UART_SetConfig+0xf2>
 8002fb2:	231f      	movs	r3, #31
 8002fb4:	18fb      	adds	r3, r7, r3
 8002fb6:	2210      	movs	r2, #16
 8002fb8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69da      	ldr	r2, [r3, #28]
 8002fbe:	2380      	movs	r3, #128	; 0x80
 8002fc0:	021b      	lsls	r3, r3, #8
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d15c      	bne.n	8003080 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8002fc6:	231f      	movs	r3, #31
 8002fc8:	18fb      	adds	r3, r7, r3
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	2b08      	cmp	r3, #8
 8002fce:	d015      	beq.n	8002ffc <UART_SetConfig+0x134>
 8002fd0:	dc18      	bgt.n	8003004 <UART_SetConfig+0x13c>
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d00d      	beq.n	8002ff2 <UART_SetConfig+0x12a>
 8002fd6:	dc15      	bgt.n	8003004 <UART_SetConfig+0x13c>
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d002      	beq.n	8002fe2 <UART_SetConfig+0x11a>
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d005      	beq.n	8002fec <UART_SetConfig+0x124>
 8002fe0:	e010      	b.n	8003004 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fe2:	f7fe fedf 	bl	8001da4 <HAL_RCC_GetPCLK1Freq>
 8002fe6:	0003      	movs	r3, r0
 8002fe8:	61bb      	str	r3, [r7, #24]
        break;
 8002fea:	e012      	b.n	8003012 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fec:	4b55      	ldr	r3, [pc, #340]	; (8003144 <UART_SetConfig+0x27c>)
 8002fee:	61bb      	str	r3, [r7, #24]
        break;
 8002ff0:	e00f      	b.n	8003012 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ff2:	f7fe fe77 	bl	8001ce4 <HAL_RCC_GetSysClockFreq>
 8002ff6:	0003      	movs	r3, r0
 8002ff8:	61bb      	str	r3, [r7, #24]
        break;
 8002ffa:	e00a      	b.n	8003012 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ffc:	2380      	movs	r3, #128	; 0x80
 8002ffe:	021b      	lsls	r3, r3, #8
 8003000:	61bb      	str	r3, [r7, #24]
        break;
 8003002:	e006      	b.n	8003012 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003008:	231e      	movs	r3, #30
 800300a:	18fb      	adds	r3, r7, r3
 800300c:	2201      	movs	r2, #1
 800300e:	701a      	strb	r2, [r3, #0]
        break;
 8003010:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d100      	bne.n	800301a <UART_SetConfig+0x152>
 8003018:	e07a      	b.n	8003110 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	005a      	lsls	r2, r3, #1
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	085b      	lsrs	r3, r3, #1
 8003024:	18d2      	adds	r2, r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	0019      	movs	r1, r3
 800302c:	0010      	movs	r0, r2
 800302e:	f7fd f87d 	bl	800012c <__udivsi3>
 8003032:	0003      	movs	r3, r0
 8003034:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	2b0f      	cmp	r3, #15
 800303a:	d91c      	bls.n	8003076 <UART_SetConfig+0x1ae>
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	2380      	movs	r3, #128	; 0x80
 8003040:	025b      	lsls	r3, r3, #9
 8003042:	429a      	cmp	r2, r3
 8003044:	d217      	bcs.n	8003076 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	b29a      	uxth	r2, r3
 800304a:	200e      	movs	r0, #14
 800304c:	183b      	adds	r3, r7, r0
 800304e:	210f      	movs	r1, #15
 8003050:	438a      	bics	r2, r1
 8003052:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	085b      	lsrs	r3, r3, #1
 8003058:	b29b      	uxth	r3, r3
 800305a:	2207      	movs	r2, #7
 800305c:	4013      	ands	r3, r2
 800305e:	b299      	uxth	r1, r3
 8003060:	183b      	adds	r3, r7, r0
 8003062:	183a      	adds	r2, r7, r0
 8003064:	8812      	ldrh	r2, [r2, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	183a      	adds	r2, r7, r0
 8003070:	8812      	ldrh	r2, [r2, #0]
 8003072:	60da      	str	r2, [r3, #12]
 8003074:	e04c      	b.n	8003110 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003076:	231e      	movs	r3, #30
 8003078:	18fb      	adds	r3, r7, r3
 800307a:	2201      	movs	r2, #1
 800307c:	701a      	strb	r2, [r3, #0]
 800307e:	e047      	b.n	8003110 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003080:	231f      	movs	r3, #31
 8003082:	18fb      	adds	r3, r7, r3
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	2b08      	cmp	r3, #8
 8003088:	d015      	beq.n	80030b6 <UART_SetConfig+0x1ee>
 800308a:	dc18      	bgt.n	80030be <UART_SetConfig+0x1f6>
 800308c:	2b04      	cmp	r3, #4
 800308e:	d00d      	beq.n	80030ac <UART_SetConfig+0x1e4>
 8003090:	dc15      	bgt.n	80030be <UART_SetConfig+0x1f6>
 8003092:	2b00      	cmp	r3, #0
 8003094:	d002      	beq.n	800309c <UART_SetConfig+0x1d4>
 8003096:	2b02      	cmp	r3, #2
 8003098:	d005      	beq.n	80030a6 <UART_SetConfig+0x1de>
 800309a:	e010      	b.n	80030be <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800309c:	f7fe fe82 	bl	8001da4 <HAL_RCC_GetPCLK1Freq>
 80030a0:	0003      	movs	r3, r0
 80030a2:	61bb      	str	r3, [r7, #24]
        break;
 80030a4:	e012      	b.n	80030cc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030a6:	4b27      	ldr	r3, [pc, #156]	; (8003144 <UART_SetConfig+0x27c>)
 80030a8:	61bb      	str	r3, [r7, #24]
        break;
 80030aa:	e00f      	b.n	80030cc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030ac:	f7fe fe1a 	bl	8001ce4 <HAL_RCC_GetSysClockFreq>
 80030b0:	0003      	movs	r3, r0
 80030b2:	61bb      	str	r3, [r7, #24]
        break;
 80030b4:	e00a      	b.n	80030cc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030b6:	2380      	movs	r3, #128	; 0x80
 80030b8:	021b      	lsls	r3, r3, #8
 80030ba:	61bb      	str	r3, [r7, #24]
        break;
 80030bc:	e006      	b.n	80030cc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80030be:	2300      	movs	r3, #0
 80030c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030c2:	231e      	movs	r3, #30
 80030c4:	18fb      	adds	r3, r7, r3
 80030c6:	2201      	movs	r2, #1
 80030c8:	701a      	strb	r2, [r3, #0]
        break;
 80030ca:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d01e      	beq.n	8003110 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	085a      	lsrs	r2, r3, #1
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	18d2      	adds	r2, r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	0019      	movs	r1, r3
 80030e2:	0010      	movs	r0, r2
 80030e4:	f7fd f822 	bl	800012c <__udivsi3>
 80030e8:	0003      	movs	r3, r0
 80030ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	2b0f      	cmp	r3, #15
 80030f0:	d90a      	bls.n	8003108 <UART_SetConfig+0x240>
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	2380      	movs	r3, #128	; 0x80
 80030f6:	025b      	lsls	r3, r3, #9
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d205      	bcs.n	8003108 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	b29a      	uxth	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	60da      	str	r2, [r3, #12]
 8003106:	e003      	b.n	8003110 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003108:	231e      	movs	r3, #30
 800310a:	18fb      	adds	r3, r7, r3
 800310c:	2201      	movs	r2, #1
 800310e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800311c:	231e      	movs	r3, #30
 800311e:	18fb      	adds	r3, r7, r3
 8003120:	781b      	ldrb	r3, [r3, #0]
}
 8003122:	0018      	movs	r0, r3
 8003124:	46bd      	mov	sp, r7
 8003126:	b008      	add	sp, #32
 8003128:	bd80      	pop	{r7, pc}
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	ffff69f3 	.word	0xffff69f3
 8003130:	ffffcfff 	.word	0xffffcfff
 8003134:	fffff4ff 	.word	0xfffff4ff
 8003138:	40013800 	.word	0x40013800
 800313c:	40021000 	.word	0x40021000
 8003140:	40004400 	.word	0x40004400
 8003144:	007a1200 	.word	0x007a1200

08003148 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	2208      	movs	r2, #8
 8003156:	4013      	ands	r3, r2
 8003158:	d00b      	beq.n	8003172 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	4a4a      	ldr	r2, [pc, #296]	; (800328c <UART_AdvFeatureConfig+0x144>)
 8003162:	4013      	ands	r3, r2
 8003164:	0019      	movs	r1, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	2201      	movs	r2, #1
 8003178:	4013      	ands	r3, r2
 800317a:	d00b      	beq.n	8003194 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	4a43      	ldr	r2, [pc, #268]	; (8003290 <UART_AdvFeatureConfig+0x148>)
 8003184:	4013      	ands	r3, r2
 8003186:	0019      	movs	r1, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	2202      	movs	r2, #2
 800319a:	4013      	ands	r3, r2
 800319c:	d00b      	beq.n	80031b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	4a3b      	ldr	r2, [pc, #236]	; (8003294 <UART_AdvFeatureConfig+0x14c>)
 80031a6:	4013      	ands	r3, r2
 80031a8:	0019      	movs	r1, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ba:	2204      	movs	r2, #4
 80031bc:	4013      	ands	r3, r2
 80031be:	d00b      	beq.n	80031d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	4a34      	ldr	r2, [pc, #208]	; (8003298 <UART_AdvFeatureConfig+0x150>)
 80031c8:	4013      	ands	r3, r2
 80031ca:	0019      	movs	r1, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	2210      	movs	r2, #16
 80031de:	4013      	ands	r3, r2
 80031e0:	d00b      	beq.n	80031fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	4a2c      	ldr	r2, [pc, #176]	; (800329c <UART_AdvFeatureConfig+0x154>)
 80031ea:	4013      	ands	r3, r2
 80031ec:	0019      	movs	r1, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	2220      	movs	r2, #32
 8003200:	4013      	ands	r3, r2
 8003202:	d00b      	beq.n	800321c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	4a25      	ldr	r2, [pc, #148]	; (80032a0 <UART_AdvFeatureConfig+0x158>)
 800320c:	4013      	ands	r3, r2
 800320e:	0019      	movs	r1, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	430a      	orrs	r2, r1
 800321a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	2240      	movs	r2, #64	; 0x40
 8003222:	4013      	ands	r3, r2
 8003224:	d01d      	beq.n	8003262 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	4a1d      	ldr	r2, [pc, #116]	; (80032a4 <UART_AdvFeatureConfig+0x15c>)
 800322e:	4013      	ands	r3, r2
 8003230:	0019      	movs	r1, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003242:	2380      	movs	r3, #128	; 0x80
 8003244:	035b      	lsls	r3, r3, #13
 8003246:	429a      	cmp	r2, r3
 8003248:	d10b      	bne.n	8003262 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	4a15      	ldr	r2, [pc, #84]	; (80032a8 <UART_AdvFeatureConfig+0x160>)
 8003252:	4013      	ands	r3, r2
 8003254:	0019      	movs	r1, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	2280      	movs	r2, #128	; 0x80
 8003268:	4013      	ands	r3, r2
 800326a:	d00b      	beq.n	8003284 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	4a0e      	ldr	r2, [pc, #56]	; (80032ac <UART_AdvFeatureConfig+0x164>)
 8003274:	4013      	ands	r3, r2
 8003276:	0019      	movs	r1, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	430a      	orrs	r2, r1
 8003282:	605a      	str	r2, [r3, #4]
  }
}
 8003284:	46c0      	nop			; (mov r8, r8)
 8003286:	46bd      	mov	sp, r7
 8003288:	b002      	add	sp, #8
 800328a:	bd80      	pop	{r7, pc}
 800328c:	ffff7fff 	.word	0xffff7fff
 8003290:	fffdffff 	.word	0xfffdffff
 8003294:	fffeffff 	.word	0xfffeffff
 8003298:	fffbffff 	.word	0xfffbffff
 800329c:	ffffefff 	.word	0xffffefff
 80032a0:	ffffdfff 	.word	0xffffdfff
 80032a4:	ffefffff 	.word	0xffefffff
 80032a8:	ff9fffff 	.word	0xff9fffff
 80032ac:	fff7ffff 	.word	0xfff7ffff

080032b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b092      	sub	sp, #72	; 0x48
 80032b4:	af02      	add	r7, sp, #8
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2284      	movs	r2, #132	; 0x84
 80032bc:	2100      	movs	r1, #0
 80032be:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032c0:	f7fd fdca 	bl	8000e58 <HAL_GetTick>
 80032c4:	0003      	movs	r3, r0
 80032c6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2208      	movs	r2, #8
 80032d0:	4013      	ands	r3, r2
 80032d2:	2b08      	cmp	r3, #8
 80032d4:	d12c      	bne.n	8003330 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032d8:	2280      	movs	r2, #128	; 0x80
 80032da:	0391      	lsls	r1, r2, #14
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	4a46      	ldr	r2, [pc, #280]	; (80033f8 <UART_CheckIdleState+0x148>)
 80032e0:	9200      	str	r2, [sp, #0]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f000 f88c 	bl	8003400 <UART_WaitOnFlagUntilTimeout>
 80032e8:	1e03      	subs	r3, r0, #0
 80032ea:	d021      	beq.n	8003330 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032ec:	f3ef 8310 	mrs	r3, PRIMASK
 80032f0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80032f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80032f6:	2301      	movs	r3, #1
 80032f8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fc:	f383 8810 	msr	PRIMASK, r3
}
 8003300:	46c0      	nop			; (mov r8, r8)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2180      	movs	r1, #128	; 0x80
 800330e:	438a      	bics	r2, r1
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003314:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003318:	f383 8810 	msr	PRIMASK, r3
}
 800331c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2220      	movs	r2, #32
 8003322:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2278      	movs	r2, #120	; 0x78
 8003328:	2100      	movs	r1, #0
 800332a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e05f      	b.n	80033f0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2204      	movs	r2, #4
 8003338:	4013      	ands	r3, r2
 800333a:	2b04      	cmp	r3, #4
 800333c:	d146      	bne.n	80033cc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800333e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003340:	2280      	movs	r2, #128	; 0x80
 8003342:	03d1      	lsls	r1, r2, #15
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	4a2c      	ldr	r2, [pc, #176]	; (80033f8 <UART_CheckIdleState+0x148>)
 8003348:	9200      	str	r2, [sp, #0]
 800334a:	2200      	movs	r2, #0
 800334c:	f000 f858 	bl	8003400 <UART_WaitOnFlagUntilTimeout>
 8003350:	1e03      	subs	r3, r0, #0
 8003352:	d03b      	beq.n	80033cc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003354:	f3ef 8310 	mrs	r3, PRIMASK
 8003358:	60fb      	str	r3, [r7, #12]
  return(result);
 800335a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800335c:	637b      	str	r3, [r7, #52]	; 0x34
 800335e:	2301      	movs	r3, #1
 8003360:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f383 8810 	msr	PRIMASK, r3
}
 8003368:	46c0      	nop			; (mov r8, r8)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4921      	ldr	r1, [pc, #132]	; (80033fc <UART_CheckIdleState+0x14c>)
 8003376:	400a      	ands	r2, r1
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800337c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f383 8810 	msr	PRIMASK, r3
}
 8003384:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003386:	f3ef 8310 	mrs	r3, PRIMASK
 800338a:	61bb      	str	r3, [r7, #24]
  return(result);
 800338c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800338e:	633b      	str	r3, [r7, #48]	; 0x30
 8003390:	2301      	movs	r3, #1
 8003392:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f383 8810 	msr	PRIMASK, r3
}
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2101      	movs	r1, #1
 80033a8:	438a      	bics	r2, r1
 80033aa:	609a      	str	r2, [r3, #8]
 80033ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	f383 8810 	msr	PRIMASK, r3
}
 80033b6:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2280      	movs	r2, #128	; 0x80
 80033bc:	2120      	movs	r1, #32
 80033be:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2278      	movs	r2, #120	; 0x78
 80033c4:	2100      	movs	r1, #0
 80033c6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e011      	b.n	80033f0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2220      	movs	r2, #32
 80033d0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2280      	movs	r2, #128	; 0x80
 80033d6:	2120      	movs	r1, #32
 80033d8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2278      	movs	r2, #120	; 0x78
 80033ea:	2100      	movs	r1, #0
 80033ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	0018      	movs	r0, r3
 80033f2:	46bd      	mov	sp, r7
 80033f4:	b010      	add	sp, #64	; 0x40
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	01ffffff 	.word	0x01ffffff
 80033fc:	fffffedf 	.word	0xfffffedf

08003400 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	603b      	str	r3, [r7, #0]
 800340c:	1dfb      	adds	r3, r7, #7
 800340e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003410:	e051      	b.n	80034b6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	3301      	adds	r3, #1
 8003416:	d04e      	beq.n	80034b6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003418:	f7fd fd1e 	bl	8000e58 <HAL_GetTick>
 800341c:	0002      	movs	r2, r0
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	429a      	cmp	r2, r3
 8003426:	d302      	bcc.n	800342e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e051      	b.n	80034d6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2204      	movs	r2, #4
 800343a:	4013      	ands	r3, r2
 800343c:	d03b      	beq.n	80034b6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	2b80      	cmp	r3, #128	; 0x80
 8003442:	d038      	beq.n	80034b6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	2b40      	cmp	r3, #64	; 0x40
 8003448:	d035      	beq.n	80034b6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	69db      	ldr	r3, [r3, #28]
 8003450:	2208      	movs	r2, #8
 8003452:	4013      	ands	r3, r2
 8003454:	2b08      	cmp	r3, #8
 8003456:	d111      	bne.n	800347c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2208      	movs	r2, #8
 800345e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	0018      	movs	r0, r3
 8003464:	f000 f8f2 	bl	800364c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2284      	movs	r2, #132	; 0x84
 800346c:	2108      	movs	r1, #8
 800346e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2278      	movs	r2, #120	; 0x78
 8003474:	2100      	movs	r1, #0
 8003476:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e02c      	b.n	80034d6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	69da      	ldr	r2, [r3, #28]
 8003482:	2380      	movs	r3, #128	; 0x80
 8003484:	011b      	lsls	r3, r3, #4
 8003486:	401a      	ands	r2, r3
 8003488:	2380      	movs	r3, #128	; 0x80
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	429a      	cmp	r2, r3
 800348e:	d112      	bne.n	80034b6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2280      	movs	r2, #128	; 0x80
 8003496:	0112      	lsls	r2, r2, #4
 8003498:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	0018      	movs	r0, r3
 800349e:	f000 f8d5 	bl	800364c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2284      	movs	r2, #132	; 0x84
 80034a6:	2120      	movs	r1, #32
 80034a8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2278      	movs	r2, #120	; 0x78
 80034ae:	2100      	movs	r1, #0
 80034b0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e00f      	b.n	80034d6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	68ba      	ldr	r2, [r7, #8]
 80034be:	4013      	ands	r3, r2
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	425a      	negs	r2, r3
 80034c6:	4153      	adcs	r3, r2
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	001a      	movs	r2, r3
 80034cc:	1dfb      	adds	r3, r7, #7
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d09e      	beq.n	8003412 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	0018      	movs	r0, r3
 80034d8:	46bd      	mov	sp, r7
 80034da:	b004      	add	sp, #16
 80034dc:	bd80      	pop	{r7, pc}
	...

080034e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b090      	sub	sp, #64	; 0x40
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	1dbb      	adds	r3, r7, #6
 80034ec:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	1dba      	adds	r2, r7, #6
 80034f8:	2158      	movs	r1, #88	; 0x58
 80034fa:	8812      	ldrh	r2, [r2, #0]
 80034fc:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	1dba      	adds	r2, r7, #6
 8003502:	215a      	movs	r1, #90	; 0x5a
 8003504:	8812      	ldrh	r2, [r2, #0]
 8003506:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	689a      	ldr	r2, [r3, #8]
 8003512:	2380      	movs	r3, #128	; 0x80
 8003514:	015b      	lsls	r3, r3, #5
 8003516:	429a      	cmp	r2, r3
 8003518:	d10d      	bne.n	8003536 <UART_Start_Receive_IT+0x56>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d104      	bne.n	800352c <UART_Start_Receive_IT+0x4c>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	225c      	movs	r2, #92	; 0x5c
 8003526:	4946      	ldr	r1, [pc, #280]	; (8003640 <UART_Start_Receive_IT+0x160>)
 8003528:	5299      	strh	r1, [r3, r2]
 800352a:	e01a      	b.n	8003562 <UART_Start_Receive_IT+0x82>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	225c      	movs	r2, #92	; 0x5c
 8003530:	21ff      	movs	r1, #255	; 0xff
 8003532:	5299      	strh	r1, [r3, r2]
 8003534:	e015      	b.n	8003562 <UART_Start_Receive_IT+0x82>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10d      	bne.n	800355a <UART_Start_Receive_IT+0x7a>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d104      	bne.n	8003550 <UART_Start_Receive_IT+0x70>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	225c      	movs	r2, #92	; 0x5c
 800354a:	21ff      	movs	r1, #255	; 0xff
 800354c:	5299      	strh	r1, [r3, r2]
 800354e:	e008      	b.n	8003562 <UART_Start_Receive_IT+0x82>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	225c      	movs	r2, #92	; 0x5c
 8003554:	217f      	movs	r1, #127	; 0x7f
 8003556:	5299      	strh	r1, [r3, r2]
 8003558:	e003      	b.n	8003562 <UART_Start_Receive_IT+0x82>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	225c      	movs	r2, #92	; 0x5c
 800355e:	2100      	movs	r1, #0
 8003560:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2284      	movs	r2, #132	; 0x84
 8003566:	2100      	movs	r1, #0
 8003568:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2280      	movs	r2, #128	; 0x80
 800356e:	2122      	movs	r1, #34	; 0x22
 8003570:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003572:	f3ef 8310 	mrs	r3, PRIMASK
 8003576:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003578:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800357a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800357c:	2301      	movs	r3, #1
 800357e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003582:	f383 8810 	msr	PRIMASK, r3
}
 8003586:	46c0      	nop			; (mov r8, r8)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689a      	ldr	r2, [r3, #8]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2101      	movs	r1, #1
 8003594:	430a      	orrs	r2, r1
 8003596:	609a      	str	r2, [r3, #8]
 8003598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800359a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800359c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359e:	f383 8810 	msr	PRIMASK, r3
}
 80035a2:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	2380      	movs	r3, #128	; 0x80
 80035aa:	015b      	lsls	r3, r3, #5
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d107      	bne.n	80035c0 <UART_Start_Receive_IT+0xe0>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d103      	bne.n	80035c0 <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4a22      	ldr	r2, [pc, #136]	; (8003644 <UART_Start_Receive_IT+0x164>)
 80035bc:	669a      	str	r2, [r3, #104]	; 0x68
 80035be:	e002      	b.n	80035c6 <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4a21      	ldr	r2, [pc, #132]	; (8003648 <UART_Start_Receive_IT+0x168>)
 80035c4:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d019      	beq.n	8003602 <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035ce:	f3ef 8310 	mrs	r3, PRIMASK
 80035d2:	61fb      	str	r3, [r7, #28]
  return(result);
 80035d4:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80035d6:	637b      	str	r3, [r7, #52]	; 0x34
 80035d8:	2301      	movs	r3, #1
 80035da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	f383 8810 	msr	PRIMASK, r3
}
 80035e2:	46c0      	nop			; (mov r8, r8)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2190      	movs	r1, #144	; 0x90
 80035f0:	0049      	lsls	r1, r1, #1
 80035f2:	430a      	orrs	r2, r1
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	f383 8810 	msr	PRIMASK, r3
}
 8003600:	e018      	b.n	8003634 <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003602:	f3ef 8310 	mrs	r3, PRIMASK
 8003606:	613b      	str	r3, [r7, #16]
  return(result);
 8003608:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800360a:	63bb      	str	r3, [r7, #56]	; 0x38
 800360c:	2301      	movs	r3, #1
 800360e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f383 8810 	msr	PRIMASK, r3
}
 8003616:	46c0      	nop			; (mov r8, r8)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2120      	movs	r1, #32
 8003624:	430a      	orrs	r2, r1
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800362a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	f383 8810 	msr	PRIMASK, r3
}
 8003632:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	0018      	movs	r0, r3
 8003638:	46bd      	mov	sp, r7
 800363a:	b010      	add	sp, #64	; 0x40
 800363c:	bd80      	pop	{r7, pc}
 800363e:	46c0      	nop			; (mov r8, r8)
 8003640:	000001ff 	.word	0x000001ff
 8003644:	08003951 	.word	0x08003951
 8003648:	08003799 	.word	0x08003799

0800364c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b08e      	sub	sp, #56	; 0x38
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003654:	f3ef 8310 	mrs	r3, PRIMASK
 8003658:	617b      	str	r3, [r7, #20]
  return(result);
 800365a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800365c:	637b      	str	r3, [r7, #52]	; 0x34
 800365e:	2301      	movs	r3, #1
 8003660:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	f383 8810 	msr	PRIMASK, r3
}
 8003668:	46c0      	nop			; (mov r8, r8)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4926      	ldr	r1, [pc, #152]	; (8003710 <UART_EndRxTransfer+0xc4>)
 8003676:	400a      	ands	r2, r1
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800367c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	f383 8810 	msr	PRIMASK, r3
}
 8003684:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003686:	f3ef 8310 	mrs	r3, PRIMASK
 800368a:	623b      	str	r3, [r7, #32]
  return(result);
 800368c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800368e:	633b      	str	r3, [r7, #48]	; 0x30
 8003690:	2301      	movs	r3, #1
 8003692:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003696:	f383 8810 	msr	PRIMASK, r3
}
 800369a:	46c0      	nop			; (mov r8, r8)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2101      	movs	r1, #1
 80036a8:	438a      	bics	r2, r1
 80036aa:	609a      	str	r2, [r3, #8]
 80036ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ae:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b2:	f383 8810 	msr	PRIMASK, r3
}
 80036b6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d118      	bne.n	80036f2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036c0:	f3ef 8310 	mrs	r3, PRIMASK
 80036c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80036c6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036ca:	2301      	movs	r3, #1
 80036cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f383 8810 	msr	PRIMASK, r3
}
 80036d4:	46c0      	nop			; (mov r8, r8)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2110      	movs	r1, #16
 80036e2:	438a      	bics	r2, r1
 80036e4:	601a      	str	r2, [r3, #0]
 80036e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	f383 8810 	msr	PRIMASK, r3
}
 80036f0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2280      	movs	r2, #128	; 0x80
 80036f6:	2120      	movs	r1, #32
 80036f8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003706:	46c0      	nop			; (mov r8, r8)
 8003708:	46bd      	mov	sp, r7
 800370a:	b00e      	add	sp, #56	; 0x38
 800370c:	bd80      	pop	{r7, pc}
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	fffffedf 	.word	0xfffffedf

08003714 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	225a      	movs	r2, #90	; 0x5a
 8003726:	2100      	movs	r1, #0
 8003728:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2252      	movs	r2, #82	; 0x52
 800372e:	2100      	movs	r1, #0
 8003730:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	0018      	movs	r0, r3
 8003736:	f7ff fbb3 	bl	8002ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	46bd      	mov	sp, r7
 800373e:	b004      	add	sp, #16
 8003740:	bd80      	pop	{r7, pc}

08003742 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b086      	sub	sp, #24
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800374a:	f3ef 8310 	mrs	r3, PRIMASK
 800374e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003750:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003752:	617b      	str	r3, [r7, #20]
 8003754:	2301      	movs	r3, #1
 8003756:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f383 8810 	msr	PRIMASK, r3
}
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2140      	movs	r1, #64	; 0x40
 800376c:	438a      	bics	r2, r1
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	f383 8810 	msr	PRIMASK, r3
}
 800377a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2220      	movs	r2, #32
 8003780:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	0018      	movs	r0, r3
 800378c:	f7ff fb80 	bl	8002e90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003790:	46c0      	nop			; (mov r8, r8)
 8003792:	46bd      	mov	sp, r7
 8003794:	b006      	add	sp, #24
 8003796:	bd80      	pop	{r7, pc}

08003798 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b094      	sub	sp, #80	; 0x50
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80037a0:	204e      	movs	r0, #78	; 0x4e
 80037a2:	183b      	adds	r3, r7, r0
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	215c      	movs	r1, #92	; 0x5c
 80037a8:	5a52      	ldrh	r2, [r2, r1]
 80037aa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2280      	movs	r2, #128	; 0x80
 80037b0:	589b      	ldr	r3, [r3, r2]
 80037b2:	2b22      	cmp	r3, #34	; 0x22
 80037b4:	d000      	beq.n	80037b8 <UART_RxISR_8BIT+0x20>
 80037b6:	e0ba      	b.n	800392e <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	214c      	movs	r1, #76	; 0x4c
 80037be:	187b      	adds	r3, r7, r1
 80037c0:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80037c2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80037c4:	187b      	adds	r3, r7, r1
 80037c6:	881b      	ldrh	r3, [r3, #0]
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	183b      	adds	r3, r7, r0
 80037cc:	881b      	ldrh	r3, [r3, #0]
 80037ce:	b2d9      	uxtb	r1, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d4:	400a      	ands	r2, r1
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037de:	1c5a      	adds	r2, r3, #1
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	225a      	movs	r2, #90	; 0x5a
 80037e8:	5a9b      	ldrh	r3, [r3, r2]
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b299      	uxth	r1, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	225a      	movs	r2, #90	; 0x5a
 80037f4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	225a      	movs	r2, #90	; 0x5a
 80037fa:	5a9b      	ldrh	r3, [r3, r2]
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d000      	beq.n	8003804 <UART_RxISR_8BIT+0x6c>
 8003802:	e09c      	b.n	800393e <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003804:	f3ef 8310 	mrs	r3, PRIMASK
 8003808:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800380c:	64bb      	str	r3, [r7, #72]	; 0x48
 800380e:	2301      	movs	r3, #1
 8003810:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003814:	f383 8810 	msr	PRIMASK, r3
}
 8003818:	46c0      	nop			; (mov r8, r8)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4948      	ldr	r1, [pc, #288]	; (8003948 <UART_RxISR_8BIT+0x1b0>)
 8003826:	400a      	ands	r2, r1
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800382c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800382e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003830:	f383 8810 	msr	PRIMASK, r3
}
 8003834:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003836:	f3ef 8310 	mrs	r3, PRIMASK
 800383a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800383c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800383e:	647b      	str	r3, [r7, #68]	; 0x44
 8003840:	2301      	movs	r3, #1
 8003842:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003846:	f383 8810 	msr	PRIMASK, r3
}
 800384a:	46c0      	nop			; (mov r8, r8)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2101      	movs	r1, #1
 8003858:	438a      	bics	r2, r1
 800385a:	609a      	str	r2, [r3, #8]
 800385c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800385e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003862:	f383 8810 	msr	PRIMASK, r3
}
 8003866:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2280      	movs	r2, #128	; 0x80
 800386c:	2120      	movs	r1, #32
 800386e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	2380      	movs	r3, #128	; 0x80
 8003884:	041b      	lsls	r3, r3, #16
 8003886:	4013      	ands	r3, r2
 8003888:	d018      	beq.n	80038bc <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800388a:	f3ef 8310 	mrs	r3, PRIMASK
 800388e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003890:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003892:	643b      	str	r3, [r7, #64]	; 0x40
 8003894:	2301      	movs	r3, #1
 8003896:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	f383 8810 	msr	PRIMASK, r3
}
 800389e:	46c0      	nop			; (mov r8, r8)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4928      	ldr	r1, [pc, #160]	; (800394c <UART_RxISR_8BIT+0x1b4>)
 80038ac:	400a      	ands	r2, r1
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038b2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	f383 8810 	msr	PRIMASK, r3
}
 80038ba:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d12f      	bne.n	8003924 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038ca:	f3ef 8310 	mrs	r3, PRIMASK
 80038ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80038d0:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038d4:	2301      	movs	r3, #1
 80038d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	f383 8810 	msr	PRIMASK, r3
}
 80038de:	46c0      	nop			; (mov r8, r8)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2110      	movs	r1, #16
 80038ec:	438a      	bics	r2, r1
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	f383 8810 	msr	PRIMASK, r3
}
 80038fa:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	2210      	movs	r2, #16
 8003904:	4013      	ands	r3, r2
 8003906:	2b10      	cmp	r3, #16
 8003908:	d103      	bne.n	8003912 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2210      	movs	r2, #16
 8003910:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2258      	movs	r2, #88	; 0x58
 8003916:	5a9a      	ldrh	r2, [r3, r2]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	0011      	movs	r1, r2
 800391c:	0018      	movs	r0, r3
 800391e:	f7ff fac7 	bl	8002eb0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003922:	e00c      	b.n	800393e <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	0018      	movs	r0, r3
 8003928:	f7fd f858 	bl	80009dc <HAL_UART_RxCpltCallback>
}
 800392c:	e007      	b.n	800393e <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	699a      	ldr	r2, [r3, #24]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2108      	movs	r1, #8
 800393a:	430a      	orrs	r2, r1
 800393c:	619a      	str	r2, [r3, #24]
}
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	46bd      	mov	sp, r7
 8003942:	b014      	add	sp, #80	; 0x50
 8003944:	bd80      	pop	{r7, pc}
 8003946:	46c0      	nop			; (mov r8, r8)
 8003948:	fffffedf 	.word	0xfffffedf
 800394c:	fbffffff 	.word	0xfbffffff

08003950 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b094      	sub	sp, #80	; 0x50
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003958:	204e      	movs	r0, #78	; 0x4e
 800395a:	183b      	adds	r3, r7, r0
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	215c      	movs	r1, #92	; 0x5c
 8003960:	5a52      	ldrh	r2, [r2, r1]
 8003962:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2280      	movs	r2, #128	; 0x80
 8003968:	589b      	ldr	r3, [r3, r2]
 800396a:	2b22      	cmp	r3, #34	; 0x22
 800396c:	d000      	beq.n	8003970 <UART_RxISR_16BIT+0x20>
 800396e:	e0ba      	b.n	8003ae6 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	214c      	movs	r1, #76	; 0x4c
 8003976:	187b      	adds	r3, r7, r1
 8003978:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800397a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003980:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8003982:	187b      	adds	r3, r7, r1
 8003984:	183a      	adds	r2, r7, r0
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	8812      	ldrh	r2, [r2, #0]
 800398a:	4013      	ands	r3, r2
 800398c:	b29a      	uxth	r2, r3
 800398e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003990:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003996:	1c9a      	adds	r2, r3, #2
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	225a      	movs	r2, #90	; 0x5a
 80039a0:	5a9b      	ldrh	r3, [r3, r2]
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	3b01      	subs	r3, #1
 80039a6:	b299      	uxth	r1, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	225a      	movs	r2, #90	; 0x5a
 80039ac:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	225a      	movs	r2, #90	; 0x5a
 80039b2:	5a9b      	ldrh	r3, [r3, r2]
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d000      	beq.n	80039bc <UART_RxISR_16BIT+0x6c>
 80039ba:	e09c      	b.n	8003af6 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039bc:	f3ef 8310 	mrs	r3, PRIMASK
 80039c0:	623b      	str	r3, [r7, #32]
  return(result);
 80039c2:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039c4:	647b      	str	r3, [r7, #68]	; 0x44
 80039c6:	2301      	movs	r3, #1
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	f383 8810 	msr	PRIMASK, r3
}
 80039d0:	46c0      	nop			; (mov r8, r8)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4948      	ldr	r1, [pc, #288]	; (8003b00 <UART_RxISR_16BIT+0x1b0>)
 80039de:	400a      	ands	r2, r1
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039e4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e8:	f383 8810 	msr	PRIMASK, r3
}
 80039ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039ee:	f3ef 8310 	mrs	r3, PRIMASK
 80039f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80039f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039f6:	643b      	str	r3, [r7, #64]	; 0x40
 80039f8:	2301      	movs	r3, #1
 80039fa:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fe:	f383 8810 	msr	PRIMASK, r3
}
 8003a02:	46c0      	nop			; (mov r8, r8)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689a      	ldr	r2, [r3, #8]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2101      	movs	r1, #1
 8003a10:	438a      	bics	r2, r1
 8003a12:	609a      	str	r2, [r3, #8]
 8003a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a16:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a1a:	f383 8810 	msr	PRIMASK, r3
}
 8003a1e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2280      	movs	r2, #128	; 0x80
 8003a24:	2120      	movs	r1, #32
 8003a26:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	2380      	movs	r3, #128	; 0x80
 8003a3c:	041b      	lsls	r3, r3, #16
 8003a3e:	4013      	ands	r3, r2
 8003a40:	d018      	beq.n	8003a74 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a42:	f3ef 8310 	mrs	r3, PRIMASK
 8003a46:	617b      	str	r3, [r7, #20]
  return(result);
 8003a48:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	f383 8810 	msr	PRIMASK, r3
}
 8003a56:	46c0      	nop			; (mov r8, r8)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4928      	ldr	r1, [pc, #160]	; (8003b04 <UART_RxISR_16BIT+0x1b4>)
 8003a64:	400a      	ands	r2, r1
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a6a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f383 8810 	msr	PRIMASK, r3
}
 8003a72:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d12f      	bne.n	8003adc <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a82:	f3ef 8310 	mrs	r3, PRIMASK
 8003a86:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a88:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f383 8810 	msr	PRIMASK, r3
}
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2110      	movs	r1, #16
 8003aa4:	438a      	bics	r2, r1
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	f383 8810 	msr	PRIMASK, r3
}
 8003ab2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	2210      	movs	r2, #16
 8003abc:	4013      	ands	r3, r2
 8003abe:	2b10      	cmp	r3, #16
 8003ac0:	d103      	bne.n	8003aca <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2210      	movs	r2, #16
 8003ac8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2258      	movs	r2, #88	; 0x58
 8003ace:	5a9a      	ldrh	r2, [r3, r2]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	0011      	movs	r1, r2
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	f7ff f9eb 	bl	8002eb0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003ada:	e00c      	b.n	8003af6 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	0018      	movs	r0, r3
 8003ae0:	f7fc ff7c 	bl	80009dc <HAL_UART_RxCpltCallback>
}
 8003ae4:	e007      	b.n	8003af6 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	699a      	ldr	r2, [r3, #24]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2108      	movs	r1, #8
 8003af2:	430a      	orrs	r2, r1
 8003af4:	619a      	str	r2, [r3, #24]
}
 8003af6:	46c0      	nop			; (mov r8, r8)
 8003af8:	46bd      	mov	sp, r7
 8003afa:	b014      	add	sp, #80	; 0x50
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	46c0      	nop			; (mov r8, r8)
 8003b00:	fffffedf 	.word	0xfffffedf
 8003b04:	fbffffff 	.word	0xfbffffff

08003b08 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8003b0e:	4b22      	ldr	r3, [pc, #136]	; (8003b98 <_DoInit+0x90>)
 8003b10:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2203      	movs	r2, #3
 8003b16:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2203      	movs	r2, #3
 8003b1c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a1e      	ldr	r2, [pc, #120]	; (8003b9c <_DoInit+0x94>)
 8003b22:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a1e      	ldr	r2, [pc, #120]	; (8003ba0 <_DoInit+0x98>)
 8003b28:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2280      	movs	r2, #128	; 0x80
 8003b2e:	00d2      	lsls	r2, r2, #3
 8003b30:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a15      	ldr	r2, [pc, #84]	; (8003b9c <_DoInit+0x94>)
 8003b48:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a15      	ldr	r2, [pc, #84]	; (8003ba4 <_DoInit+0x9c>)
 8003b4e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2210      	movs	r2, #16
 8003b54:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY(&p->acID[7], "RTT", 9);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	1dda      	adds	r2, r3, #7
 8003b6c:	4b0e      	ldr	r3, [pc, #56]	; (8003ba8 <_DoInit+0xa0>)
 8003b6e:	0010      	movs	r0, r2
 8003b70:	0019      	movs	r1, r3
 8003b72:	2304      	movs	r3, #4
 8003b74:	001a      	movs	r2, r3
 8003b76:	f000 fe9b 	bl	80048b0 <memcpy>
  STRCPY(&p->acID[0], "SEGGER", 7);
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	4b0b      	ldr	r3, [pc, #44]	; (8003bac <_DoInit+0xa4>)
 8003b7e:	0010      	movs	r0, r2
 8003b80:	0019      	movs	r1, r3
 8003b82:	2307      	movs	r3, #7
 8003b84:	001a      	movs	r2, r3
 8003b86:	f000 fe93 	bl	80048b0 <memcpy>
  p->acID[6] = ' ';
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	719a      	strb	r2, [r3, #6]
}
 8003b90:	46c0      	nop			; (mov r8, r8)
 8003b92:	46bd      	mov	sp, r7
 8003b94:	b002      	add	sp, #8
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	20000310 	.word	0x20000310
 8003b9c:	080055f4 	.word	0x080055f4
 8003ba0:	200003b8 	.word	0x200003b8
 8003ba4:	200007b8 	.word	0x200007b8
 8003ba8:	08005600 	.word	0x08005600
 8003bac:	08005604 	.word	0x08005604

08003bb0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b088      	sub	sp, #32
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
  char*    pDst;
#endif
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d905      	bls.n	8003be0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	61fb      	str	r3, [r7, #28]
 8003bde:	e007      	b.n	8003bf0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	6939      	ldr	r1, [r7, #16]
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	1acb      	subs	r3, r1, r3
 8003bea:	18d3      	adds	r3, r2, r3
 8003bec:	3b01      	subs	r3, #1
 8003bee:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	1ad2      	subs	r2, r2, r3
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d900      	bls.n	8003c00 <_WriteBlocking+0x50>
 8003bfe:	0013      	movs	r3, r2
 8003c00:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003c02:	69fa      	ldr	r2, [r7, #28]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d900      	bls.n	8003c0c <_WriteBlocking+0x5c>
 8003c0a:	0013      	movs	r3, r2
 8003c0c:	61fb      	str	r3, [r7, #28]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	18d3      	adds	r3, r2, r3
 8003c16:	69fa      	ldr	r2, [r7, #28]
 8003c18:	68b9      	ldr	r1, [r7, #8]
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	f000 fe48 	bl	80048b0 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	18d3      	adds	r3, r2, r3
 8003c26:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	18d3      	adds	r3, r2, r3
 8003c2e:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	18d3      	adds	r3, r2, r3
 8003c3e:	617b      	str	r3, [r7, #20]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d101      	bne.n	8003c4e <_WriteBlocking+0x9e>
      WrOff = 0u;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1b5      	bne.n	8003bc6 <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 8003c5a:	69bb      	ldr	r3, [r7, #24]
}
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	b008      	add	sp, #32
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b088      	sub	sp, #32
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
  unsigned Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*    pDst;
#endif

  WrOff = pRing->WrOff;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d90e      	bls.n	8003ca6 <_WriteNoCheck+0x42>
    while (NumBytes--) {
      *pDst++ = *pData++;
    };
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	18d3      	adds	r3, r2, r3
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	68b9      	ldr	r1, [r7, #8]
 8003c94:	0018      	movs	r0, r3
 8003c96:	f000 fe0b 	bl	80048b0 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 8003c9a:	69fa      	ldr	r2, [r7, #28]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	18d2      	adds	r2, r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	60da      	str	r2, [r3, #12]
    NumBytesAtOnce = NumBytes - Rem;
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003ca4:	e01a      	b.n	8003cdc <_WriteNoCheck+0x78>
    NumBytesAtOnce = Rem;
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	18d3      	adds	r3, r2, r3
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	68b9      	ldr	r1, [r7, #8]
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	f000 fdfa 	bl	80048b0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6858      	ldr	r0, [r3, #4]
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	18d3      	adds	r3, r2, r3
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	0019      	movs	r1, r3
 8003cd2:	f000 fded 	bl	80048b0 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	60da      	str	r2, [r3, #12]
}
 8003cdc:	46c0      	nop			; (mov r8, r8)
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	b008      	add	sp, #32
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d808      	bhi.n	8003d12 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	1ad2      	subs	r2, r2, r3
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	18d3      	adds	r3, r2, r3
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	617b      	str	r3, [r7, #20]
 8003d10:	e004      	b.n	8003d1c <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003d1c:	697b      	ldr	r3, [r7, #20]
}
 8003d1e:	0018      	movs	r0, r3
 8003d20:	46bd      	mov	sp, r7
 8003d22:	b006      	add	sp, #24
 8003d24:	bd80      	pop	{r7, pc}
	...

08003d28 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b088      	sub	sp, #32
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	1c5a      	adds	r2, r3, #1
 8003d3c:	0013      	movs	r3, r2
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	189b      	adds	r3, r3, r2
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	4a23      	ldr	r2, [pc, #140]	; (8003dd4 <SEGGER_RTT_WriteNoLock+0xac>)
 8003d46:	189b      	adds	r3, r3, r2
 8003d48:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d02e      	beq.n	8003db0 <SEGGER_RTT_WriteNoLock+0x88>
 8003d52:	d836      	bhi.n	8003dc2 <SEGGER_RTT_WriteNoLock+0x9a>
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d002      	beq.n	8003d5e <SEGGER_RTT_WriteNoLock+0x36>
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d016      	beq.n	8003d8a <SEGGER_RTT_WriteNoLock+0x62>
 8003d5c:	e031      	b.n	8003dc2 <SEGGER_RTT_WriteNoLock+0x9a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	0018      	movs	r0, r3
 8003d62:	f7ff ffbf 	bl	8003ce4 <_GetAvailWriteSpace>
 8003d66:	0003      	movs	r3, r0
 8003d68:	613b      	str	r3, [r7, #16]
    if (Avail < NumBytes) {
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d202      	bcs.n	8003d78 <SEGGER_RTT_WriteNoLock+0x50>
      Status = 0u;
 8003d72:	2300      	movs	r3, #0
 8003d74:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003d76:	e027      	b.n	8003dc8 <SEGGER_RTT_WriteNoLock+0xa0>
      Status = NumBytes;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	69b9      	ldr	r1, [r7, #24]
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	0018      	movs	r0, r3
 8003d84:	f7ff ff6e 	bl	8003c64 <_WriteNoCheck>
    break;
 8003d88:	e01e      	b.n	8003dc8 <SEGGER_RTT_WriteNoLock+0xa0>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	0018      	movs	r0, r3
 8003d8e:	f7ff ffa9 	bl	8003ce4 <_GetAvailWriteSpace>
 8003d92:	0003      	movs	r3, r0
 8003d94:	613b      	str	r3, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d900      	bls.n	8003da0 <SEGGER_RTT_WriteNoLock+0x78>
 8003d9e:	0013      	movs	r3, r2
 8003da0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003da2:	69fa      	ldr	r2, [r7, #28]
 8003da4:	69b9      	ldr	r1, [r7, #24]
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	0018      	movs	r0, r3
 8003daa:	f7ff ff5b 	bl	8003c64 <_WriteNoCheck>
    break;
 8003dae:	e00b      	b.n	8003dc8 <SEGGER_RTT_WriteNoLock+0xa0>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	69b9      	ldr	r1, [r7, #24]
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	0018      	movs	r0, r3
 8003db8:	f7ff fefa 	bl	8003bb0 <_WriteBlocking>
 8003dbc:	0003      	movs	r3, r0
 8003dbe:	61fb      	str	r3, [r7, #28]
    break;
 8003dc0:	e002      	b.n	8003dc8 <SEGGER_RTT_WriteNoLock+0xa0>
  default:
    Status = 0u;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	61fb      	str	r3, [r7, #28]
    break;
 8003dc6:	46c0      	nop			; (mov r8, r8)
  }
  //
  // Finish up.
  //
  return Status;
 8003dc8:	69fb      	ldr	r3, [r7, #28]
}
 8003dca:	0018      	movs	r0, r3
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	b008      	add	sp, #32
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	46c0      	nop			; (mov r8, r8)
 8003dd4:	20000310 	.word	0x20000310

08003dd8 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 8003de4:	4b0d      	ldr	r3, [pc, #52]	; (8003e1c <SEGGER_RTT_Write+0x44>)
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <SEGGER_RTT_Write+0x18>
 8003dec:	f7ff fe8c 	bl	8003b08 <_DoInit>
  SEGGER_RTT_LOCK();
 8003df0:	f3ef 8310 	mrs	r3, PRIMASK
 8003df4:	2101      	movs	r1, #1
 8003df6:	f381 8810 	msr	PRIMASK, r1
 8003dfa:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	68b9      	ldr	r1, [r7, #8]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	0018      	movs	r0, r3
 8003e04:	f7ff ff90 	bl	8003d28 <SEGGER_RTT_WriteNoLock>
 8003e08:	0003      	movs	r3, r0
 8003e0a:	613b      	str	r3, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	f383 8810 	msr	PRIMASK, r3
  //
  return Status;
 8003e12:	693b      	ldr	r3, [r7, #16]
}
 8003e14:	0018      	movs	r0, r3
 8003e16:	46bd      	mov	sp, r7
 8003e18:	b006      	add	sp, #24
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	20000310 	.word	0x20000310

08003e20 <SEGGER_RTT_WriteString>:
*  Notes
*    (1) Data is stored according to buffer flags.
*    (2) String passed to this function has to be \0 terminated
*    (3) \0 termination character is *not* stored in RTT buffer
*/
unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  unsigned Len;

  Len = STRLEN(s);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	f7fc f96b 	bl	8000108 <strlen>
 8003e32:	0003      	movs	r3, r0
 8003e34:	60fb      	str	r3, [r7, #12]
  return SEGGER_RTT_Write(BufferIndex, s, Len);
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	6839      	ldr	r1, [r7, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	f7ff ffcb 	bl	8003dd8 <SEGGER_RTT_Write>
 8003e42:	0003      	movs	r3, r0
}
 8003e44:	0018      	movs	r0, r3
 8003e46:	46bd      	mov	sp, r7
 8003e48:	b004      	add	sp, #16
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <SEGGER_RTT_PutChar>:
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/

unsigned SEGGER_RTT_PutChar(unsigned BufferIndex, char c) {
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	000a      	movs	r2, r1
 8003e56:	1cfb      	adds	r3, r7, #3
 8003e58:	701a      	strb	r2, [r3, #0]
  unsigned              WrOff;
  unsigned              Status;
  //
  // Prepare
  //
  INIT();
 8003e5a:	4b23      	ldr	r3, [pc, #140]	; (8003ee8 <SEGGER_RTT_PutChar+0x9c>)
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <SEGGER_RTT_PutChar+0x1a>
 8003e62:	f7ff fe51 	bl	8003b08 <_DoInit>
  SEGGER_RTT_LOCK();
 8003e66:	f3ef 8310 	mrs	r3, PRIMASK
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	f381 8810 	msr	PRIMASK, r1
 8003e70:	60fb      	str	r3, [r7, #12]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	0013      	movs	r3, r2
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	189b      	adds	r3, r3, r2
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	4a1a      	ldr	r2, [pc, #104]	; (8003ee8 <SEGGER_RTT_PutChar+0x9c>)
 8003e80:	189b      	adds	r3, r3, r2
 8003e82:	60bb      	str	r3, [r7, #8]
  //
  // Get write position and handle wrap-around if necessary
  //
  WrOff = pRing->WrOff + 1;
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	617b      	str	r3, [r7, #20]
  if (WrOff == pRing->SizeOfBuffer) {
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d101      	bne.n	8003e9a <SEGGER_RTT_PutChar+0x4e>
    WrOff = 0;
 8003e96:	2300      	movs	r3, #0
 8003e98:	617b      	str	r3, [r7, #20]
  }
  //
  // Wait for free space if mode is set to blocking
  //
  if (pRing->Flags == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d105      	bne.n	8003eae <SEGGER_RTT_PutChar+0x62>
    while (WrOff == pRing->RdOff) {
 8003ea2:	46c0      	nop			; (mov r8, r8)
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d0fa      	beq.n	8003ea4 <SEGGER_RTT_PutChar+0x58>
    }
  }
  //
  // Output byte if free space is available
  //
  if (WrOff != pRing->RdOff) {
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d00d      	beq.n	8003ed4 <SEGGER_RTT_PutChar+0x88>
    pRing->pBuffer[pRing->WrOff] = c;
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	18d3      	adds	r3, r2, r3
 8003ec2:	1cfa      	adds	r2, r7, #3
 8003ec4:	7812      	ldrb	r2, [r2, #0]
 8003ec6:	701a      	strb	r2, [r3, #0]
    pRing->WrOff = WrOff;
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	60da      	str	r2, [r3, #12]
    Status = 1;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	613b      	str	r3, [r7, #16]
 8003ed2:	e001      	b.n	8003ed8 <SEGGER_RTT_PutChar+0x8c>
  } else {
    Status = 0;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	613b      	str	r3, [r7, #16]
  }
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f383 8810 	msr	PRIMASK, r3
  //
  return Status;
 8003ede:	693b      	ldr	r3, [r7, #16]
}
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	b006      	add	sp, #24
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	20000310 	.word	0x20000310

08003eec <TM1638_StartComunication>:
 ==================================================================================
 */

static inline void
TM1638_StartComunication(TM1638_Handler_t *Handler)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  Handler->StbWrite(0);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	69db      	ldr	r3, [r3, #28]
 8003ef8:	2000      	movs	r0, #0
 8003efa:	4798      	blx	r3
}
 8003efc:	46c0      	nop			; (mov r8, r8)
 8003efe:	46bd      	mov	sp, r7
 8003f00:	b002      	add	sp, #8
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <TM1638_StopComunication>:

static inline void
TM1638_StopComunication(TM1638_Handler_t *Handler)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  Handler->StbWrite(1);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	69db      	ldr	r3, [r3, #28]
 8003f10:	2001      	movs	r0, #1
 8003f12:	4798      	blx	r3
}
 8003f14:	46c0      	nop			; (mov r8, r8)
 8003f16:	46bd      	mov	sp, r7
 8003f18:	b002      	add	sp, #8
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <TM1638_WriteBytes>:

static void
TM1638_WriteBytes(TM1638_Handler_t *Handler,
                  const uint8_t *Data, uint8_t NumOfBytes)
{
 8003f1c:	b590      	push	{r4, r7, lr}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	1dfb      	adds	r3, r7, #7
 8003f28:	701a      	strb	r2, [r3, #0]
  uint8_t i, j, Buff;

  Handler->DioConfigOut();
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	4798      	blx	r3

  for (j = 0; j < NumOfBytes; j++)
 8003f30:	2316      	movs	r3, #22
 8003f32:	18fb      	adds	r3, r7, r3
 8003f34:	2200      	movs	r2, #0
 8003f36:	701a      	strb	r2, [r3, #0]
 8003f38:	e03d      	b.n	8003fb6 <TM1638_WriteBytes+0x9a>
  {
    for (i = 0, Buff = Data[j]; i < 8; ++i, Buff >>= 1)
 8003f3a:	2317      	movs	r3, #23
 8003f3c:	18fb      	adds	r3, r7, r3
 8003f3e:	2200      	movs	r2, #0
 8003f40:	701a      	strb	r2, [r3, #0]
 8003f42:	2316      	movs	r3, #22
 8003f44:	18fb      	adds	r3, r7, r3
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	18d2      	adds	r2, r2, r3
 8003f4c:	2315      	movs	r3, #21
 8003f4e:	18fb      	adds	r3, r7, r3
 8003f50:	7812      	ldrb	r2, [r2, #0]
 8003f52:	701a      	strb	r2, [r3, #0]
 8003f54:	e024      	b.n	8003fa0 <TM1638_WriteBytes+0x84>
    {
      Handler->ClkWrite(0);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	2000      	movs	r0, #0
 8003f5c:	4798      	blx	r3
      Handler->DelayUs(1);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	2001      	movs	r0, #1
 8003f64:	4798      	blx	r3
      Handler->DioWrite(Buff & 0x01);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	2415      	movs	r4, #21
 8003f6c:	193a      	adds	r2, r7, r4
 8003f6e:	7812      	ldrb	r2, [r2, #0]
 8003f70:	2101      	movs	r1, #1
 8003f72:	400a      	ands	r2, r1
 8003f74:	b2d2      	uxtb	r2, r2
 8003f76:	0010      	movs	r0, r2
 8003f78:	4798      	blx	r3
      Handler->ClkWrite(1);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	2001      	movs	r0, #1
 8003f80:	4798      	blx	r3
      Handler->DelayUs(1);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	2001      	movs	r0, #1
 8003f88:	4798      	blx	r3
    for (i = 0, Buff = Data[j]; i < 8; ++i, Buff >>= 1)
 8003f8a:	2217      	movs	r2, #23
 8003f8c:	18bb      	adds	r3, r7, r2
 8003f8e:	18ba      	adds	r2, r7, r2
 8003f90:	7812      	ldrb	r2, [r2, #0]
 8003f92:	3201      	adds	r2, #1
 8003f94:	701a      	strb	r2, [r3, #0]
 8003f96:	193b      	adds	r3, r7, r4
 8003f98:	193a      	adds	r2, r7, r4
 8003f9a:	7812      	ldrb	r2, [r2, #0]
 8003f9c:	0852      	lsrs	r2, r2, #1
 8003f9e:	701a      	strb	r2, [r3, #0]
 8003fa0:	2317      	movs	r3, #23
 8003fa2:	18fb      	adds	r3, r7, r3
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	2b07      	cmp	r3, #7
 8003fa8:	d9d5      	bls.n	8003f56 <TM1638_WriteBytes+0x3a>
  for (j = 0; j < NumOfBytes; j++)
 8003faa:	2116      	movs	r1, #22
 8003fac:	187b      	adds	r3, r7, r1
 8003fae:	781a      	ldrb	r2, [r3, #0]
 8003fb0:	187b      	adds	r3, r7, r1
 8003fb2:	3201      	adds	r2, #1
 8003fb4:	701a      	strb	r2, [r3, #0]
 8003fb6:	2316      	movs	r3, #22
 8003fb8:	18fa      	adds	r2, r7, r3
 8003fba:	1dfb      	adds	r3, r7, #7
 8003fbc:	7812      	ldrb	r2, [r2, #0]
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d3ba      	bcc.n	8003f3a <TM1638_WriteBytes+0x1e>
    }
  }
}
 8003fc4:	46c0      	nop			; (mov r8, r8)
 8003fc6:	46c0      	nop			; (mov r8, r8)
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	b007      	add	sp, #28
 8003fcc:	bd90      	pop	{r4, r7, pc}

08003fce <TM1638_ReadBytes>:

static void
TM1638_ReadBytes(TM1638_Handler_t *Handler,
                 uint8_t *Data, uint8_t NumOfBytes)
{
 8003fce:	b590      	push	{r4, r7, lr}
 8003fd0:	b087      	sub	sp, #28
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	60f8      	str	r0, [r7, #12]
 8003fd6:	60b9      	str	r1, [r7, #8]
 8003fd8:	1dfb      	adds	r3, r7, #7
 8003fda:	701a      	strb	r2, [r3, #0]
  uint8_t i, j, Buff;

  Handler->DioConfigIn();
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	4798      	blx	r3

  Handler->DelayUs(5);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	2005      	movs	r0, #5
 8003fe8:	4798      	blx	r3

  for (j = 0; j < NumOfBytes; j++)
 8003fea:	2316      	movs	r3, #22
 8003fec:	18fb      	adds	r3, r7, r3
 8003fee:	2200      	movs	r2, #0
 8003ff0:	701a      	strb	r2, [r3, #0]
 8003ff2:	e047      	b.n	8004084 <TM1638_ReadBytes+0xb6>
  {
    for (i = 0, Buff = 0; i < 8; i++)
 8003ff4:	2317      	movs	r3, #23
 8003ff6:	18fb      	adds	r3, r7, r3
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	701a      	strb	r2, [r3, #0]
 8003ffc:	2315      	movs	r3, #21
 8003ffe:	18fb      	adds	r3, r7, r3
 8004000:	2200      	movs	r2, #0
 8004002:	701a      	strb	r2, [r3, #0]
 8004004:	e027      	b.n	8004056 <TM1638_ReadBytes+0x88>
    {
      Handler->ClkWrite(0);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	2000      	movs	r0, #0
 800400c:	4798      	blx	r3
      Handler->DelayUs(1);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	2001      	movs	r0, #1
 8004014:	4798      	blx	r3
      Handler->ClkWrite(1);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	2001      	movs	r0, #1
 800401c:	4798      	blx	r3
      Buff |= (Handler->DioRead() << i);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	4798      	blx	r3
 8004024:	0003      	movs	r3, r0
 8004026:	001a      	movs	r2, r3
 8004028:	2417      	movs	r4, #23
 800402a:	193b      	adds	r3, r7, r4
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	409a      	lsls	r2, r3
 8004030:	0013      	movs	r3, r2
 8004032:	b25a      	sxtb	r2, r3
 8004034:	2115      	movs	r1, #21
 8004036:	187b      	adds	r3, r7, r1
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	b25b      	sxtb	r3, r3
 800403c:	4313      	orrs	r3, r2
 800403e:	b25a      	sxtb	r2, r3
 8004040:	187b      	adds	r3, r7, r1
 8004042:	701a      	strb	r2, [r3, #0]
      Handler->DelayUs(1);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6a1b      	ldr	r3, [r3, #32]
 8004048:	2001      	movs	r0, #1
 800404a:	4798      	blx	r3
    for (i = 0, Buff = 0; i < 8; i++)
 800404c:	193b      	adds	r3, r7, r4
 800404e:	781a      	ldrb	r2, [r3, #0]
 8004050:	193b      	adds	r3, r7, r4
 8004052:	3201      	adds	r2, #1
 8004054:	701a      	strb	r2, [r3, #0]
 8004056:	2317      	movs	r3, #23
 8004058:	18fb      	adds	r3, r7, r3
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	2b07      	cmp	r3, #7
 800405e:	d9d2      	bls.n	8004006 <TM1638_ReadBytes+0x38>
    }

    Data[j] = Buff;
 8004060:	2416      	movs	r4, #22
 8004062:	193b      	adds	r3, r7, r4
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	18d3      	adds	r3, r2, r3
 800406a:	2215      	movs	r2, #21
 800406c:	18ba      	adds	r2, r7, r2
 800406e:	7812      	ldrb	r2, [r2, #0]
 8004070:	701a      	strb	r2, [r3, #0]
    Handler->DelayUs(2);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	2002      	movs	r0, #2
 8004078:	4798      	blx	r3
  for (j = 0; j < NumOfBytes; j++)
 800407a:	193b      	adds	r3, r7, r4
 800407c:	781a      	ldrb	r2, [r3, #0]
 800407e:	193b      	adds	r3, r7, r4
 8004080:	3201      	adds	r2, #1
 8004082:	701a      	strb	r2, [r3, #0]
 8004084:	2316      	movs	r3, #22
 8004086:	18fa      	adds	r2, r7, r3
 8004088:	1dfb      	adds	r3, r7, #7
 800408a:	7812      	ldrb	r2, [r2, #0]
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	429a      	cmp	r2, r3
 8004090:	d3b0      	bcc.n	8003ff4 <TM1638_ReadBytes+0x26>
  }
}
 8004092:	46c0      	nop			; (mov r8, r8)
 8004094:	46c0      	nop			; (mov r8, r8)
 8004096:	46bd      	mov	sp, r7
 8004098:	b007      	add	sp, #28
 800409a:	bd90      	pop	{r4, r7, pc}

0800409c <TM1638_SetMultipleDisplayRegister>:

static void
TM1638_SetMultipleDisplayRegister(TM1638_Handler_t *Handler,
                                  const uint8_t *DigitData,
                                  uint8_t StartAddr, uint8_t Count)
{
 800409c:	b590      	push	{r4, r7, lr}
 800409e:	b087      	sub	sp, #28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	0019      	movs	r1, r3
 80040a8:	1dfb      	adds	r3, r7, #7
 80040aa:	701a      	strb	r2, [r3, #0]
 80040ac:	1dbb      	adds	r3, r7, #6
 80040ae:	1c0a      	adds	r2, r1, #0
 80040b0:	701a      	strb	r2, [r3, #0]
  uint8_t Data = DataInstructionSet | WriteDataToRegister |
 80040b2:	2417      	movs	r4, #23
 80040b4:	193b      	adds	r3, r7, r4
 80040b6:	2240      	movs	r2, #64	; 0x40
 80040b8:	701a      	strb	r2, [r3, #0]
                 AutoAddressAdd | NormalMode;

  TM1638_StartComunication(Handler);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	0018      	movs	r0, r3
 80040be:	f7ff ff15 	bl	8003eec <TM1638_StartComunication>
  TM1638_WriteBytes(Handler, &Data, 1);
 80040c2:	1939      	adds	r1, r7, r4
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2201      	movs	r2, #1
 80040c8:	0018      	movs	r0, r3
 80040ca:	f7ff ff27 	bl	8003f1c <TM1638_WriteBytes>
  TM1638_StopComunication(Handler);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	0018      	movs	r0, r3
 80040d2:	f7ff ff17 	bl	8003f04 <TM1638_StopComunication>

  Data = AddressInstructionSet | StartAddr;
 80040d6:	1dfb      	adds	r3, r7, #7
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	2240      	movs	r2, #64	; 0x40
 80040dc:	4252      	negs	r2, r2
 80040de:	4313      	orrs	r3, r2
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	193b      	adds	r3, r7, r4
 80040e4:	701a      	strb	r2, [r3, #0]

  TM1638_StartComunication(Handler);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	0018      	movs	r0, r3
 80040ea:	f7ff feff 	bl	8003eec <TM1638_StartComunication>
  TM1638_WriteBytes(Handler, &Data, 1);
 80040ee:	1939      	adds	r1, r7, r4
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2201      	movs	r2, #1
 80040f4:	0018      	movs	r0, r3
 80040f6:	f7ff ff11 	bl	8003f1c <TM1638_WriteBytes>
  TM1638_WriteBytes(Handler, DigitData, Count);
 80040fa:	1dbb      	adds	r3, r7, #6
 80040fc:	781a      	ldrb	r2, [r3, #0]
 80040fe:	68b9      	ldr	r1, [r7, #8]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	0018      	movs	r0, r3
 8004104:	f7ff ff0a 	bl	8003f1c <TM1638_WriteBytes>
  TM1638_StopComunication(Handler);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	0018      	movs	r0, r3
 800410c:	f7ff fefa 	bl	8003f04 <TM1638_StopComunication>
}
 8004110:	46c0      	nop			; (mov r8, r8)
 8004112:	46bd      	mov	sp, r7
 8004114:	b007      	add	sp, #28
 8004116:	bd90      	pop	{r4, r7, pc}

08004118 <TM1638_ScanKeyRegs>:

static void
TM1638_ScanKeyRegs(TM1638_Handler_t *Handler, uint8_t *KeyRegs)
{
 8004118:	b590      	push	{r4, r7, lr}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint8_t Data = DataInstructionSet | ReadKeyScanData |
 8004122:	240f      	movs	r4, #15
 8004124:	193b      	adds	r3, r7, r4
 8004126:	2242      	movs	r2, #66	; 0x42
 8004128:	701a      	strb	r2, [r3, #0]
                 AutoAddressAdd | NormalMode;

  TM1638_StartComunication(Handler);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	0018      	movs	r0, r3
 800412e:	f7ff fedd 	bl	8003eec <TM1638_StartComunication>
  TM1638_WriteBytes(Handler, &Data, 1);
 8004132:	1939      	adds	r1, r7, r4
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	0018      	movs	r0, r3
 800413a:	f7ff feef 	bl	8003f1c <TM1638_WriteBytes>
  TM1638_ReadBytes(Handler, KeyRegs, 4);
 800413e:	6839      	ldr	r1, [r7, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2204      	movs	r2, #4
 8004144:	0018      	movs	r0, r3
 8004146:	f7ff ff42 	bl	8003fce <TM1638_ReadBytes>
  TM1638_StopComunication(Handler);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	0018      	movs	r0, r3
 800414e:	f7ff fed9 	bl	8003f04 <TM1638_StopComunication>
}
 8004152:	46c0      	nop			; (mov r8, r8)
 8004154:	46bd      	mov	sp, r7
 8004156:	b005      	add	sp, #20
 8004158:	bd90      	pop	{r4, r7, pc}

0800415a <TM1638_Init>:
 * @retval TM1638_Result_t
 *         - TM1638_OK: Operation was successful.
 */
TM1638_Result_t
TM1638_Init(TM1638_Handler_t *Handler, uint8_t Type)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b084      	sub	sp, #16
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
 8004162:	000a      	movs	r2, r1
 8004164:	1cfb      	adds	r3, r7, #3
 8004166:	701a      	strb	r2, [r3, #0]
  Handler->DisplayType = TM1638DisplayTypeComCathode;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2224      	movs	r2, #36	; 0x24
 800416c:	2100      	movs	r1, #0
 800416e:	5499      	strb	r1, [r3, r2]

#if TM1638_CONFIG_SUPPORT_COM_ANODE
  for (uint8_t i = 0; i < 16; i++)
 8004170:	230f      	movs	r3, #15
 8004172:	18fb      	adds	r3, r7, r3
 8004174:	2200      	movs	r2, #0
 8004176:	701a      	strb	r2, [r3, #0]
 8004178:	e00d      	b.n	8004196 <TM1638_Init+0x3c>
  {
    Handler->DisplayRegister[i] = 0;
 800417a:	200f      	movs	r0, #15
 800417c:	183b      	adds	r3, r7, r0
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	2125      	movs	r1, #37	; 0x25
 8004184:	18d3      	adds	r3, r2, r3
 8004186:	185b      	adds	r3, r3, r1
 8004188:	2200      	movs	r2, #0
 800418a:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < 16; i++)
 800418c:	183b      	adds	r3, r7, r0
 800418e:	781a      	ldrb	r2, [r3, #0]
 8004190:	183b      	adds	r3, r7, r0
 8004192:	3201      	adds	r2, #1
 8004194:	701a      	strb	r2, [r3, #0]
 8004196:	230f      	movs	r3, #15
 8004198:	18fb      	adds	r3, r7, r3
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	2b0f      	cmp	r3, #15
 800419e:	d9ec      	bls.n	800417a <TM1638_Init+0x20>
  }
  if (Type == TM1638DisplayTypeComCathode)
 80041a0:	1cfb      	adds	r3, r7, #3
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d104      	bne.n	80041b2 <TM1638_Init+0x58>
    Handler->DisplayType = TM1638DisplayTypeComCathode;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2224      	movs	r2, #36	; 0x24
 80041ac:	2100      	movs	r1, #0
 80041ae:	5499      	strb	r1, [r3, r2]
 80041b0:	e003      	b.n	80041ba <TM1638_Init+0x60>
  else
    Handler->DisplayType = TM1638DisplayTypeComAnode;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2224      	movs	r2, #36	; 0x24
 80041b6:	2101      	movs	r1, #1
 80041b8:	5499      	strb	r1, [r3, r2]
#endif

  Handler->PlatformInit();
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4798      	blx	r3
  return TM1638_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	0018      	movs	r0, r3
 80041c4:	46bd      	mov	sp, r7
 80041c6:	b004      	add	sp, #16
 80041c8:	bd80      	pop	{r7, pc}

080041ca <TM1638_ConfigDisplay>:
 *         - TM1638_OK: Operation was successful
 */
TM1638_Result_t
TM1638_ConfigDisplay(TM1638_Handler_t *Handler,
                     uint8_t Brightness, uint8_t DisplayState)
{
 80041ca:	b590      	push	{r4, r7, lr}
 80041cc:	b085      	sub	sp, #20
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
 80041d2:	0008      	movs	r0, r1
 80041d4:	0011      	movs	r1, r2
 80041d6:	1cfb      	adds	r3, r7, #3
 80041d8:	1c02      	adds	r2, r0, #0
 80041da:	701a      	strb	r2, [r3, #0]
 80041dc:	1cbb      	adds	r3, r7, #2
 80041de:	1c0a      	adds	r2, r1, #0
 80041e0:	701a      	strb	r2, [r3, #0]
  uint8_t Data = DisplayControlInstructionSet;
 80041e2:	210f      	movs	r1, #15
 80041e4:	187b      	adds	r3, r7, r1
 80041e6:	2280      	movs	r2, #128	; 0x80
 80041e8:	701a      	strb	r2, [r3, #0]
  Data |= Brightness & 0x07;
 80041ea:	1cfb      	adds	r3, r7, #3
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	b25b      	sxtb	r3, r3
 80041f0:	2207      	movs	r2, #7
 80041f2:	4013      	ands	r3, r2
 80041f4:	b25a      	sxtb	r2, r3
 80041f6:	187b      	adds	r3, r7, r1
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	b25b      	sxtb	r3, r3
 80041fc:	4313      	orrs	r3, r2
 80041fe:	b25b      	sxtb	r3, r3
 8004200:	b2da      	uxtb	r2, r3
 8004202:	187b      	adds	r3, r7, r1
 8004204:	701a      	strb	r2, [r3, #0]
  Data |= (DisplayState) ? (ShowTurnOn) : (ShowTurnOff);
 8004206:	1cbb      	adds	r3, r7, #2
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <TM1638_ConfigDisplay+0x48>
 800420e:	2308      	movs	r3, #8
 8004210:	e000      	b.n	8004214 <TM1638_ConfigDisplay+0x4a>
 8004212:	2300      	movs	r3, #0
 8004214:	210f      	movs	r1, #15
 8004216:	187a      	adds	r2, r7, r1
 8004218:	7812      	ldrb	r2, [r2, #0]
 800421a:	b252      	sxtb	r2, r2
 800421c:	4313      	orrs	r3, r2
 800421e:	b25b      	sxtb	r3, r3
 8004220:	b2da      	uxtb	r2, r3
 8004222:	000c      	movs	r4, r1
 8004224:	187b      	adds	r3, r7, r1
 8004226:	701a      	strb	r2, [r3, #0]

  TM1638_StartComunication(Handler);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	0018      	movs	r0, r3
 800422c:	f7ff fe5e 	bl	8003eec <TM1638_StartComunication>
  TM1638_WriteBytes(Handler, &Data, 1);
 8004230:	1939      	adds	r1, r7, r4
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	0018      	movs	r0, r3
 8004238:	f7ff fe70 	bl	8003f1c <TM1638_WriteBytes>
  TM1638_StopComunication(Handler);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	0018      	movs	r0, r3
 8004240:	f7ff fe60 	bl	8003f04 <TM1638_StopComunication>

  return TM1638_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	0018      	movs	r0, r3
 8004248:	46bd      	mov	sp, r7
 800424a:	b005      	add	sp, #20
 800424c:	bd90      	pop	{r4, r7, pc}

0800424e <TM1638_SetSingleDigit>:
 *         - TM1638_OK: Operation was successful
 */
TM1638_Result_t
TM1638_SetSingleDigit(TM1638_Handler_t *Handler,
                      uint8_t DigitData, uint8_t DigitPos)
{ 
 800424e:	b580      	push	{r7, lr}
 8004250:	b082      	sub	sp, #8
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
 8004256:	0008      	movs	r0, r1
 8004258:	0011      	movs	r1, r2
 800425a:	1cfb      	adds	r3, r7, #3
 800425c:	1c02      	adds	r2, r0, #0
 800425e:	701a      	strb	r2, [r3, #0]
 8004260:	1cbb      	adds	r3, r7, #2
 8004262:	1c0a      	adds	r2, r1, #0
 8004264:	701a      	strb	r2, [r3, #0]
  if (Handler->DisplayType == TM1638DisplayTypeComCathode)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2224      	movs	r2, #36	; 0x24
 800426a:	5c9b      	ldrb	r3, [r3, r2]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d107      	bne.n	8004280 <TM1638_SetSingleDigit+0x32>
    TM1638_SetMultipleDisplayRegister(Handler, &DigitData, DigitPos, 1);
 8004270:	1cbb      	adds	r3, r7, #2
 8004272:	781a      	ldrb	r2, [r3, #0]
 8004274:	1cf9      	adds	r1, r7, #3
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	2301      	movs	r3, #1
 800427a:	f7ff ff0f 	bl	800409c <TM1638_SetMultipleDisplayRegister>
 800427e:	e006      	b.n	800428e <TM1638_SetSingleDigit+0x40>
#if (TM1638_CONFIG_SUPPORT_COM_ANODE)
  else
    TM1638_SetMultipleDigit(Handler, &DigitData, DigitPos, 1);
 8004280:	1cbb      	adds	r3, r7, #2
 8004282:	781a      	ldrb	r2, [r3, #0]
 8004284:	1cf9      	adds	r1, r7, #3
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	2301      	movs	r3, #1
 800428a:	f000 f805 	bl	8004298 <TM1638_SetMultipleDigit>
#endif
  return TM1638_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	0018      	movs	r0, r3
 8004292:	46bd      	mov	sp, r7
 8004294:	b002      	add	sp, #8
 8004296:	bd80      	pop	{r7, pc}

08004298 <TM1638_SetMultipleDigit>:
 *         - TM1638_OK: Operation was successful
 */
TM1638_Result_t
TM1638_SetMultipleDigit(TM1638_Handler_t *Handler, const uint8_t *DigitData,
                        uint8_t StartAddr, uint8_t Count)
{
 8004298:	b590      	push	{r4, r7, lr}
 800429a:	b087      	sub	sp, #28
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	0019      	movs	r1, r3
 80042a4:	1dfb      	adds	r3, r7, #7
 80042a6:	701a      	strb	r2, [r3, #0]
 80042a8:	1dbb      	adds	r3, r7, #6
 80042aa:	1c0a      	adds	r2, r1, #0
 80042ac:	701a      	strb	r2, [r3, #0]
  uint8_t Shift = 0;
 80042ae:	2317      	movs	r3, #23
 80042b0:	18fb      	adds	r3, r7, r3
 80042b2:	2200      	movs	r2, #0
 80042b4:	701a      	strb	r2, [r3, #0]
  uint8_t DigitDataBuff = 0;
 80042b6:	2316      	movs	r3, #22
 80042b8:	18fb      	adds	r3, r7, r3
 80042ba:	2200      	movs	r2, #0
 80042bc:	701a      	strb	r2, [r3, #0]
  uint8_t i = 0, j = 0;
 80042be:	2315      	movs	r3, #21
 80042c0:	18fb      	adds	r3, r7, r3
 80042c2:	2200      	movs	r2, #0
 80042c4:	701a      	strb	r2, [r3, #0]
 80042c6:	2314      	movs	r3, #20
 80042c8:	18fb      	adds	r3, r7, r3
 80042ca:	2200      	movs	r2, #0
 80042cc:	701a      	strb	r2, [r3, #0]

  if (Handler->DisplayType == TM1638DisplayTypeComCathode)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2224      	movs	r2, #36	; 0x24
 80042d2:	5c9b      	ldrb	r3, [r3, r2]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d109      	bne.n	80042ec <TM1638_SetMultipleDigit+0x54>
    TM1638_SetMultipleDisplayRegister(Handler, DigitData, StartAddr, Count);
 80042d8:	1dbb      	adds	r3, r7, #6
 80042da:	781c      	ldrb	r4, [r3, #0]
 80042dc:	1dfb      	adds	r3, r7, #7
 80042de:	781a      	ldrb	r2, [r3, #0]
 80042e0:	68b9      	ldr	r1, [r7, #8]
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	0023      	movs	r3, r4
 80042e6:	f7ff fed9 	bl	800409c <TM1638_SetMultipleDisplayRegister>
 80042ea:	e0ab      	b.n	8004444 <TM1638_SetMultipleDigit+0x1ac>
#if (TM1638_CONFIG_SUPPORT_COM_ANODE)
  else
  {
    for (j = 0; j < Count; j++)
 80042ec:	2314      	movs	r3, #20
 80042ee:	18fb      	adds	r3, r7, r3
 80042f0:	2200      	movs	r2, #0
 80042f2:	701a      	strb	r2, [r3, #0]
 80042f4:	e096      	b.n	8004424 <TM1638_SetMultipleDigit+0x18c>
    {
      DigitDataBuff = DigitData[j];
 80042f6:	2114      	movs	r1, #20
 80042f8:	187b      	adds	r3, r7, r1
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	18d2      	adds	r2, r2, r3
 8004300:	2316      	movs	r3, #22
 8004302:	18fb      	adds	r3, r7, r3
 8004304:	7812      	ldrb	r2, [r2, #0]
 8004306:	701a      	strb	r2, [r3, #0]

      if ((j + StartAddr) >= 0 && (j + StartAddr) <= 7)
 8004308:	187b      	adds	r3, r7, r1
 800430a:	781a      	ldrb	r2, [r3, #0]
 800430c:	1dfb      	adds	r3, r7, #7
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	18d3      	adds	r3, r2, r3
 8004312:	2b07      	cmp	r3, #7
 8004314:	dc0c      	bgt.n	8004330 <TM1638_SetMultipleDigit+0x98>
      {
        Shift = j + StartAddr;
 8004316:	2317      	movs	r3, #23
 8004318:	18fb      	adds	r3, r7, r3
 800431a:	1879      	adds	r1, r7, r1
 800431c:	1dfa      	adds	r2, r7, #7
 800431e:	7809      	ldrb	r1, [r1, #0]
 8004320:	7812      	ldrb	r2, [r2, #0]
 8004322:	188a      	adds	r2, r1, r2
 8004324:	701a      	strb	r2, [r3, #0]
        i = 0;
 8004326:	2315      	movs	r3, #21
 8004328:	18fb      	adds	r3, r7, r3
 800432a:	2200      	movs	r2, #0
 800432c:	701a      	strb	r2, [r3, #0]
 800432e:	e06e      	b.n	800440e <TM1638_SetMultipleDigit+0x176>
      }
      else if ((j + StartAddr) == 8 || (j + StartAddr) == 9)
 8004330:	2114      	movs	r1, #20
 8004332:	187b      	adds	r3, r7, r1
 8004334:	781a      	ldrb	r2, [r3, #0]
 8004336:	1dfb      	adds	r3, r7, #7
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	18d3      	adds	r3, r2, r3
 800433c:	2b08      	cmp	r3, #8
 800433e:	d006      	beq.n	800434e <TM1638_SetMultipleDigit+0xb6>
 8004340:	187b      	adds	r3, r7, r1
 8004342:	781a      	ldrb	r2, [r3, #0]
 8004344:	1dfb      	adds	r3, r7, #7
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	18d3      	adds	r3, r2, r3
 800434a:	2b09      	cmp	r3, #9
 800434c:	d10f      	bne.n	800436e <TM1638_SetMultipleDigit+0xd6>
      {
        Shift = (j + StartAddr) - 8;
 800434e:	2314      	movs	r3, #20
 8004350:	18fa      	adds	r2, r7, r3
 8004352:	1dfb      	adds	r3, r7, #7
 8004354:	7812      	ldrb	r2, [r2, #0]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	18d3      	adds	r3, r2, r3
 800435a:	b2da      	uxtb	r2, r3
 800435c:	2317      	movs	r3, #23
 800435e:	18fb      	adds	r3, r7, r3
 8004360:	3a08      	subs	r2, #8
 8004362:	701a      	strb	r2, [r3, #0]
        i = 1;
 8004364:	2315      	movs	r3, #21
 8004366:	18fb      	adds	r3, r7, r3
 8004368:	2201      	movs	r2, #1
 800436a:	701a      	strb	r2, [r3, #0]
 800436c:	e003      	b.n	8004376 <TM1638_SetMultipleDigit+0xde>
      }
      else
      {
        i = 16;
 800436e:	2315      	movs	r3, #21
 8004370:	18fb      	adds	r3, r7, r3
 8004372:	2210      	movs	r2, #16
 8004374:	701a      	strb	r2, [r3, #0]
      }

      for (; i < 16; i += 2, DigitDataBuff >>= 1)
 8004376:	e04a      	b.n	800440e <TM1638_SetMultipleDigit+0x176>
      {
        if (DigitDataBuff & 0x01)
 8004378:	2316      	movs	r3, #22
 800437a:	18fb      	adds	r3, r7, r3
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	2201      	movs	r2, #1
 8004380:	4013      	ands	r3, r2
 8004382:	d01b      	beq.n	80043bc <TM1638_SetMultipleDigit+0x124>
          Handler->DisplayRegister[i] |= (1 << Shift);
 8004384:	2015      	movs	r0, #21
 8004386:	183b      	adds	r3, r7, r0
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	2125      	movs	r1, #37	; 0x25
 800438e:	18d3      	adds	r3, r2, r3
 8004390:	185b      	adds	r3, r3, r1
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	b25a      	sxtb	r2, r3
 8004396:	2317      	movs	r3, #23
 8004398:	18fb      	adds	r3, r7, r3
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	2101      	movs	r1, #1
 800439e:	4099      	lsls	r1, r3
 80043a0:	000b      	movs	r3, r1
 80043a2:	b25b      	sxtb	r3, r3
 80043a4:	4313      	orrs	r3, r2
 80043a6:	b25a      	sxtb	r2, r3
 80043a8:	183b      	adds	r3, r7, r0
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	b2d0      	uxtb	r0, r2
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	2125      	movs	r1, #37	; 0x25
 80043b2:	18d3      	adds	r3, r2, r3
 80043b4:	185b      	adds	r3, r3, r1
 80043b6:	1c02      	adds	r2, r0, #0
 80043b8:	701a      	strb	r2, [r3, #0]
 80043ba:	e01c      	b.n	80043f6 <TM1638_SetMultipleDigit+0x15e>
        else
          Handler->DisplayRegister[i] &= ~(1 << Shift);
 80043bc:	2015      	movs	r0, #21
 80043be:	183b      	adds	r3, r7, r0
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	2125      	movs	r1, #37	; 0x25
 80043c6:	18d3      	adds	r3, r2, r3
 80043c8:	185b      	adds	r3, r3, r1
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	b25b      	sxtb	r3, r3
 80043ce:	2217      	movs	r2, #23
 80043d0:	18ba      	adds	r2, r7, r2
 80043d2:	7812      	ldrb	r2, [r2, #0]
 80043d4:	2101      	movs	r1, #1
 80043d6:	4091      	lsls	r1, r2
 80043d8:	000a      	movs	r2, r1
 80043da:	b252      	sxtb	r2, r2
 80043dc:	43d2      	mvns	r2, r2
 80043de:	b252      	sxtb	r2, r2
 80043e0:	4013      	ands	r3, r2
 80043e2:	b25a      	sxtb	r2, r3
 80043e4:	183b      	adds	r3, r7, r0
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	b2d0      	uxtb	r0, r2
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	2125      	movs	r1, #37	; 0x25
 80043ee:	18d3      	adds	r3, r2, r3
 80043f0:	185b      	adds	r3, r3, r1
 80043f2:	1c02      	adds	r2, r0, #0
 80043f4:	701a      	strb	r2, [r3, #0]
      for (; i < 16; i += 2, DigitDataBuff >>= 1)
 80043f6:	2215      	movs	r2, #21
 80043f8:	18bb      	adds	r3, r7, r2
 80043fa:	18ba      	adds	r2, r7, r2
 80043fc:	7812      	ldrb	r2, [r2, #0]
 80043fe:	3202      	adds	r2, #2
 8004400:	701a      	strb	r2, [r3, #0]
 8004402:	2216      	movs	r2, #22
 8004404:	18bb      	adds	r3, r7, r2
 8004406:	18ba      	adds	r2, r7, r2
 8004408:	7812      	ldrb	r2, [r2, #0]
 800440a:	0852      	lsrs	r2, r2, #1
 800440c:	701a      	strb	r2, [r3, #0]
 800440e:	2315      	movs	r3, #21
 8004410:	18fb      	adds	r3, r7, r3
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	2b0f      	cmp	r3, #15
 8004416:	d9af      	bls.n	8004378 <TM1638_SetMultipleDigit+0xe0>
    for (j = 0; j < Count; j++)
 8004418:	2114      	movs	r1, #20
 800441a:	187b      	adds	r3, r7, r1
 800441c:	781a      	ldrb	r2, [r3, #0]
 800441e:	187b      	adds	r3, r7, r1
 8004420:	3201      	adds	r2, #1
 8004422:	701a      	strb	r2, [r3, #0]
 8004424:	2314      	movs	r3, #20
 8004426:	18fa      	adds	r2, r7, r3
 8004428:	1dbb      	adds	r3, r7, #6
 800442a:	7812      	ldrb	r2, [r2, #0]
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	429a      	cmp	r2, r3
 8004430:	d200      	bcs.n	8004434 <TM1638_SetMultipleDigit+0x19c>
 8004432:	e760      	b.n	80042f6 <TM1638_SetMultipleDigit+0x5e>
      }
    }
    TM1638_SetMultipleDisplayRegister(Handler, Handler->DisplayRegister, 0, 16);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	3325      	adds	r3, #37	; 0x25
 8004438:	0019      	movs	r1, r3
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	2310      	movs	r3, #16
 800443e:	2200      	movs	r2, #0
 8004440:	f7ff fe2c 	bl	800409c <TM1638_SetMultipleDisplayRegister>
  }
#endif

  return TM1638_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	0018      	movs	r0, r3
 8004448:	46bd      	mov	sp, r7
 800444a:	b007      	add	sp, #28
 800444c:	bd90      	pop	{r4, r7, pc}
	...

08004450 <TM1638_SetSingleDigit_HEX>:
 *         - TM1638_OK: Operation was successful
 */
TM1638_Result_t
TM1638_SetSingleDigit_HEX(TM1638_Handler_t *Handler,
                          uint8_t DigitData, uint8_t DigitPos)
{
 8004450:	b590      	push	{r4, r7, lr}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	0008      	movs	r0, r1
 800445a:	0011      	movs	r1, r2
 800445c:	1cfb      	adds	r3, r7, #3
 800445e:	1c02      	adds	r2, r0, #0
 8004460:	701a      	strb	r2, [r3, #0]
 8004462:	1cbb      	adds	r3, r7, #2
 8004464:	1c0a      	adds	r2, r1, #0
 8004466:	701a      	strb	r2, [r3, #0]
  uint8_t DigitDataHEX = 0;
 8004468:	200f      	movs	r0, #15
 800446a:	183b      	adds	r3, r7, r0
 800446c:	2200      	movs	r2, #0
 800446e:	701a      	strb	r2, [r3, #0]
  uint8_t DecimalPoint = DigitData & 0x80;
 8004470:	240e      	movs	r4, #14
 8004472:	193b      	adds	r3, r7, r4
 8004474:	1cfa      	adds	r2, r7, #3
 8004476:	7812      	ldrb	r2, [r2, #0]
 8004478:	217f      	movs	r1, #127	; 0x7f
 800447a:	438a      	bics	r2, r1
 800447c:	701a      	strb	r2, [r3, #0]

  DigitData &= 0x7F;
 800447e:	1cfb      	adds	r3, r7, #3
 8004480:	1cfa      	adds	r2, r7, #3
 8004482:	7812      	ldrb	r2, [r2, #0]
 8004484:	217f      	movs	r1, #127	; 0x7f
 8004486:	400a      	ands	r2, r1
 8004488:	701a      	strb	r2, [r3, #0]

  if (DigitData <= 15)
 800448a:	1cfb      	adds	r3, r7, #3
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	2b0f      	cmp	r3, #15
 8004490:	d809      	bhi.n	80044a6 <TM1638_SetSingleDigit_HEX+0x56>
  {
    DigitDataHEX = HexTo7Seg[DigitData] | DecimalPoint;
 8004492:	1cfb      	adds	r3, r7, #3
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	4a2d      	ldr	r2, [pc, #180]	; (800454c <TM1638_SetSingleDigit_HEX+0xfc>)
 8004498:	5cd1      	ldrb	r1, [r2, r3]
 800449a:	183b      	adds	r3, r7, r0
 800449c:	193a      	adds	r2, r7, r4
 800449e:	7812      	ldrb	r2, [r2, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	701a      	strb	r2, [r3, #0]
 80044a4:	e044      	b.n	8004530 <TM1638_SetSingleDigit_HEX+0xe0>
  }
  else
  {
    switch (DigitData)
 80044a6:	1cfb      	adds	r3, r7, #3
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	3b41      	subs	r3, #65	; 0x41
 80044ac:	2b25      	cmp	r3, #37	; 0x25
 80044ae:	d83a      	bhi.n	8004526 <TM1638_SetSingleDigit_HEX+0xd6>
 80044b0:	009a      	lsls	r2, r3, #2
 80044b2:	4b27      	ldr	r3, [pc, #156]	; (8004550 <TM1638_SetSingleDigit_HEX+0x100>)
 80044b4:	18d3      	adds	r3, r2, r3
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	469f      	mov	pc, r3
    {
    case 'A':
    case 'a':
      DigitDataHEX = HexTo7Seg[0x0A] | DecimalPoint;
 80044ba:	2177      	movs	r1, #119	; 0x77
 80044bc:	230f      	movs	r3, #15
 80044be:	18fb      	adds	r3, r7, r3
 80044c0:	220e      	movs	r2, #14
 80044c2:	18ba      	adds	r2, r7, r2
 80044c4:	7812      	ldrb	r2, [r2, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	701a      	strb	r2, [r3, #0]
      break;
 80044ca:	e031      	b.n	8004530 <TM1638_SetSingleDigit_HEX+0xe0>

    case 'B':
    case 'b':
      DigitDataHEX = HexTo7Seg[0x0B] | DecimalPoint;
 80044cc:	217c      	movs	r1, #124	; 0x7c
 80044ce:	230f      	movs	r3, #15
 80044d0:	18fb      	adds	r3, r7, r3
 80044d2:	220e      	movs	r2, #14
 80044d4:	18ba      	adds	r2, r7, r2
 80044d6:	7812      	ldrb	r2, [r2, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	701a      	strb	r2, [r3, #0]
      break;
 80044dc:	e028      	b.n	8004530 <TM1638_SetSingleDigit_HEX+0xe0>

    case 'C':
    case 'c':
      DigitDataHEX = HexTo7Seg[0x0C] | DecimalPoint;
 80044de:	2139      	movs	r1, #57	; 0x39
 80044e0:	230f      	movs	r3, #15
 80044e2:	18fb      	adds	r3, r7, r3
 80044e4:	220e      	movs	r2, #14
 80044e6:	18ba      	adds	r2, r7, r2
 80044e8:	7812      	ldrb	r2, [r2, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	701a      	strb	r2, [r3, #0]
      break;
 80044ee:	e01f      	b.n	8004530 <TM1638_SetSingleDigit_HEX+0xe0>

    case 'D':
    case 'd':
      DigitDataHEX = HexTo7Seg[0x0D] | DecimalPoint;
 80044f0:	215e      	movs	r1, #94	; 0x5e
 80044f2:	230f      	movs	r3, #15
 80044f4:	18fb      	adds	r3, r7, r3
 80044f6:	220e      	movs	r2, #14
 80044f8:	18ba      	adds	r2, r7, r2
 80044fa:	7812      	ldrb	r2, [r2, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	701a      	strb	r2, [r3, #0]
      break;
 8004500:	e016      	b.n	8004530 <TM1638_SetSingleDigit_HEX+0xe0>

    case 'E':
    case 'e':
      DigitDataHEX = HexTo7Seg[0x0E] | DecimalPoint;
 8004502:	2179      	movs	r1, #121	; 0x79
 8004504:	230f      	movs	r3, #15
 8004506:	18fb      	adds	r3, r7, r3
 8004508:	220e      	movs	r2, #14
 800450a:	18ba      	adds	r2, r7, r2
 800450c:	7812      	ldrb	r2, [r2, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	701a      	strb	r2, [r3, #0]
      break;
 8004512:	e00d      	b.n	8004530 <TM1638_SetSingleDigit_HEX+0xe0>

    case 'F':
    case 'f':
      DigitDataHEX = HexTo7Seg[0x0F] | DecimalPoint;
 8004514:	2171      	movs	r1, #113	; 0x71
 8004516:	230f      	movs	r3, #15
 8004518:	18fb      	adds	r3, r7, r3
 800451a:	220e      	movs	r2, #14
 800451c:	18ba      	adds	r2, r7, r2
 800451e:	7812      	ldrb	r2, [r2, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	701a      	strb	r2, [r3, #0]
      break;
 8004524:	e004      	b.n	8004530 <TM1638_SetSingleDigit_HEX+0xe0>

    default:
      DigitDataHEX = 0;
 8004526:	230f      	movs	r3, #15
 8004528:	18fb      	adds	r3, r7, r3
 800452a:	2200      	movs	r2, #0
 800452c:	701a      	strb	r2, [r3, #0]
      break;
 800452e:	46c0      	nop			; (mov r8, r8)
    }
  }

  return TM1638_SetSingleDigit(Handler, DigitDataHEX, DigitPos);
 8004530:	1cbb      	adds	r3, r7, #2
 8004532:	781a      	ldrb	r2, [r3, #0]
 8004534:	230f      	movs	r3, #15
 8004536:	18fb      	adds	r3, r7, r3
 8004538:	7819      	ldrb	r1, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	0018      	movs	r0, r3
 800453e:	f7ff fe86 	bl	800424e <TM1638_SetSingleDigit>
 8004542:	0003      	movs	r3, r0
}
 8004544:	0018      	movs	r0, r3
 8004546:	46bd      	mov	sp, r7
 8004548:	b005      	add	sp, #20
 800454a:	bd90      	pop	{r4, r7, pc}
 800454c:	08005650 	.word	0x08005650
 8004550:	08005678 	.word	0x08005678

08004554 <TM1638_ScanKeys>:
 * @retval TM1638_Result_t
 *         - TM1638_OK: Operation was successful
 */
TM1638_Result_t
TM1638_ScanKeys(TM1638_Handler_t *Handler, uint32_t *Keys)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint8_t KeyRegs[4];
  uint32_t KeysBuff = 0;
 800455e:	2300      	movs	r3, #0
 8004560:	617b      	str	r3, [r7, #20]
  uint8_t Kn = 0x01;
 8004562:	2313      	movs	r3, #19
 8004564:	18fb      	adds	r3, r7, r3
 8004566:	2201      	movs	r2, #1
 8004568:	701a      	strb	r2, [r3, #0]

  TM1638_ScanKeyRegs(Handler, KeyRegs);
 800456a:	230c      	movs	r3, #12
 800456c:	18fa      	adds	r2, r7, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	0011      	movs	r1, r2
 8004572:	0018      	movs	r0, r3
 8004574:	f7ff fdd0 	bl	8004118 <TM1638_ScanKeyRegs>

  for (uint8_t i = 0; i < 3; i++)
 8004578:	2312      	movs	r3, #18
 800457a:	18fb      	adds	r3, r7, r3
 800457c:	2200      	movs	r2, #0
 800457e:	701a      	strb	r2, [r3, #0]
 8004580:	e048      	b.n	8004614 <TM1638_ScanKeys+0xc0>
  {
    for (int8_t i = 3; i >= 0; i--)
 8004582:	2311      	movs	r3, #17
 8004584:	18fb      	adds	r3, r7, r3
 8004586:	2203      	movs	r2, #3
 8004588:	701a      	strb	r2, [r3, #0]
 800458a:	e032      	b.n	80045f2 <TM1638_ScanKeys+0x9e>
    {
      KeysBuff <<= 1;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	005b      	lsls	r3, r3, #1
 8004590:	617b      	str	r3, [r7, #20]

      if (KeyRegs[i] & (Kn << 4))
 8004592:	2311      	movs	r3, #17
 8004594:	18fb      	adds	r3, r7, r3
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	b25b      	sxtb	r3, r3
 800459a:	220c      	movs	r2, #12
 800459c:	18ba      	adds	r2, r7, r2
 800459e:	5cd3      	ldrb	r3, [r2, r3]
 80045a0:	001a      	movs	r2, r3
 80045a2:	2313      	movs	r3, #19
 80045a4:	18fb      	adds	r3, r7, r3
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	4013      	ands	r3, r2
 80045ac:	d003      	beq.n	80045b6 <TM1638_ScanKeys+0x62>
        KeysBuff |= 1;
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	2201      	movs	r2, #1
 80045b2:	4313      	orrs	r3, r2
 80045b4:	617b      	str	r3, [r7, #20]

      KeysBuff <<= 1;
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	617b      	str	r3, [r7, #20]

      if (KeyRegs[i] & Kn)
 80045bc:	2311      	movs	r3, #17
 80045be:	18fb      	adds	r3, r7, r3
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	b25b      	sxtb	r3, r3
 80045c4:	220c      	movs	r2, #12
 80045c6:	18ba      	adds	r2, r7, r2
 80045c8:	5cd3      	ldrb	r3, [r2, r3]
 80045ca:	2213      	movs	r2, #19
 80045cc:	18ba      	adds	r2, r7, r2
 80045ce:	7812      	ldrb	r2, [r2, #0]
 80045d0:	4013      	ands	r3, r2
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <TM1638_ScanKeys+0x8c>
        KeysBuff |= 1;
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	2201      	movs	r2, #1
 80045dc:	4313      	orrs	r3, r2
 80045de:	617b      	str	r3, [r7, #20]
    for (int8_t i = 3; i >= 0; i--)
 80045e0:	2111      	movs	r1, #17
 80045e2:	187b      	adds	r3, r7, r1
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	b25b      	sxtb	r3, r3
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	3b01      	subs	r3, #1
 80045ec:	b2da      	uxtb	r2, r3
 80045ee:	187b      	adds	r3, r7, r1
 80045f0:	701a      	strb	r2, [r3, #0]
 80045f2:	2311      	movs	r3, #17
 80045f4:	18fb      	adds	r3, r7, r3
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	2b7f      	cmp	r3, #127	; 0x7f
 80045fa:	d9c7      	bls.n	800458c <TM1638_ScanKeys+0x38>
    }

    Kn <<= 1;
 80045fc:	2313      	movs	r3, #19
 80045fe:	18fa      	adds	r2, r7, r3
 8004600:	18fb      	adds	r3, r7, r3
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	18db      	adds	r3, r3, r3
 8004606:	7013      	strb	r3, [r2, #0]
  for (uint8_t i = 0; i < 3; i++)
 8004608:	2112      	movs	r1, #18
 800460a:	187b      	adds	r3, r7, r1
 800460c:	781a      	ldrb	r2, [r3, #0]
 800460e:	187b      	adds	r3, r7, r1
 8004610:	3201      	adds	r2, #1
 8004612:	701a      	strb	r2, [r3, #0]
 8004614:	2312      	movs	r3, #18
 8004616:	18fb      	adds	r3, r7, r3
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	2b02      	cmp	r3, #2
 800461c:	d9b1      	bls.n	8004582 <TM1638_ScanKeys+0x2e>
  }

  *Keys = KeysBuff;
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	601a      	str	r2, [r3, #0]

  return TM1638_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	0018      	movs	r0, r3
 8004628:	46bd      	mov	sp, r7
 800462a:	b006      	add	sp, #24
 800462c:	bd80      	pop	{r7, pc}

0800462e <TM1638_SetGPIO_OUT>:
 ==================================================================================
 */

static void
TM1638_SetGPIO_OUT(GPIO_TypeDef *GPIOx, uint32_t GPIO_Pin)
{
 800462e:	b590      	push	{r4, r7, lr}
 8004630:	b089      	sub	sp, #36	; 0x24
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
 8004636:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004638:	240c      	movs	r4, #12
 800463a:	193b      	adds	r3, r7, r4
 800463c:	0018      	movs	r0, r3
 800463e:	2314      	movs	r3, #20
 8004640:	001a      	movs	r2, r3
 8004642:	2100      	movs	r1, #0
 8004644:	f000 f93d 	bl	80048c2 <memset>
  GPIO_InitStruct.Pin = GPIO_Pin;
 8004648:	0021      	movs	r1, r4
 800464a:	187b      	adds	r3, r7, r1
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004650:	187b      	adds	r3, r7, r1
 8004652:	2201      	movs	r2, #1
 8004654:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004656:	187b      	adds	r3, r7, r1
 8004658:	2200      	movs	r2, #0
 800465a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800465c:	187b      	adds	r3, r7, r1
 800465e:	2200      	movs	r2, #0
 8004660:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8004662:	187a      	adds	r2, r7, r1
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	0011      	movs	r1, r2
 8004668:	0018      	movs	r0, r3
 800466a:	f7fc fd7f 	bl	800116c <HAL_GPIO_Init>
}
 800466e:	46c0      	nop			; (mov r8, r8)
 8004670:	46bd      	mov	sp, r7
 8004672:	b009      	add	sp, #36	; 0x24
 8004674:	bd90      	pop	{r4, r7, pc}

08004676 <TM1638_SetGPIO_IN_PU>:
									
static void
TM1638_SetGPIO_IN_PU(GPIO_TypeDef *GPIOx, uint32_t GPIO_Pin)
{
 8004676:	b590      	push	{r4, r7, lr}
 8004678:	b089      	sub	sp, #36	; 0x24
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
 800467e:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004680:	240c      	movs	r4, #12
 8004682:	193b      	adds	r3, r7, r4
 8004684:	0018      	movs	r0, r3
 8004686:	2314      	movs	r3, #20
 8004688:	001a      	movs	r2, r3
 800468a:	2100      	movs	r1, #0
 800468c:	f000 f919 	bl	80048c2 <memset>
  GPIO_InitStruct.Pin = GPIO_Pin;
 8004690:	0021      	movs	r1, r4
 8004692:	187b      	adds	r3, r7, r1
 8004694:	683a      	ldr	r2, [r7, #0]
 8004696:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004698:	187b      	adds	r3, r7, r1
 800469a:	2200      	movs	r2, #0
 800469c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800469e:	187b      	adds	r3, r7, r1
 80046a0:	2201      	movs	r2, #1
 80046a2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046a4:	187b      	adds	r3, r7, r1
 80046a6:	2200      	movs	r2, #0
 80046a8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80046aa:	187a      	adds	r2, r7, r1
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	0011      	movs	r1, r2
 80046b0:	0018      	movs	r0, r3
 80046b2:	f7fc fd5b 	bl	800116c <HAL_GPIO_Init>
}
 80046b6:	46c0      	nop			; (mov r8, r8)
 80046b8:	46bd      	mov	sp, r7
 80046ba:	b009      	add	sp, #36	; 0x24
 80046bc:	bd90      	pop	{r4, r7, pc}
	...

080046c0 <TM1638_PlatformInit>:


static void
TM1638_PlatformInit(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
  TM1638_SetGPIO_OUT(TM1638_CLK_GPIO, TM1638_CLK_PIN);
 80046c4:	4b08      	ldr	r3, [pc, #32]	; (80046e8 <TM1638_PlatformInit+0x28>)
 80046c6:	2120      	movs	r1, #32
 80046c8:	0018      	movs	r0, r3
 80046ca:	f7ff ffb0 	bl	800462e <TM1638_SetGPIO_OUT>
  TM1638_SetGPIO_OUT(TM1638_STB_GPIO, TM1638_STB_PIN);
 80046ce:	4b06      	ldr	r3, [pc, #24]	; (80046e8 <TM1638_PlatformInit+0x28>)
 80046d0:	2140      	movs	r1, #64	; 0x40
 80046d2:	0018      	movs	r0, r3
 80046d4:	f7ff ffab 	bl	800462e <TM1638_SetGPIO_OUT>
  TM1638_SetGPIO_OUT(TM1638_DIO_GPIO, TM1638_DIO_PIN);
 80046d8:	4b03      	ldr	r3, [pc, #12]	; (80046e8 <TM1638_PlatformInit+0x28>)
 80046da:	2110      	movs	r1, #16
 80046dc:	0018      	movs	r0, r3
 80046de:	f7ff ffa6 	bl	800462e <TM1638_SetGPIO_OUT>
}
 80046e2:	46c0      	nop			; (mov r8, r8)
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	48000400 	.word	0x48000400

080046ec <TM1638_PlatformDeInit>:

static void
TM1638_PlatformDeInit(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
}
 80046f0:	46c0      	nop			; (mov r8, r8)
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
	...

080046f8 <TM1638_DioConfigOut>:

static void
TM1638_DioConfigOut(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0
  TM1638_SetGPIO_OUT(TM1638_DIO_GPIO, TM1638_DIO_PIN);
 80046fc:	4b03      	ldr	r3, [pc, #12]	; (800470c <TM1638_DioConfigOut+0x14>)
 80046fe:	2110      	movs	r1, #16
 8004700:	0018      	movs	r0, r3
 8004702:	f7ff ff94 	bl	800462e <TM1638_SetGPIO_OUT>
}
 8004706:	46c0      	nop			; (mov r8, r8)
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	48000400 	.word	0x48000400

08004710 <TM1638_DioConfigIn>:

static void
TM1638_DioConfigIn(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  TM1638_SetGPIO_IN_PU(TM1638_DIO_GPIO, TM1638_DIO_PIN);
 8004714:	4b03      	ldr	r3, [pc, #12]	; (8004724 <TM1638_DioConfigIn+0x14>)
 8004716:	2110      	movs	r1, #16
 8004718:	0018      	movs	r0, r3
 800471a:	f7ff ffac 	bl	8004676 <TM1638_SetGPIO_IN_PU>
}
 800471e:	46c0      	nop			; (mov r8, r8)
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	48000400 	.word	0x48000400

08004728 <TM1638_DioWrite>:

static void
TM1638_DioWrite(uint8_t Level)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	0002      	movs	r2, r0
 8004730:	1dfb      	adds	r3, r7, #7
 8004732:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(TM1638_DIO_GPIO, TM1638_DIO_PIN, Level);
 8004734:	1dfb      	adds	r3, r7, #7
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	4804      	ldr	r0, [pc, #16]	; (800474c <TM1638_DioWrite+0x24>)
 800473a:	001a      	movs	r2, r3
 800473c:	2110      	movs	r1, #16
 800473e:	f7fc fea2 	bl	8001486 <HAL_GPIO_WritePin>
}
 8004742:	46c0      	nop			; (mov r8, r8)
 8004744:	46bd      	mov	sp, r7
 8004746:	b002      	add	sp, #8
 8004748:	bd80      	pop	{r7, pc}
 800474a:	46c0      	nop			; (mov r8, r8)
 800474c:	48000400 	.word	0x48000400

08004750 <TM1638_DioRead>:

static uint8_t
TM1638_DioRead(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(TM1638_DIO_GPIO, TM1638_DIO_PIN);
 8004754:	4b04      	ldr	r3, [pc, #16]	; (8004768 <TM1638_DioRead+0x18>)
 8004756:	2110      	movs	r1, #16
 8004758:	0018      	movs	r0, r3
 800475a:	f7fc fe77 	bl	800144c <HAL_GPIO_ReadPin>
 800475e:	0003      	movs	r3, r0
}
 8004760:	0018      	movs	r0, r3
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	46c0      	nop			; (mov r8, r8)
 8004768:	48000400 	.word	0x48000400

0800476c <TM1638_ClkWrite>:

static void
TM1638_ClkWrite(uint8_t Level)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	0002      	movs	r2, r0
 8004774:	1dfb      	adds	r3, r7, #7
 8004776:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(TM1638_CLK_GPIO, TM1638_CLK_PIN, Level);
 8004778:	1dfb      	adds	r3, r7, #7
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	4804      	ldr	r0, [pc, #16]	; (8004790 <TM1638_ClkWrite+0x24>)
 800477e:	001a      	movs	r2, r3
 8004780:	2120      	movs	r1, #32
 8004782:	f7fc fe80 	bl	8001486 <HAL_GPIO_WritePin>
}
 8004786:	46c0      	nop			; (mov r8, r8)
 8004788:	46bd      	mov	sp, r7
 800478a:	b002      	add	sp, #8
 800478c:	bd80      	pop	{r7, pc}
 800478e:	46c0      	nop			; (mov r8, r8)
 8004790:	48000400 	.word	0x48000400

08004794 <TM1638_StbWrite>:

static void
TM1638_StbWrite(uint8_t Level)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	0002      	movs	r2, r0
 800479c:	1dfb      	adds	r3, r7, #7
 800479e:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(TM1638_STB_GPIO, TM1638_STB_PIN, Level);
 80047a0:	1dfb      	adds	r3, r7, #7
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	4804      	ldr	r0, [pc, #16]	; (80047b8 <TM1638_StbWrite+0x24>)
 80047a6:	001a      	movs	r2, r3
 80047a8:	2140      	movs	r1, #64	; 0x40
 80047aa:	f7fc fe6c 	bl	8001486 <HAL_GPIO_WritePin>
}
 80047ae:	46c0      	nop			; (mov r8, r8)
 80047b0:	46bd      	mov	sp, r7
 80047b2:	b002      	add	sp, #8
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	46c0      	nop			; (mov r8, r8)
 80047b8:	48000400 	.word	0x48000400

080047bc <TM1638_DelayUs>:

static void
TM1638_DelayUs(uint8_t Delay)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	0002      	movs	r2, r0
 80047c4:	1dfb      	adds	r3, r7, #7
 80047c6:	701a      	strb	r2, [r3, #0]
  // TODO: Implement a proper delay function. This one is not accurate.
  for (uint32_t DelayCounter = 0; DelayCounter < 100 * Delay; DelayCounter++)
 80047c8:	2300      	movs	r3, #0
 80047ca:	60fb      	str	r3, [r7, #12]
 80047cc:	e002      	b.n	80047d4 <TM1638_DelayUs+0x18>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	3301      	adds	r3, #1
 80047d2:	60fb      	str	r3, [r7, #12]
 80047d4:	1dfb      	adds	r3, r7, #7
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	2264      	movs	r2, #100	; 0x64
 80047da:	4353      	muls	r3, r2
 80047dc:	001a      	movs	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d3f4      	bcc.n	80047ce <TM1638_DelayUs+0x12>
    DelayCounter = DelayCounter;
}
 80047e4:	46c0      	nop			; (mov r8, r8)
 80047e6:	46c0      	nop			; (mov r8, r8)
 80047e8:	46bd      	mov	sp, r7
 80047ea:	b004      	add	sp, #16
 80047ec:	bd80      	pop	{r7, pc}
	...

080047f0 <TM1638_Platform_Init>:
 * @param  Handler: Pointer to handler
 * @retval None
 */
void
TM1638_Platform_Init(TM1638_Handler_t *Handler)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  Handler->PlatformInit = TM1638_PlatformInit;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a0f      	ldr	r2, [pc, #60]	; (8004838 <TM1638_Platform_Init+0x48>)
 80047fc:	601a      	str	r2, [r3, #0]
  Handler->PlatformDeInit = TM1638_PlatformDeInit;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a0e      	ldr	r2, [pc, #56]	; (800483c <TM1638_Platform_Init+0x4c>)
 8004802:	605a      	str	r2, [r3, #4]
  Handler->DioConfigOut = TM1638_DioConfigOut;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a0e      	ldr	r2, [pc, #56]	; (8004840 <TM1638_Platform_Init+0x50>)
 8004808:	609a      	str	r2, [r3, #8]
  Handler->DioConfigIn = TM1638_DioConfigIn;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a0d      	ldr	r2, [pc, #52]	; (8004844 <TM1638_Platform_Init+0x54>)
 800480e:	60da      	str	r2, [r3, #12]
  Handler->DioWrite = TM1638_DioWrite;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a0d      	ldr	r2, [pc, #52]	; (8004848 <TM1638_Platform_Init+0x58>)
 8004814:	611a      	str	r2, [r3, #16]
  Handler->DioRead = TM1638_DioRead;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a0c      	ldr	r2, [pc, #48]	; (800484c <TM1638_Platform_Init+0x5c>)
 800481a:	615a      	str	r2, [r3, #20]
  Handler->ClkWrite = TM1638_ClkWrite;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a0c      	ldr	r2, [pc, #48]	; (8004850 <TM1638_Platform_Init+0x60>)
 8004820:	619a      	str	r2, [r3, #24]
  Handler->StbWrite = TM1638_StbWrite;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a0b      	ldr	r2, [pc, #44]	; (8004854 <TM1638_Platform_Init+0x64>)
 8004826:	61da      	str	r2, [r3, #28]
  Handler->DelayUs = TM1638_DelayUs;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a0b      	ldr	r2, [pc, #44]	; (8004858 <TM1638_Platform_Init+0x68>)
 800482c:	621a      	str	r2, [r3, #32]
}
 800482e:	46c0      	nop			; (mov r8, r8)
 8004830:	46bd      	mov	sp, r7
 8004832:	b002      	add	sp, #8
 8004834:	bd80      	pop	{r7, pc}
 8004836:	46c0      	nop			; (mov r8, r8)
 8004838:	080046c1 	.word	0x080046c1
 800483c:	080046ed 	.word	0x080046ed
 8004840:	080046f9 	.word	0x080046f9
 8004844:	08004711 	.word	0x08004711
 8004848:	08004729 	.word	0x08004729
 800484c:	08004751 	.word	0x08004751
 8004850:	0800476d 	.word	0x0800476d
 8004854:	08004795 	.word	0x08004795
 8004858:	080047bd 	.word	0x080047bd

0800485c <__errno>:
 800485c:	4b01      	ldr	r3, [pc, #4]	; (8004864 <__errno+0x8>)
 800485e:	6818      	ldr	r0, [r3, #0]
 8004860:	4770      	bx	lr
 8004862:	46c0      	nop			; (mov r8, r8)
 8004864:	20000014 	.word	0x20000014

08004868 <__libc_init_array>:
 8004868:	b570      	push	{r4, r5, r6, lr}
 800486a:	2600      	movs	r6, #0
 800486c:	4d0c      	ldr	r5, [pc, #48]	; (80048a0 <__libc_init_array+0x38>)
 800486e:	4c0d      	ldr	r4, [pc, #52]	; (80048a4 <__libc_init_array+0x3c>)
 8004870:	1b64      	subs	r4, r4, r5
 8004872:	10a4      	asrs	r4, r4, #2
 8004874:	42a6      	cmp	r6, r4
 8004876:	d109      	bne.n	800488c <__libc_init_array+0x24>
 8004878:	2600      	movs	r6, #0
 800487a:	f000 fe87 	bl	800558c <_init>
 800487e:	4d0a      	ldr	r5, [pc, #40]	; (80048a8 <__libc_init_array+0x40>)
 8004880:	4c0a      	ldr	r4, [pc, #40]	; (80048ac <__libc_init_array+0x44>)
 8004882:	1b64      	subs	r4, r4, r5
 8004884:	10a4      	asrs	r4, r4, #2
 8004886:	42a6      	cmp	r6, r4
 8004888:	d105      	bne.n	8004896 <__libc_init_array+0x2e>
 800488a:	bd70      	pop	{r4, r5, r6, pc}
 800488c:	00b3      	lsls	r3, r6, #2
 800488e:	58eb      	ldr	r3, [r5, r3]
 8004890:	4798      	blx	r3
 8004892:	3601      	adds	r6, #1
 8004894:	e7ee      	b.n	8004874 <__libc_init_array+0xc>
 8004896:	00b3      	lsls	r3, r6, #2
 8004898:	58eb      	ldr	r3, [r5, r3]
 800489a:	4798      	blx	r3
 800489c:	3601      	adds	r6, #1
 800489e:	e7f2      	b.n	8004886 <__libc_init_array+0x1e>
 80048a0:	08005890 	.word	0x08005890
 80048a4:	08005890 	.word	0x08005890
 80048a8:	08005890 	.word	0x08005890
 80048ac:	08005894 	.word	0x08005894

080048b0 <memcpy>:
 80048b0:	2300      	movs	r3, #0
 80048b2:	b510      	push	{r4, lr}
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d100      	bne.n	80048ba <memcpy+0xa>
 80048b8:	bd10      	pop	{r4, pc}
 80048ba:	5ccc      	ldrb	r4, [r1, r3]
 80048bc:	54c4      	strb	r4, [r0, r3]
 80048be:	3301      	adds	r3, #1
 80048c0:	e7f8      	b.n	80048b4 <memcpy+0x4>

080048c2 <memset>:
 80048c2:	0003      	movs	r3, r0
 80048c4:	1882      	adds	r2, r0, r2
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d100      	bne.n	80048cc <memset+0xa>
 80048ca:	4770      	bx	lr
 80048cc:	7019      	strb	r1, [r3, #0]
 80048ce:	3301      	adds	r3, #1
 80048d0:	e7f9      	b.n	80048c6 <memset+0x4>
	...

080048d4 <siscanf>:
 80048d4:	b40e      	push	{r1, r2, r3}
 80048d6:	b530      	push	{r4, r5, lr}
 80048d8:	2381      	movs	r3, #129	; 0x81
 80048da:	b09c      	sub	sp, #112	; 0x70
 80048dc:	466a      	mov	r2, sp
 80048de:	ac1f      	add	r4, sp, #124	; 0x7c
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	cc20      	ldmia	r4!, {r5}
 80048e4:	8293      	strh	r3, [r2, #20]
 80048e6:	9002      	str	r0, [sp, #8]
 80048e8:	9006      	str	r0, [sp, #24]
 80048ea:	f7fb fc0d 	bl	8000108 <strlen>
 80048ee:	4b0b      	ldr	r3, [pc, #44]	; (800491c <siscanf+0x48>)
 80048f0:	466a      	mov	r2, sp
 80048f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80048f4:	2300      	movs	r3, #0
 80048f6:	9003      	str	r0, [sp, #12]
 80048f8:	9007      	str	r0, [sp, #28]
 80048fa:	4809      	ldr	r0, [pc, #36]	; (8004920 <siscanf+0x4c>)
 80048fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80048fe:	9314      	str	r3, [sp, #80]	; 0x50
 8004900:	3b01      	subs	r3, #1
 8004902:	82d3      	strh	r3, [r2, #22]
 8004904:	a902      	add	r1, sp, #8
 8004906:	0023      	movs	r3, r4
 8004908:	002a      	movs	r2, r5
 800490a:	6800      	ldr	r0, [r0, #0]
 800490c:	9401      	str	r4, [sp, #4]
 800490e:	f000 f879 	bl	8004a04 <__ssvfiscanf_r>
 8004912:	b01c      	add	sp, #112	; 0x70
 8004914:	bc30      	pop	{r4, r5}
 8004916:	bc08      	pop	{r3}
 8004918:	b003      	add	sp, #12
 800491a:	4718      	bx	r3
 800491c:	08004925 	.word	0x08004925
 8004920:	20000014 	.word	0x20000014

08004924 <__seofread>:
 8004924:	2000      	movs	r0, #0
 8004926:	4770      	bx	lr

08004928 <strncmp>:
 8004928:	b530      	push	{r4, r5, lr}
 800492a:	0005      	movs	r5, r0
 800492c:	1e10      	subs	r0, r2, #0
 800492e:	d008      	beq.n	8004942 <strncmp+0x1a>
 8004930:	2400      	movs	r4, #0
 8004932:	3a01      	subs	r2, #1
 8004934:	5d2b      	ldrb	r3, [r5, r4]
 8004936:	5d08      	ldrb	r0, [r1, r4]
 8004938:	4283      	cmp	r3, r0
 800493a:	d101      	bne.n	8004940 <strncmp+0x18>
 800493c:	4294      	cmp	r4, r2
 800493e:	d101      	bne.n	8004944 <strncmp+0x1c>
 8004940:	1a18      	subs	r0, r3, r0
 8004942:	bd30      	pop	{r4, r5, pc}
 8004944:	3401      	adds	r4, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1f4      	bne.n	8004934 <strncmp+0xc>
 800494a:	e7f9      	b.n	8004940 <strncmp+0x18>

0800494c <_sungetc_r>:
 800494c:	b570      	push	{r4, r5, r6, lr}
 800494e:	0014      	movs	r4, r2
 8004950:	1c4b      	adds	r3, r1, #1
 8004952:	d103      	bne.n	800495c <_sungetc_r+0x10>
 8004954:	2501      	movs	r5, #1
 8004956:	426d      	negs	r5, r5
 8004958:	0028      	movs	r0, r5
 800495a:	bd70      	pop	{r4, r5, r6, pc}
 800495c:	8993      	ldrh	r3, [r2, #12]
 800495e:	2220      	movs	r2, #32
 8004960:	4393      	bics	r3, r2
 8004962:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004964:	81a3      	strh	r3, [r4, #12]
 8004966:	b2ce      	uxtb	r6, r1
 8004968:	6863      	ldr	r3, [r4, #4]
 800496a:	b2cd      	uxtb	r5, r1
 800496c:	2a00      	cmp	r2, #0
 800496e:	d010      	beq.n	8004992 <_sungetc_r+0x46>
 8004970:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004972:	429a      	cmp	r2, r3
 8004974:	dd07      	ble.n	8004986 <_sungetc_r+0x3a>
 8004976:	6823      	ldr	r3, [r4, #0]
 8004978:	3b01      	subs	r3, #1
 800497a:	6023      	str	r3, [r4, #0]
 800497c:	701e      	strb	r6, [r3, #0]
 800497e:	6863      	ldr	r3, [r4, #4]
 8004980:	3301      	adds	r3, #1
 8004982:	6063      	str	r3, [r4, #4]
 8004984:	e7e8      	b.n	8004958 <_sungetc_r+0xc>
 8004986:	0021      	movs	r1, r4
 8004988:	f000 fc78 	bl	800527c <__submore>
 800498c:	2800      	cmp	r0, #0
 800498e:	d0f2      	beq.n	8004976 <_sungetc_r+0x2a>
 8004990:	e7e0      	b.n	8004954 <_sungetc_r+0x8>
 8004992:	6921      	ldr	r1, [r4, #16]
 8004994:	6822      	ldr	r2, [r4, #0]
 8004996:	2900      	cmp	r1, #0
 8004998:	d007      	beq.n	80049aa <_sungetc_r+0x5e>
 800499a:	4291      	cmp	r1, r2
 800499c:	d205      	bcs.n	80049aa <_sungetc_r+0x5e>
 800499e:	1e51      	subs	r1, r2, #1
 80049a0:	7808      	ldrb	r0, [r1, #0]
 80049a2:	42a8      	cmp	r0, r5
 80049a4:	d101      	bne.n	80049aa <_sungetc_r+0x5e>
 80049a6:	6021      	str	r1, [r4, #0]
 80049a8:	e7ea      	b.n	8004980 <_sungetc_r+0x34>
 80049aa:	6423      	str	r3, [r4, #64]	; 0x40
 80049ac:	0023      	movs	r3, r4
 80049ae:	3344      	adds	r3, #68	; 0x44
 80049b0:	6363      	str	r3, [r4, #52]	; 0x34
 80049b2:	2303      	movs	r3, #3
 80049b4:	63a3      	str	r3, [r4, #56]	; 0x38
 80049b6:	0023      	movs	r3, r4
 80049b8:	3346      	adds	r3, #70	; 0x46
 80049ba:	63e2      	str	r2, [r4, #60]	; 0x3c
 80049bc:	701e      	strb	r6, [r3, #0]
 80049be:	6023      	str	r3, [r4, #0]
 80049c0:	2301      	movs	r3, #1
 80049c2:	e7de      	b.n	8004982 <_sungetc_r+0x36>

080049c4 <__ssrefill_r>:
 80049c4:	b510      	push	{r4, lr}
 80049c6:	000c      	movs	r4, r1
 80049c8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80049ca:	2900      	cmp	r1, #0
 80049cc:	d00e      	beq.n	80049ec <__ssrefill_r+0x28>
 80049ce:	0023      	movs	r3, r4
 80049d0:	3344      	adds	r3, #68	; 0x44
 80049d2:	4299      	cmp	r1, r3
 80049d4:	d001      	beq.n	80049da <__ssrefill_r+0x16>
 80049d6:	f000 fc9d 	bl	8005314 <_free_r>
 80049da:	2000      	movs	r0, #0
 80049dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049de:	6360      	str	r0, [r4, #52]	; 0x34
 80049e0:	6063      	str	r3, [r4, #4]
 80049e2:	4283      	cmp	r3, r0
 80049e4:	d002      	beq.n	80049ec <__ssrefill_r+0x28>
 80049e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80049e8:	6023      	str	r3, [r4, #0]
 80049ea:	bd10      	pop	{r4, pc}
 80049ec:	6923      	ldr	r3, [r4, #16]
 80049ee:	2001      	movs	r0, #1
 80049f0:	6023      	str	r3, [r4, #0]
 80049f2:	2300      	movs	r3, #0
 80049f4:	89a2      	ldrh	r2, [r4, #12]
 80049f6:	6063      	str	r3, [r4, #4]
 80049f8:	3320      	adds	r3, #32
 80049fa:	4313      	orrs	r3, r2
 80049fc:	81a3      	strh	r3, [r4, #12]
 80049fe:	4240      	negs	r0, r0
 8004a00:	e7f3      	b.n	80049ea <__ssrefill_r+0x26>
	...

08004a04 <__ssvfiscanf_r>:
 8004a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a06:	4cb8      	ldr	r4, [pc, #736]	; (8004ce8 <__ssvfiscanf_r+0x2e4>)
 8004a08:	0006      	movs	r6, r0
 8004a0a:	44a5      	add	sp, r4
 8004a0c:	000c      	movs	r4, r1
 8004a0e:	2100      	movs	r1, #0
 8004a10:	9146      	str	r1, [sp, #280]	; 0x118
 8004a12:	9147      	str	r1, [sp, #284]	; 0x11c
 8004a14:	a903      	add	r1, sp, #12
 8004a16:	9148      	str	r1, [sp, #288]	; 0x120
 8004a18:	21be      	movs	r1, #190	; 0xbe
 8004a1a:	48b4      	ldr	r0, [pc, #720]	; (8004cec <__ssvfiscanf_r+0x2e8>)
 8004a1c:	0049      	lsls	r1, r1, #1
 8004a1e:	ad43      	add	r5, sp, #268	; 0x10c
 8004a20:	5068      	str	r0, [r5, r1]
 8004a22:	25c0      	movs	r5, #192	; 0xc0
 8004a24:	49b2      	ldr	r1, [pc, #712]	; (8004cf0 <__ssvfiscanf_r+0x2ec>)
 8004a26:	006d      	lsls	r5, r5, #1
 8004a28:	a843      	add	r0, sp, #268	; 0x10c
 8004a2a:	5141      	str	r1, [r0, r5]
 8004a2c:	9302      	str	r3, [sp, #8]
 8004a2e:	7813      	ldrb	r3, [r2, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d100      	bne.n	8004a36 <__ssvfiscanf_r+0x32>
 8004a34:	e155      	b.n	8004ce2 <__ssvfiscanf_r+0x2de>
 8004a36:	49af      	ldr	r1, [pc, #700]	; (8004cf4 <__ssvfiscanf_r+0x2f0>)
 8004a38:	2508      	movs	r5, #8
 8004a3a:	5cc8      	ldrb	r0, [r1, r3]
 8004a3c:	2108      	movs	r1, #8
 8004a3e:	1c57      	adds	r7, r2, #1
 8004a40:	4001      	ands	r1, r0
 8004a42:	4228      	tst	r0, r5
 8004a44:	d020      	beq.n	8004a88 <__ssvfiscanf_r+0x84>
 8004a46:	6863      	ldr	r3, [r4, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	dd12      	ble.n	8004a72 <__ssvfiscanf_r+0x6e>
 8004a4c:	6823      	ldr	r3, [r4, #0]
 8004a4e:	49a9      	ldr	r1, [pc, #676]	; (8004cf4 <__ssvfiscanf_r+0x2f0>)
 8004a50:	781a      	ldrb	r2, [r3, #0]
 8004a52:	5c8a      	ldrb	r2, [r1, r2]
 8004a54:	2108      	movs	r1, #8
 8004a56:	420a      	tst	r2, r1
 8004a58:	d101      	bne.n	8004a5e <__ssvfiscanf_r+0x5a>
 8004a5a:	003a      	movs	r2, r7
 8004a5c:	e7e7      	b.n	8004a2e <__ssvfiscanf_r+0x2a>
 8004a5e:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8004a60:	3301      	adds	r3, #1
 8004a62:	9200      	str	r2, [sp, #0]
 8004a64:	3201      	adds	r2, #1
 8004a66:	9247      	str	r2, [sp, #284]	; 0x11c
 8004a68:	6862      	ldr	r2, [r4, #4]
 8004a6a:	6023      	str	r3, [r4, #0]
 8004a6c:	3a01      	subs	r2, #1
 8004a6e:	6062      	str	r2, [r4, #4]
 8004a70:	e7e9      	b.n	8004a46 <__ssvfiscanf_r+0x42>
 8004a72:	22c0      	movs	r2, #192	; 0xc0
 8004a74:	ab43      	add	r3, sp, #268	; 0x10c
 8004a76:	0052      	lsls	r2, r2, #1
 8004a78:	589b      	ldr	r3, [r3, r2]
 8004a7a:	0021      	movs	r1, r4
 8004a7c:	0030      	movs	r0, r6
 8004a7e:	9300      	str	r3, [sp, #0]
 8004a80:	4798      	blx	r3
 8004a82:	2800      	cmp	r0, #0
 8004a84:	d0e2      	beq.n	8004a4c <__ssvfiscanf_r+0x48>
 8004a86:	e7e8      	b.n	8004a5a <__ssvfiscanf_r+0x56>
 8004a88:	001d      	movs	r5, r3
 8004a8a:	2b25      	cmp	r3, #37	; 0x25
 8004a8c:	d164      	bne.n	8004b58 <__ssvfiscanf_r+0x154>
 8004a8e:	9145      	str	r1, [sp, #276]	; 0x114
 8004a90:	9143      	str	r1, [sp, #268]	; 0x10c
 8004a92:	7853      	ldrb	r3, [r2, #1]
 8004a94:	2b2a      	cmp	r3, #42	; 0x2a
 8004a96:	d102      	bne.n	8004a9e <__ssvfiscanf_r+0x9a>
 8004a98:	3b1a      	subs	r3, #26
 8004a9a:	9343      	str	r3, [sp, #268]	; 0x10c
 8004a9c:	1c97      	adds	r7, r2, #2
 8004a9e:	003d      	movs	r5, r7
 8004aa0:	220a      	movs	r2, #10
 8004aa2:	7829      	ldrb	r1, [r5, #0]
 8004aa4:	1c6b      	adds	r3, r5, #1
 8004aa6:	9300      	str	r3, [sp, #0]
 8004aa8:	000b      	movs	r3, r1
 8004aaa:	3b30      	subs	r3, #48	; 0x30
 8004aac:	2b09      	cmp	r3, #9
 8004aae:	d91f      	bls.n	8004af0 <__ssvfiscanf_r+0xec>
 8004ab0:	4f91      	ldr	r7, [pc, #580]	; (8004cf8 <__ssvfiscanf_r+0x2f4>)
 8004ab2:	2203      	movs	r2, #3
 8004ab4:	0038      	movs	r0, r7
 8004ab6:	f000 fc21 	bl	80052fc <memchr>
 8004aba:	2800      	cmp	r0, #0
 8004abc:	d007      	beq.n	8004ace <__ssvfiscanf_r+0xca>
 8004abe:	2301      	movs	r3, #1
 8004ac0:	1bc0      	subs	r0, r0, r7
 8004ac2:	4083      	lsls	r3, r0
 8004ac4:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8004ac6:	9d00      	ldr	r5, [sp, #0]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	9201      	str	r2, [sp, #4]
 8004acc:	9343      	str	r3, [sp, #268]	; 0x10c
 8004ace:	1c6f      	adds	r7, r5, #1
 8004ad0:	782d      	ldrb	r5, [r5, #0]
 8004ad2:	2d78      	cmp	r5, #120	; 0x78
 8004ad4:	d807      	bhi.n	8004ae6 <__ssvfiscanf_r+0xe2>
 8004ad6:	2d57      	cmp	r5, #87	; 0x57
 8004ad8:	d812      	bhi.n	8004b00 <__ssvfiscanf_r+0xfc>
 8004ada:	2d25      	cmp	r5, #37	; 0x25
 8004adc:	d03c      	beq.n	8004b58 <__ssvfiscanf_r+0x154>
 8004ade:	d836      	bhi.n	8004b4e <__ssvfiscanf_r+0x14a>
 8004ae0:	2d00      	cmp	r5, #0
 8004ae2:	d100      	bne.n	8004ae6 <__ssvfiscanf_r+0xe2>
 8004ae4:	e0fa      	b.n	8004cdc <__ssvfiscanf_r+0x2d8>
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	9349      	str	r3, [sp, #292]	; 0x124
 8004aea:	3307      	adds	r3, #7
 8004aec:	9344      	str	r3, [sp, #272]	; 0x110
 8004aee:	e06d      	b.n	8004bcc <__ssvfiscanf_r+0x1c8>
 8004af0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004af2:	9d00      	ldr	r5, [sp, #0]
 8004af4:	9301      	str	r3, [sp, #4]
 8004af6:	4353      	muls	r3, r2
 8004af8:	3b30      	subs	r3, #48	; 0x30
 8004afa:	185b      	adds	r3, r3, r1
 8004afc:	9345      	str	r3, [sp, #276]	; 0x114
 8004afe:	e7d0      	b.n	8004aa2 <__ssvfiscanf_r+0x9e>
 8004b00:	0028      	movs	r0, r5
 8004b02:	3858      	subs	r0, #88	; 0x58
 8004b04:	2820      	cmp	r0, #32
 8004b06:	d8ee      	bhi.n	8004ae6 <__ssvfiscanf_r+0xe2>
 8004b08:	f7fb fb06 	bl	8000118 <__gnu_thumb1_case_shi>
 8004b0c:	ffed0051 	.word	0xffed0051
 8004b10:	0087ffed 	.word	0x0087ffed
 8004b14:	ffedffed 	.word	0xffedffed
 8004b18:	ffedffed 	.word	0xffedffed
 8004b1c:	ffedffed 	.word	0xffedffed
 8004b20:	0095ffed 	.word	0x0095ffed
 8004b24:	0024007d 	.word	0x0024007d
 8004b28:	00240024 	.word	0x00240024
 8004b2c:	007fffed 	.word	0x007fffed
 8004b30:	ffedffed 	.word	0xffedffed
 8004b34:	ffedffed 	.word	0xffedffed
 8004b38:	0083009f 	.word	0x0083009f
 8004b3c:	ffed004b 	.word	0xffed004b
 8004b40:	009dffed 	.word	0x009dffed
 8004b44:	007dffed 	.word	0x007dffed
 8004b48:	ffedffed 	.word	0xffedffed
 8004b4c:	0051      	.short	0x0051
 8004b4e:	3d45      	subs	r5, #69	; 0x45
 8004b50:	2d02      	cmp	r5, #2
 8004b52:	d8c8      	bhi.n	8004ae6 <__ssvfiscanf_r+0xe2>
 8004b54:	2305      	movs	r3, #5
 8004b56:	e06c      	b.n	8004c32 <__ssvfiscanf_r+0x22e>
 8004b58:	6863      	ldr	r3, [r4, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	dd0e      	ble.n	8004b7c <__ssvfiscanf_r+0x178>
 8004b5e:	6823      	ldr	r3, [r4, #0]
 8004b60:	781a      	ldrb	r2, [r3, #0]
 8004b62:	42aa      	cmp	r2, r5
 8004b64:	d000      	beq.n	8004b68 <__ssvfiscanf_r+0x164>
 8004b66:	e0bc      	b.n	8004ce2 <__ssvfiscanf_r+0x2de>
 8004b68:	3301      	adds	r3, #1
 8004b6a:	6862      	ldr	r2, [r4, #4]
 8004b6c:	6023      	str	r3, [r4, #0]
 8004b6e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004b70:	3a01      	subs	r2, #1
 8004b72:	9300      	str	r3, [sp, #0]
 8004b74:	3301      	adds	r3, #1
 8004b76:	6062      	str	r2, [r4, #4]
 8004b78:	9347      	str	r3, [sp, #284]	; 0x11c
 8004b7a:	e76e      	b.n	8004a5a <__ssvfiscanf_r+0x56>
 8004b7c:	22c0      	movs	r2, #192	; 0xc0
 8004b7e:	ab43      	add	r3, sp, #268	; 0x10c
 8004b80:	0052      	lsls	r2, r2, #1
 8004b82:	589b      	ldr	r3, [r3, r2]
 8004b84:	0021      	movs	r1, r4
 8004b86:	0030      	movs	r0, r6
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	4798      	blx	r3
 8004b8c:	2800      	cmp	r0, #0
 8004b8e:	d0e6      	beq.n	8004b5e <__ssvfiscanf_r+0x15a>
 8004b90:	9846      	ldr	r0, [sp, #280]	; 0x118
 8004b92:	2800      	cmp	r0, #0
 8004b94:	d000      	beq.n	8004b98 <__ssvfiscanf_r+0x194>
 8004b96:	e09d      	b.n	8004cd4 <__ssvfiscanf_r+0x2d0>
 8004b98:	3801      	subs	r0, #1
 8004b9a:	23a5      	movs	r3, #165	; 0xa5
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	449d      	add	sp, r3
 8004ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ba2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	2320      	movs	r3, #32
 8004ba8:	9a00      	ldr	r2, [sp, #0]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	9343      	str	r3, [sp, #268]	; 0x10c
 8004bae:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	2380      	movs	r3, #128	; 0x80
 8004bb4:	9a00      	ldr	r2, [sp, #0]
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	9343      	str	r3, [sp, #268]	; 0x10c
 8004bbc:	2310      	movs	r3, #16
 8004bbe:	9344      	str	r3, [sp, #272]	; 0x110
 8004bc0:	236e      	movs	r3, #110	; 0x6e
 8004bc2:	42ab      	cmp	r3, r5
 8004bc4:	41ad      	sbcs	r5, r5
 8004bc6:	426d      	negs	r5, r5
 8004bc8:	3503      	adds	r5, #3
 8004bca:	9549      	str	r5, [sp, #292]	; 0x124
 8004bcc:	6863      	ldr	r3, [r4, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	dd4a      	ble.n	8004c68 <__ssvfiscanf_r+0x264>
 8004bd2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	065b      	lsls	r3, r3, #25
 8004bd8:	d406      	bmi.n	8004be8 <__ssvfiscanf_r+0x1e4>
 8004bda:	6823      	ldr	r3, [r4, #0]
 8004bdc:	4945      	ldr	r1, [pc, #276]	; (8004cf4 <__ssvfiscanf_r+0x2f0>)
 8004bde:	781a      	ldrb	r2, [r3, #0]
 8004be0:	5c8a      	ldrb	r2, [r1, r2]
 8004be2:	2108      	movs	r1, #8
 8004be4:	420a      	tst	r2, r1
 8004be6:	d14a      	bne.n	8004c7e <__ssvfiscanf_r+0x27a>
 8004be8:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	dc5e      	bgt.n	8004cac <__ssvfiscanf_r+0x2a8>
 8004bee:	0022      	movs	r2, r4
 8004bf0:	0030      	movs	r0, r6
 8004bf2:	ab02      	add	r3, sp, #8
 8004bf4:	a943      	add	r1, sp, #268	; 0x10c
 8004bf6:	f000 f883 	bl	8004d00 <_scanf_chars>
 8004bfa:	2801      	cmp	r0, #1
 8004bfc:	d071      	beq.n	8004ce2 <__ssvfiscanf_r+0x2de>
 8004bfe:	2802      	cmp	r0, #2
 8004c00:	d000      	beq.n	8004c04 <__ssvfiscanf_r+0x200>
 8004c02:	e72a      	b.n	8004a5a <__ssvfiscanf_r+0x56>
 8004c04:	e7c4      	b.n	8004b90 <__ssvfiscanf_r+0x18c>
 8004c06:	230a      	movs	r3, #10
 8004c08:	e7d9      	b.n	8004bbe <__ssvfiscanf_r+0x1ba>
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	2503      	movs	r5, #3
 8004c0e:	9344      	str	r3, [sp, #272]	; 0x110
 8004c10:	e7db      	b.n	8004bca <__ssvfiscanf_r+0x1c6>
 8004c12:	2308      	movs	r3, #8
 8004c14:	2504      	movs	r5, #4
 8004c16:	9344      	str	r3, [sp, #272]	; 0x110
 8004c18:	e7d7      	b.n	8004bca <__ssvfiscanf_r+0x1c6>
 8004c1a:	0039      	movs	r1, r7
 8004c1c:	a803      	add	r0, sp, #12
 8004c1e:	f000 f9d1 	bl	8004fc4 <__sccl>
 8004c22:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004c24:	0007      	movs	r7, r0
 8004c26:	9300      	str	r3, [sp, #0]
 8004c28:	2340      	movs	r3, #64	; 0x40
 8004c2a:	9a00      	ldr	r2, [sp, #0]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	9343      	str	r3, [sp, #268]	; 0x10c
 8004c30:	2301      	movs	r3, #1
 8004c32:	9349      	str	r3, [sp, #292]	; 0x124
 8004c34:	e7ca      	b.n	8004bcc <__ssvfiscanf_r+0x1c8>
 8004c36:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	2340      	movs	r3, #64	; 0x40
 8004c3c:	9a00      	ldr	r2, [sp, #0]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	9343      	str	r3, [sp, #268]	; 0x10c
 8004c42:	2300      	movs	r3, #0
 8004c44:	e7f5      	b.n	8004c32 <__ssvfiscanf_r+0x22e>
 8004c46:	2302      	movs	r3, #2
 8004c48:	e7f3      	b.n	8004c32 <__ssvfiscanf_r+0x22e>
 8004c4a:	9843      	ldr	r0, [sp, #268]	; 0x10c
 8004c4c:	06c3      	lsls	r3, r0, #27
 8004c4e:	d500      	bpl.n	8004c52 <__ssvfiscanf_r+0x24e>
 8004c50:	e703      	b.n	8004a5a <__ssvfiscanf_r+0x56>
 8004c52:	9b02      	ldr	r3, [sp, #8]
 8004c54:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8004c56:	1d19      	adds	r1, r3, #4
 8004c58:	9102      	str	r1, [sp, #8]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	07c5      	lsls	r5, r0, #31
 8004c5e:	d501      	bpl.n	8004c64 <__ssvfiscanf_r+0x260>
 8004c60:	801a      	strh	r2, [r3, #0]
 8004c62:	e6fa      	b.n	8004a5a <__ssvfiscanf_r+0x56>
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	e6f8      	b.n	8004a5a <__ssvfiscanf_r+0x56>
 8004c68:	22c0      	movs	r2, #192	; 0xc0
 8004c6a:	ab43      	add	r3, sp, #268	; 0x10c
 8004c6c:	0052      	lsls	r2, r2, #1
 8004c6e:	589b      	ldr	r3, [r3, r2]
 8004c70:	0021      	movs	r1, r4
 8004c72:	0030      	movs	r0, r6
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	4798      	blx	r3
 8004c78:	2800      	cmp	r0, #0
 8004c7a:	d0aa      	beq.n	8004bd2 <__ssvfiscanf_r+0x1ce>
 8004c7c:	e788      	b.n	8004b90 <__ssvfiscanf_r+0x18c>
 8004c7e:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8004c80:	9200      	str	r2, [sp, #0]
 8004c82:	3201      	adds	r2, #1
 8004c84:	9247      	str	r2, [sp, #284]	; 0x11c
 8004c86:	6862      	ldr	r2, [r4, #4]
 8004c88:	3a01      	subs	r2, #1
 8004c8a:	6062      	str	r2, [r4, #4]
 8004c8c:	2a00      	cmp	r2, #0
 8004c8e:	dd02      	ble.n	8004c96 <__ssvfiscanf_r+0x292>
 8004c90:	3301      	adds	r3, #1
 8004c92:	6023      	str	r3, [r4, #0]
 8004c94:	e7a1      	b.n	8004bda <__ssvfiscanf_r+0x1d6>
 8004c96:	22c0      	movs	r2, #192	; 0xc0
 8004c98:	ab43      	add	r3, sp, #268	; 0x10c
 8004c9a:	0052      	lsls	r2, r2, #1
 8004c9c:	589b      	ldr	r3, [r3, r2]
 8004c9e:	0021      	movs	r1, r4
 8004ca0:	0030      	movs	r0, r6
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	4798      	blx	r3
 8004ca6:	2800      	cmp	r0, #0
 8004ca8:	d097      	beq.n	8004bda <__ssvfiscanf_r+0x1d6>
 8004caa:	e771      	b.n	8004b90 <__ssvfiscanf_r+0x18c>
 8004cac:	2b04      	cmp	r3, #4
 8004cae:	dc06      	bgt.n	8004cbe <__ssvfiscanf_r+0x2ba>
 8004cb0:	0022      	movs	r2, r4
 8004cb2:	0030      	movs	r0, r6
 8004cb4:	ab02      	add	r3, sp, #8
 8004cb6:	a943      	add	r1, sp, #268	; 0x10c
 8004cb8:	f000 f880 	bl	8004dbc <_scanf_i>
 8004cbc:	e79d      	b.n	8004bfa <__ssvfiscanf_r+0x1f6>
 8004cbe:	4b0f      	ldr	r3, [pc, #60]	; (8004cfc <__ssvfiscanf_r+0x2f8>)
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d100      	bne.n	8004cc6 <__ssvfiscanf_r+0x2c2>
 8004cc4:	e6c9      	b.n	8004a5a <__ssvfiscanf_r+0x56>
 8004cc6:	0022      	movs	r2, r4
 8004cc8:	0030      	movs	r0, r6
 8004cca:	ab02      	add	r3, sp, #8
 8004ccc:	a943      	add	r1, sp, #268	; 0x10c
 8004cce:	e000      	b.n	8004cd2 <__ssvfiscanf_r+0x2ce>
 8004cd0:	bf00      	nop
 8004cd2:	e792      	b.n	8004bfa <__ssvfiscanf_r+0x1f6>
 8004cd4:	89a3      	ldrh	r3, [r4, #12]
 8004cd6:	065b      	lsls	r3, r3, #25
 8004cd8:	d400      	bmi.n	8004cdc <__ssvfiscanf_r+0x2d8>
 8004cda:	e75e      	b.n	8004b9a <__ssvfiscanf_r+0x196>
 8004cdc:	2001      	movs	r0, #1
 8004cde:	4240      	negs	r0, r0
 8004ce0:	e75b      	b.n	8004b9a <__ssvfiscanf_r+0x196>
 8004ce2:	9846      	ldr	r0, [sp, #280]	; 0x118
 8004ce4:	e759      	b.n	8004b9a <__ssvfiscanf_r+0x196>
 8004ce6:	46c0      	nop			; (mov r8, r8)
 8004ce8:	fffffd6c 	.word	0xfffffd6c
 8004cec:	0800494d 	.word	0x0800494d
 8004cf0:	080049c5 	.word	0x080049c5
 8004cf4:	08005730 	.word	0x08005730
 8004cf8:	08005710 	.word	0x08005710
 8004cfc:	00000000 	.word	0x00000000

08004d00 <_scanf_chars>:
 8004d00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d02:	0015      	movs	r5, r2
 8004d04:	688a      	ldr	r2, [r1, #8]
 8004d06:	000c      	movs	r4, r1
 8004d08:	9001      	str	r0, [sp, #4]
 8004d0a:	2a00      	cmp	r2, #0
 8004d0c:	d105      	bne.n	8004d1a <_scanf_chars+0x1a>
 8004d0e:	6989      	ldr	r1, [r1, #24]
 8004d10:	3201      	adds	r2, #1
 8004d12:	2900      	cmp	r1, #0
 8004d14:	d000      	beq.n	8004d18 <_scanf_chars+0x18>
 8004d16:	3a02      	subs	r2, #2
 8004d18:	60a2      	str	r2, [r4, #8]
 8004d1a:	6822      	ldr	r2, [r4, #0]
 8004d1c:	06d2      	lsls	r2, r2, #27
 8004d1e:	d403      	bmi.n	8004d28 <_scanf_chars+0x28>
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	1d11      	adds	r1, r2, #4
 8004d24:	6019      	str	r1, [r3, #0]
 8004d26:	6817      	ldr	r7, [r2, #0]
 8004d28:	2600      	movs	r6, #0
 8004d2a:	69a0      	ldr	r0, [r4, #24]
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	d013      	beq.n	8004d58 <_scanf_chars+0x58>
 8004d30:	2801      	cmp	r0, #1
 8004d32:	d108      	bne.n	8004d46 <_scanf_chars+0x46>
 8004d34:	682b      	ldr	r3, [r5, #0]
 8004d36:	6962      	ldr	r2, [r4, #20]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	5cd3      	ldrb	r3, [r2, r3]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d10b      	bne.n	8004d58 <_scanf_chars+0x58>
 8004d40:	2e00      	cmp	r6, #0
 8004d42:	d038      	beq.n	8004db6 <_scanf_chars+0xb6>
 8004d44:	e026      	b.n	8004d94 <_scanf_chars+0x94>
 8004d46:	2802      	cmp	r0, #2
 8004d48:	d124      	bne.n	8004d94 <_scanf_chars+0x94>
 8004d4a:	682b      	ldr	r3, [r5, #0]
 8004d4c:	4a1a      	ldr	r2, [pc, #104]	; (8004db8 <_scanf_chars+0xb8>)
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	5cd3      	ldrb	r3, [r2, r3]
 8004d52:	2208      	movs	r2, #8
 8004d54:	4213      	tst	r3, r2
 8004d56:	d11d      	bne.n	8004d94 <_scanf_chars+0x94>
 8004d58:	2210      	movs	r2, #16
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	3601      	adds	r6, #1
 8004d5e:	4213      	tst	r3, r2
 8004d60:	d103      	bne.n	8004d6a <_scanf_chars+0x6a>
 8004d62:	682b      	ldr	r3, [r5, #0]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	703b      	strb	r3, [r7, #0]
 8004d68:	3701      	adds	r7, #1
 8004d6a:	682a      	ldr	r2, [r5, #0]
 8004d6c:	686b      	ldr	r3, [r5, #4]
 8004d6e:	3201      	adds	r2, #1
 8004d70:	602a      	str	r2, [r5, #0]
 8004d72:	68a2      	ldr	r2, [r4, #8]
 8004d74:	3b01      	subs	r3, #1
 8004d76:	3a01      	subs	r2, #1
 8004d78:	606b      	str	r3, [r5, #4]
 8004d7a:	60a2      	str	r2, [r4, #8]
 8004d7c:	2a00      	cmp	r2, #0
 8004d7e:	d009      	beq.n	8004d94 <_scanf_chars+0x94>
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	dcd2      	bgt.n	8004d2a <_scanf_chars+0x2a>
 8004d84:	23c0      	movs	r3, #192	; 0xc0
 8004d86:	005b      	lsls	r3, r3, #1
 8004d88:	0029      	movs	r1, r5
 8004d8a:	58e3      	ldr	r3, [r4, r3]
 8004d8c:	9801      	ldr	r0, [sp, #4]
 8004d8e:	4798      	blx	r3
 8004d90:	2800      	cmp	r0, #0
 8004d92:	d0ca      	beq.n	8004d2a <_scanf_chars+0x2a>
 8004d94:	6822      	ldr	r2, [r4, #0]
 8004d96:	2310      	movs	r3, #16
 8004d98:	0011      	movs	r1, r2
 8004d9a:	4019      	ands	r1, r3
 8004d9c:	421a      	tst	r2, r3
 8004d9e:	d106      	bne.n	8004dae <_scanf_chars+0xae>
 8004da0:	68e3      	ldr	r3, [r4, #12]
 8004da2:	3301      	adds	r3, #1
 8004da4:	60e3      	str	r3, [r4, #12]
 8004da6:	69a3      	ldr	r3, [r4, #24]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d000      	beq.n	8004dae <_scanf_chars+0xae>
 8004dac:	7039      	strb	r1, [r7, #0]
 8004dae:	2000      	movs	r0, #0
 8004db0:	6923      	ldr	r3, [r4, #16]
 8004db2:	199e      	adds	r6, r3, r6
 8004db4:	6126      	str	r6, [r4, #16]
 8004db6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004db8:	08005730 	.word	0x08005730

08004dbc <_scanf_i>:
 8004dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dbe:	000c      	movs	r4, r1
 8004dc0:	b08d      	sub	sp, #52	; 0x34
 8004dc2:	9302      	str	r3, [sp, #8]
 8004dc4:	4b79      	ldr	r3, [pc, #484]	; (8004fac <_scanf_i+0x1f0>)
 8004dc6:	0016      	movs	r6, r2
 8004dc8:	9005      	str	r0, [sp, #20]
 8004dca:	aa09      	add	r2, sp, #36	; 0x24
 8004dcc:	cb23      	ldmia	r3!, {r0, r1, r5}
 8004dce:	c223      	stmia	r2!, {r0, r1, r5}
 8004dd0:	4b77      	ldr	r3, [pc, #476]	; (8004fb0 <_scanf_i+0x1f4>)
 8004dd2:	9306      	str	r3, [sp, #24]
 8004dd4:	69a3      	ldr	r3, [r4, #24]
 8004dd6:	2b03      	cmp	r3, #3
 8004dd8:	d001      	beq.n	8004dde <_scanf_i+0x22>
 8004dda:	4b76      	ldr	r3, [pc, #472]	; (8004fb4 <_scanf_i+0x1f8>)
 8004ddc:	9306      	str	r3, [sp, #24]
 8004dde:	22ae      	movs	r2, #174	; 0xae
 8004de0:	2000      	movs	r0, #0
 8004de2:	68a3      	ldr	r3, [r4, #8]
 8004de4:	0052      	lsls	r2, r2, #1
 8004de6:	1e59      	subs	r1, r3, #1
 8004de8:	9004      	str	r0, [sp, #16]
 8004dea:	4291      	cmp	r1, r2
 8004dec:	d905      	bls.n	8004dfa <_scanf_i+0x3e>
 8004dee:	3b5e      	subs	r3, #94	; 0x5e
 8004df0:	3bff      	subs	r3, #255	; 0xff
 8004df2:	9304      	str	r3, [sp, #16]
 8004df4:	235e      	movs	r3, #94	; 0x5e
 8004df6:	33ff      	adds	r3, #255	; 0xff
 8004df8:	60a3      	str	r3, [r4, #8]
 8004dfa:	0023      	movs	r3, r4
 8004dfc:	331c      	adds	r3, #28
 8004dfe:	9301      	str	r3, [sp, #4]
 8004e00:	23d0      	movs	r3, #208	; 0xd0
 8004e02:	2700      	movs	r7, #0
 8004e04:	6822      	ldr	r2, [r4, #0]
 8004e06:	011b      	lsls	r3, r3, #4
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	6023      	str	r3, [r4, #0]
 8004e0c:	9b01      	ldr	r3, [sp, #4]
 8004e0e:	9303      	str	r3, [sp, #12]
 8004e10:	6833      	ldr	r3, [r6, #0]
 8004e12:	a809      	add	r0, sp, #36	; 0x24
 8004e14:	7819      	ldrb	r1, [r3, #0]
 8004e16:	00bb      	lsls	r3, r7, #2
 8004e18:	2202      	movs	r2, #2
 8004e1a:	5818      	ldr	r0, [r3, r0]
 8004e1c:	f000 fa6e 	bl	80052fc <memchr>
 8004e20:	2800      	cmp	r0, #0
 8004e22:	d02b      	beq.n	8004e7c <_scanf_i+0xc0>
 8004e24:	2f01      	cmp	r7, #1
 8004e26:	d162      	bne.n	8004eee <_scanf_i+0x132>
 8004e28:	6863      	ldr	r3, [r4, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d106      	bne.n	8004e3c <_scanf_i+0x80>
 8004e2e:	3308      	adds	r3, #8
 8004e30:	6822      	ldr	r2, [r4, #0]
 8004e32:	6063      	str	r3, [r4, #4]
 8004e34:	33f9      	adds	r3, #249	; 0xf9
 8004e36:	33ff      	adds	r3, #255	; 0xff
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	6023      	str	r3, [r4, #0]
 8004e3c:	4b5e      	ldr	r3, [pc, #376]	; (8004fb8 <_scanf_i+0x1fc>)
 8004e3e:	6822      	ldr	r2, [r4, #0]
 8004e40:	4013      	ands	r3, r2
 8004e42:	6023      	str	r3, [r4, #0]
 8004e44:	68a3      	ldr	r3, [r4, #8]
 8004e46:	1e5a      	subs	r2, r3, #1
 8004e48:	60a2      	str	r2, [r4, #8]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d016      	beq.n	8004e7c <_scanf_i+0xc0>
 8004e4e:	6833      	ldr	r3, [r6, #0]
 8004e50:	1c5a      	adds	r2, r3, #1
 8004e52:	6032      	str	r2, [r6, #0]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	9a03      	ldr	r2, [sp, #12]
 8004e58:	7013      	strb	r3, [r2, #0]
 8004e5a:	6873      	ldr	r3, [r6, #4]
 8004e5c:	1c55      	adds	r5, r2, #1
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	6073      	str	r3, [r6, #4]
 8004e62:	9503      	str	r5, [sp, #12]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	dc09      	bgt.n	8004e7c <_scanf_i+0xc0>
 8004e68:	23c0      	movs	r3, #192	; 0xc0
 8004e6a:	005b      	lsls	r3, r3, #1
 8004e6c:	58e3      	ldr	r3, [r4, r3]
 8004e6e:	0031      	movs	r1, r6
 8004e70:	9805      	ldr	r0, [sp, #20]
 8004e72:	9307      	str	r3, [sp, #28]
 8004e74:	4798      	blx	r3
 8004e76:	2800      	cmp	r0, #0
 8004e78:	d000      	beq.n	8004e7c <_scanf_i+0xc0>
 8004e7a:	e081      	b.n	8004f80 <_scanf_i+0x1c4>
 8004e7c:	3701      	adds	r7, #1
 8004e7e:	2f03      	cmp	r7, #3
 8004e80:	d1c6      	bne.n	8004e10 <_scanf_i+0x54>
 8004e82:	6863      	ldr	r3, [r4, #4]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d101      	bne.n	8004e8c <_scanf_i+0xd0>
 8004e88:	330a      	adds	r3, #10
 8004e8a:	6063      	str	r3, [r4, #4]
 8004e8c:	2110      	movs	r1, #16
 8004e8e:	2700      	movs	r7, #0
 8004e90:	6863      	ldr	r3, [r4, #4]
 8004e92:	6960      	ldr	r0, [r4, #20]
 8004e94:	1ac9      	subs	r1, r1, r3
 8004e96:	4b49      	ldr	r3, [pc, #292]	; (8004fbc <_scanf_i+0x200>)
 8004e98:	18c9      	adds	r1, r1, r3
 8004e9a:	f000 f893 	bl	8004fc4 <__sccl>
 8004e9e:	9d03      	ldr	r5, [sp, #12]
 8004ea0:	68a3      	ldr	r3, [r4, #8]
 8004ea2:	6822      	ldr	r2, [r4, #0]
 8004ea4:	9303      	str	r3, [sp, #12]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d041      	beq.n	8004f2e <_scanf_i+0x172>
 8004eaa:	6831      	ldr	r1, [r6, #0]
 8004eac:	6963      	ldr	r3, [r4, #20]
 8004eae:	7808      	ldrb	r0, [r1, #0]
 8004eb0:	5c1b      	ldrb	r3, [r3, r0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d03b      	beq.n	8004f2e <_scanf_i+0x172>
 8004eb6:	2830      	cmp	r0, #48	; 0x30
 8004eb8:	d129      	bne.n	8004f0e <_scanf_i+0x152>
 8004eba:	2380      	movs	r3, #128	; 0x80
 8004ebc:	011b      	lsls	r3, r3, #4
 8004ebe:	421a      	tst	r2, r3
 8004ec0:	d025      	beq.n	8004f0e <_scanf_i+0x152>
 8004ec2:	9b04      	ldr	r3, [sp, #16]
 8004ec4:	3701      	adds	r7, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d005      	beq.n	8004ed6 <_scanf_i+0x11a>
 8004eca:	001a      	movs	r2, r3
 8004ecc:	9b03      	ldr	r3, [sp, #12]
 8004ece:	3a01      	subs	r2, #1
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	9204      	str	r2, [sp, #16]
 8004ed4:	60a3      	str	r3, [r4, #8]
 8004ed6:	6873      	ldr	r3, [r6, #4]
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	6073      	str	r3, [r6, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	dd1d      	ble.n	8004f1c <_scanf_i+0x160>
 8004ee0:	6833      	ldr	r3, [r6, #0]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	6033      	str	r3, [r6, #0]
 8004ee6:	68a3      	ldr	r3, [r4, #8]
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	60a3      	str	r3, [r4, #8]
 8004eec:	e7d8      	b.n	8004ea0 <_scanf_i+0xe4>
 8004eee:	2f02      	cmp	r7, #2
 8004ef0:	d1a8      	bne.n	8004e44 <_scanf_i+0x88>
 8004ef2:	21c0      	movs	r1, #192	; 0xc0
 8004ef4:	2380      	movs	r3, #128	; 0x80
 8004ef6:	6822      	ldr	r2, [r4, #0]
 8004ef8:	00c9      	lsls	r1, r1, #3
 8004efa:	4011      	ands	r1, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	4299      	cmp	r1, r3
 8004f00:	d1bf      	bne.n	8004e82 <_scanf_i+0xc6>
 8004f02:	3bf1      	subs	r3, #241	; 0xf1
 8004f04:	3bff      	subs	r3, #255	; 0xff
 8004f06:	6063      	str	r3, [r4, #4]
 8004f08:	33f0      	adds	r3, #240	; 0xf0
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	e799      	b.n	8004e42 <_scanf_i+0x86>
 8004f0e:	4b2c      	ldr	r3, [pc, #176]	; (8004fc0 <_scanf_i+0x204>)
 8004f10:	4013      	ands	r3, r2
 8004f12:	6023      	str	r3, [r4, #0]
 8004f14:	780b      	ldrb	r3, [r1, #0]
 8004f16:	702b      	strb	r3, [r5, #0]
 8004f18:	3501      	adds	r5, #1
 8004f1a:	e7dc      	b.n	8004ed6 <_scanf_i+0x11a>
 8004f1c:	23c0      	movs	r3, #192	; 0xc0
 8004f1e:	005b      	lsls	r3, r3, #1
 8004f20:	58e3      	ldr	r3, [r4, r3]
 8004f22:	0031      	movs	r1, r6
 8004f24:	9805      	ldr	r0, [sp, #20]
 8004f26:	9303      	str	r3, [sp, #12]
 8004f28:	4798      	blx	r3
 8004f2a:	2800      	cmp	r0, #0
 8004f2c:	d0db      	beq.n	8004ee6 <_scanf_i+0x12a>
 8004f2e:	6823      	ldr	r3, [r4, #0]
 8004f30:	05db      	lsls	r3, r3, #23
 8004f32:	d50e      	bpl.n	8004f52 <_scanf_i+0x196>
 8004f34:	9b01      	ldr	r3, [sp, #4]
 8004f36:	429d      	cmp	r5, r3
 8004f38:	d907      	bls.n	8004f4a <_scanf_i+0x18e>
 8004f3a:	23be      	movs	r3, #190	; 0xbe
 8004f3c:	3d01      	subs	r5, #1
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	0032      	movs	r2, r6
 8004f42:	7829      	ldrb	r1, [r5, #0]
 8004f44:	58e3      	ldr	r3, [r4, r3]
 8004f46:	9805      	ldr	r0, [sp, #20]
 8004f48:	4798      	blx	r3
 8004f4a:	9b01      	ldr	r3, [sp, #4]
 8004f4c:	2001      	movs	r0, #1
 8004f4e:	429d      	cmp	r5, r3
 8004f50:	d029      	beq.n	8004fa6 <_scanf_i+0x1ea>
 8004f52:	6821      	ldr	r1, [r4, #0]
 8004f54:	2310      	movs	r3, #16
 8004f56:	000a      	movs	r2, r1
 8004f58:	401a      	ands	r2, r3
 8004f5a:	4219      	tst	r1, r3
 8004f5c:	d11c      	bne.n	8004f98 <_scanf_i+0x1dc>
 8004f5e:	702a      	strb	r2, [r5, #0]
 8004f60:	6863      	ldr	r3, [r4, #4]
 8004f62:	9901      	ldr	r1, [sp, #4]
 8004f64:	9805      	ldr	r0, [sp, #20]
 8004f66:	9e06      	ldr	r6, [sp, #24]
 8004f68:	47b0      	blx	r6
 8004f6a:	9b02      	ldr	r3, [sp, #8]
 8004f6c:	6821      	ldr	r1, [r4, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	068a      	lsls	r2, r1, #26
 8004f72:	d507      	bpl.n	8004f84 <_scanf_i+0x1c8>
 8004f74:	1d1a      	adds	r2, r3, #4
 8004f76:	9902      	ldr	r1, [sp, #8]
 8004f78:	600a      	str	r2, [r1, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6018      	str	r0, [r3, #0]
 8004f7e:	e008      	b.n	8004f92 <_scanf_i+0x1d6>
 8004f80:	2700      	movs	r7, #0
 8004f82:	e7d4      	b.n	8004f2e <_scanf_i+0x172>
 8004f84:	1d1a      	adds	r2, r3, #4
 8004f86:	07ce      	lsls	r6, r1, #31
 8004f88:	d5f5      	bpl.n	8004f76 <_scanf_i+0x1ba>
 8004f8a:	9902      	ldr	r1, [sp, #8]
 8004f8c:	600a      	str	r2, [r1, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	8018      	strh	r0, [r3, #0]
 8004f92:	68e3      	ldr	r3, [r4, #12]
 8004f94:	3301      	adds	r3, #1
 8004f96:	60e3      	str	r3, [r4, #12]
 8004f98:	2000      	movs	r0, #0
 8004f9a:	9b01      	ldr	r3, [sp, #4]
 8004f9c:	1aed      	subs	r5, r5, r3
 8004f9e:	6923      	ldr	r3, [r4, #16]
 8004fa0:	19ef      	adds	r7, r5, r7
 8004fa2:	19df      	adds	r7, r3, r7
 8004fa4:	6127      	str	r7, [r4, #16]
 8004fa6:	b00d      	add	sp, #52	; 0x34
 8004fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004faa:	46c0      	nop			; (mov r8, r8)
 8004fac:	0800560c 	.word	0x0800560c
 8004fb0:	08005159 	.word	0x08005159
 8004fb4:	08005275 	.word	0x08005275
 8004fb8:	fffffaff 	.word	0xfffffaff
 8004fbc:	0800571d 	.word	0x0800571d
 8004fc0:	fffff6ff 	.word	0xfffff6ff

08004fc4 <__sccl>:
 8004fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fc6:	780b      	ldrb	r3, [r1, #0]
 8004fc8:	0004      	movs	r4, r0
 8004fca:	2b5e      	cmp	r3, #94	; 0x5e
 8004fcc:	d00c      	beq.n	8004fe8 <__sccl+0x24>
 8004fce:	1c48      	adds	r0, r1, #1
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	0022      	movs	r2, r4
 8004fd4:	1c65      	adds	r5, r4, #1
 8004fd6:	35ff      	adds	r5, #255	; 0xff
 8004fd8:	7011      	strb	r1, [r2, #0]
 8004fda:	3201      	adds	r2, #1
 8004fdc:	42aa      	cmp	r2, r5
 8004fde:	d1fb      	bne.n	8004fd8 <__sccl+0x14>
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d105      	bne.n	8004ff0 <__sccl+0x2c>
 8004fe4:	3801      	subs	r0, #1
 8004fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fe8:	784b      	ldrb	r3, [r1, #1]
 8004fea:	1c88      	adds	r0, r1, #2
 8004fec:	2101      	movs	r1, #1
 8004fee:	e7f0      	b.n	8004fd2 <__sccl+0xe>
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	262d      	movs	r6, #45	; 0x2d
 8004ff4:	4051      	eors	r1, r2
 8004ff6:	0002      	movs	r2, r0
 8004ff8:	54e1      	strb	r1, [r4, r3]
 8004ffa:	7815      	ldrb	r5, [r2, #0]
 8004ffc:	1c50      	adds	r0, r2, #1
 8004ffe:	2d2d      	cmp	r5, #45	; 0x2d
 8005000:	d009      	beq.n	8005016 <__sccl+0x52>
 8005002:	2d5d      	cmp	r5, #93	; 0x5d
 8005004:	d0ef      	beq.n	8004fe6 <__sccl+0x22>
 8005006:	2d00      	cmp	r5, #0
 8005008:	d101      	bne.n	800500e <__sccl+0x4a>
 800500a:	0010      	movs	r0, r2
 800500c:	e7eb      	b.n	8004fe6 <__sccl+0x22>
 800500e:	002b      	movs	r3, r5
 8005010:	e7f1      	b.n	8004ff6 <__sccl+0x32>
 8005012:	0033      	movs	r3, r6
 8005014:	e7ef      	b.n	8004ff6 <__sccl+0x32>
 8005016:	7855      	ldrb	r5, [r2, #1]
 8005018:	2d5d      	cmp	r5, #93	; 0x5d
 800501a:	d0fa      	beq.n	8005012 <__sccl+0x4e>
 800501c:	42ab      	cmp	r3, r5
 800501e:	dcf8      	bgt.n	8005012 <__sccl+0x4e>
 8005020:	0018      	movs	r0, r3
 8005022:	3202      	adds	r2, #2
 8005024:	3001      	adds	r0, #1
 8005026:	5421      	strb	r1, [r4, r0]
 8005028:	4285      	cmp	r5, r0
 800502a:	dcfb      	bgt.n	8005024 <__sccl+0x60>
 800502c:	2000      	movs	r0, #0
 800502e:	1c5f      	adds	r7, r3, #1
 8005030:	42ab      	cmp	r3, r5
 8005032:	da01      	bge.n	8005038 <__sccl+0x74>
 8005034:	1ae8      	subs	r0, r5, r3
 8005036:	3801      	subs	r0, #1
 8005038:	183b      	adds	r3, r7, r0
 800503a:	e7de      	b.n	8004ffa <__sccl+0x36>

0800503c <_strtol_l.constprop.0>:
 800503c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800503e:	b087      	sub	sp, #28
 8005040:	001e      	movs	r6, r3
 8005042:	9005      	str	r0, [sp, #20]
 8005044:	9101      	str	r1, [sp, #4]
 8005046:	9202      	str	r2, [sp, #8]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d045      	beq.n	80050d8 <_strtol_l.constprop.0+0x9c>
 800504c:	000b      	movs	r3, r1
 800504e:	2e24      	cmp	r6, #36	; 0x24
 8005050:	d842      	bhi.n	80050d8 <_strtol_l.constprop.0+0x9c>
 8005052:	4a3f      	ldr	r2, [pc, #252]	; (8005150 <_strtol_l.constprop.0+0x114>)
 8005054:	2108      	movs	r1, #8
 8005056:	4694      	mov	ip, r2
 8005058:	001a      	movs	r2, r3
 800505a:	4660      	mov	r0, ip
 800505c:	7814      	ldrb	r4, [r2, #0]
 800505e:	3301      	adds	r3, #1
 8005060:	5d00      	ldrb	r0, [r0, r4]
 8005062:	001d      	movs	r5, r3
 8005064:	0007      	movs	r7, r0
 8005066:	400f      	ands	r7, r1
 8005068:	4208      	tst	r0, r1
 800506a:	d1f5      	bne.n	8005058 <_strtol_l.constprop.0+0x1c>
 800506c:	2c2d      	cmp	r4, #45	; 0x2d
 800506e:	d13a      	bne.n	80050e6 <_strtol_l.constprop.0+0xaa>
 8005070:	2701      	movs	r7, #1
 8005072:	781c      	ldrb	r4, [r3, #0]
 8005074:	1c95      	adds	r5, r2, #2
 8005076:	2e00      	cmp	r6, #0
 8005078:	d065      	beq.n	8005146 <_strtol_l.constprop.0+0x10a>
 800507a:	2e10      	cmp	r6, #16
 800507c:	d109      	bne.n	8005092 <_strtol_l.constprop.0+0x56>
 800507e:	2c30      	cmp	r4, #48	; 0x30
 8005080:	d107      	bne.n	8005092 <_strtol_l.constprop.0+0x56>
 8005082:	2220      	movs	r2, #32
 8005084:	782b      	ldrb	r3, [r5, #0]
 8005086:	4393      	bics	r3, r2
 8005088:	2b58      	cmp	r3, #88	; 0x58
 800508a:	d157      	bne.n	800513c <_strtol_l.constprop.0+0x100>
 800508c:	2610      	movs	r6, #16
 800508e:	786c      	ldrb	r4, [r5, #1]
 8005090:	3502      	adds	r5, #2
 8005092:	4b30      	ldr	r3, [pc, #192]	; (8005154 <_strtol_l.constprop.0+0x118>)
 8005094:	0031      	movs	r1, r6
 8005096:	18fb      	adds	r3, r7, r3
 8005098:	0018      	movs	r0, r3
 800509a:	9303      	str	r3, [sp, #12]
 800509c:	f7fb f8cc 	bl	8000238 <__aeabi_uidivmod>
 80050a0:	2300      	movs	r3, #0
 80050a2:	2201      	movs	r2, #1
 80050a4:	4684      	mov	ip, r0
 80050a6:	0018      	movs	r0, r3
 80050a8:	9104      	str	r1, [sp, #16]
 80050aa:	4252      	negs	r2, r2
 80050ac:	0021      	movs	r1, r4
 80050ae:	3930      	subs	r1, #48	; 0x30
 80050b0:	2909      	cmp	r1, #9
 80050b2:	d81d      	bhi.n	80050f0 <_strtol_l.constprop.0+0xb4>
 80050b4:	000c      	movs	r4, r1
 80050b6:	42a6      	cmp	r6, r4
 80050b8:	dd28      	ble.n	800510c <_strtol_l.constprop.0+0xd0>
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	db24      	blt.n	8005108 <_strtol_l.constprop.0+0xcc>
 80050be:	0013      	movs	r3, r2
 80050c0:	4584      	cmp	ip, r0
 80050c2:	d306      	bcc.n	80050d2 <_strtol_l.constprop.0+0x96>
 80050c4:	d102      	bne.n	80050cc <_strtol_l.constprop.0+0x90>
 80050c6:	9904      	ldr	r1, [sp, #16]
 80050c8:	42a1      	cmp	r1, r4
 80050ca:	db02      	blt.n	80050d2 <_strtol_l.constprop.0+0x96>
 80050cc:	2301      	movs	r3, #1
 80050ce:	4370      	muls	r0, r6
 80050d0:	1820      	adds	r0, r4, r0
 80050d2:	782c      	ldrb	r4, [r5, #0]
 80050d4:	3501      	adds	r5, #1
 80050d6:	e7e9      	b.n	80050ac <_strtol_l.constprop.0+0x70>
 80050d8:	f7ff fbc0 	bl	800485c <__errno>
 80050dc:	2316      	movs	r3, #22
 80050de:	6003      	str	r3, [r0, #0]
 80050e0:	2000      	movs	r0, #0
 80050e2:	b007      	add	sp, #28
 80050e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050e6:	2c2b      	cmp	r4, #43	; 0x2b
 80050e8:	d1c5      	bne.n	8005076 <_strtol_l.constprop.0+0x3a>
 80050ea:	781c      	ldrb	r4, [r3, #0]
 80050ec:	1c95      	adds	r5, r2, #2
 80050ee:	e7c2      	b.n	8005076 <_strtol_l.constprop.0+0x3a>
 80050f0:	0021      	movs	r1, r4
 80050f2:	3941      	subs	r1, #65	; 0x41
 80050f4:	2919      	cmp	r1, #25
 80050f6:	d801      	bhi.n	80050fc <_strtol_l.constprop.0+0xc0>
 80050f8:	3c37      	subs	r4, #55	; 0x37
 80050fa:	e7dc      	b.n	80050b6 <_strtol_l.constprop.0+0x7a>
 80050fc:	0021      	movs	r1, r4
 80050fe:	3961      	subs	r1, #97	; 0x61
 8005100:	2919      	cmp	r1, #25
 8005102:	d803      	bhi.n	800510c <_strtol_l.constprop.0+0xd0>
 8005104:	3c57      	subs	r4, #87	; 0x57
 8005106:	e7d6      	b.n	80050b6 <_strtol_l.constprop.0+0x7a>
 8005108:	0013      	movs	r3, r2
 800510a:	e7e2      	b.n	80050d2 <_strtol_l.constprop.0+0x96>
 800510c:	2b00      	cmp	r3, #0
 800510e:	da09      	bge.n	8005124 <_strtol_l.constprop.0+0xe8>
 8005110:	2322      	movs	r3, #34	; 0x22
 8005112:	9a05      	ldr	r2, [sp, #20]
 8005114:	9803      	ldr	r0, [sp, #12]
 8005116:	6013      	str	r3, [r2, #0]
 8005118:	9b02      	ldr	r3, [sp, #8]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d0e1      	beq.n	80050e2 <_strtol_l.constprop.0+0xa6>
 800511e:	1e6b      	subs	r3, r5, #1
 8005120:	9301      	str	r3, [sp, #4]
 8005122:	e007      	b.n	8005134 <_strtol_l.constprop.0+0xf8>
 8005124:	2f00      	cmp	r7, #0
 8005126:	d000      	beq.n	800512a <_strtol_l.constprop.0+0xee>
 8005128:	4240      	negs	r0, r0
 800512a:	9a02      	ldr	r2, [sp, #8]
 800512c:	2a00      	cmp	r2, #0
 800512e:	d0d8      	beq.n	80050e2 <_strtol_l.constprop.0+0xa6>
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1f4      	bne.n	800511e <_strtol_l.constprop.0+0xe2>
 8005134:	9b02      	ldr	r3, [sp, #8]
 8005136:	9a01      	ldr	r2, [sp, #4]
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	e7d2      	b.n	80050e2 <_strtol_l.constprop.0+0xa6>
 800513c:	2430      	movs	r4, #48	; 0x30
 800513e:	2e00      	cmp	r6, #0
 8005140:	d1a7      	bne.n	8005092 <_strtol_l.constprop.0+0x56>
 8005142:	3608      	adds	r6, #8
 8005144:	e7a5      	b.n	8005092 <_strtol_l.constprop.0+0x56>
 8005146:	2c30      	cmp	r4, #48	; 0x30
 8005148:	d09b      	beq.n	8005082 <_strtol_l.constprop.0+0x46>
 800514a:	260a      	movs	r6, #10
 800514c:	e7a1      	b.n	8005092 <_strtol_l.constprop.0+0x56>
 800514e:	46c0      	nop			; (mov r8, r8)
 8005150:	08005730 	.word	0x08005730
 8005154:	7fffffff 	.word	0x7fffffff

08005158 <_strtol_r>:
 8005158:	b510      	push	{r4, lr}
 800515a:	f7ff ff6f 	bl	800503c <_strtol_l.constprop.0>
 800515e:	bd10      	pop	{r4, pc}

08005160 <_strtoul_l.constprop.0>:
 8005160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005162:	b087      	sub	sp, #28
 8005164:	9202      	str	r2, [sp, #8]
 8005166:	4a42      	ldr	r2, [pc, #264]	; (8005270 <_strtoul_l.constprop.0+0x110>)
 8005168:	001e      	movs	r6, r3
 800516a:	9101      	str	r1, [sp, #4]
 800516c:	000b      	movs	r3, r1
 800516e:	4694      	mov	ip, r2
 8005170:	2108      	movs	r1, #8
 8005172:	9005      	str	r0, [sp, #20]
 8005174:	001a      	movs	r2, r3
 8005176:	4660      	mov	r0, ip
 8005178:	7814      	ldrb	r4, [r2, #0]
 800517a:	3301      	adds	r3, #1
 800517c:	5d00      	ldrb	r0, [r0, r4]
 800517e:	001d      	movs	r5, r3
 8005180:	0007      	movs	r7, r0
 8005182:	400f      	ands	r7, r1
 8005184:	4208      	tst	r0, r1
 8005186:	d1f5      	bne.n	8005174 <_strtoul_l.constprop.0+0x14>
 8005188:	2c2d      	cmp	r4, #45	; 0x2d
 800518a:	d13a      	bne.n	8005202 <_strtoul_l.constprop.0+0xa2>
 800518c:	2701      	movs	r7, #1
 800518e:	781c      	ldrb	r4, [r3, #0]
 8005190:	1c95      	adds	r5, r2, #2
 8005192:	2e00      	cmp	r6, #0
 8005194:	d067      	beq.n	8005266 <_strtoul_l.constprop.0+0x106>
 8005196:	2e10      	cmp	r6, #16
 8005198:	d109      	bne.n	80051ae <_strtoul_l.constprop.0+0x4e>
 800519a:	2c30      	cmp	r4, #48	; 0x30
 800519c:	d107      	bne.n	80051ae <_strtoul_l.constprop.0+0x4e>
 800519e:	2220      	movs	r2, #32
 80051a0:	782b      	ldrb	r3, [r5, #0]
 80051a2:	4393      	bics	r3, r2
 80051a4:	2b58      	cmp	r3, #88	; 0x58
 80051a6:	d159      	bne.n	800525c <_strtoul_l.constprop.0+0xfc>
 80051a8:	2610      	movs	r6, #16
 80051aa:	786c      	ldrb	r4, [r5, #1]
 80051ac:	3502      	adds	r5, #2
 80051ae:	2001      	movs	r0, #1
 80051b0:	0031      	movs	r1, r6
 80051b2:	4240      	negs	r0, r0
 80051b4:	f7fa ffba 	bl	800012c <__udivsi3>
 80051b8:	9003      	str	r0, [sp, #12]
 80051ba:	2001      	movs	r0, #1
 80051bc:	0031      	movs	r1, r6
 80051be:	4240      	negs	r0, r0
 80051c0:	f7fb f83a 	bl	8000238 <__aeabi_uidivmod>
 80051c4:	2300      	movs	r3, #0
 80051c6:	9104      	str	r1, [sp, #16]
 80051c8:	2101      	movs	r1, #1
 80051ca:	2201      	movs	r2, #1
 80051cc:	0018      	movs	r0, r3
 80051ce:	468c      	mov	ip, r1
 80051d0:	4252      	negs	r2, r2
 80051d2:	0021      	movs	r1, r4
 80051d4:	3930      	subs	r1, #48	; 0x30
 80051d6:	2909      	cmp	r1, #9
 80051d8:	d818      	bhi.n	800520c <_strtoul_l.constprop.0+0xac>
 80051da:	000c      	movs	r4, r1
 80051dc:	42a6      	cmp	r6, r4
 80051de:	dd23      	ble.n	8005228 <_strtoul_l.constprop.0+0xc8>
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	db1f      	blt.n	8005224 <_strtoul_l.constprop.0+0xc4>
 80051e4:	9903      	ldr	r1, [sp, #12]
 80051e6:	0013      	movs	r3, r2
 80051e8:	4281      	cmp	r1, r0
 80051ea:	d307      	bcc.n	80051fc <_strtoul_l.constprop.0+0x9c>
 80051ec:	d103      	bne.n	80051f6 <_strtoul_l.constprop.0+0x96>
 80051ee:	9904      	ldr	r1, [sp, #16]
 80051f0:	0013      	movs	r3, r2
 80051f2:	42a1      	cmp	r1, r4
 80051f4:	db02      	blt.n	80051fc <_strtoul_l.constprop.0+0x9c>
 80051f6:	4663      	mov	r3, ip
 80051f8:	4370      	muls	r0, r6
 80051fa:	1820      	adds	r0, r4, r0
 80051fc:	782c      	ldrb	r4, [r5, #0]
 80051fe:	3501      	adds	r5, #1
 8005200:	e7e7      	b.n	80051d2 <_strtoul_l.constprop.0+0x72>
 8005202:	2c2b      	cmp	r4, #43	; 0x2b
 8005204:	d1c5      	bne.n	8005192 <_strtoul_l.constprop.0+0x32>
 8005206:	781c      	ldrb	r4, [r3, #0]
 8005208:	1c95      	adds	r5, r2, #2
 800520a:	e7c2      	b.n	8005192 <_strtoul_l.constprop.0+0x32>
 800520c:	0021      	movs	r1, r4
 800520e:	3941      	subs	r1, #65	; 0x41
 8005210:	2919      	cmp	r1, #25
 8005212:	d801      	bhi.n	8005218 <_strtoul_l.constprop.0+0xb8>
 8005214:	3c37      	subs	r4, #55	; 0x37
 8005216:	e7e1      	b.n	80051dc <_strtoul_l.constprop.0+0x7c>
 8005218:	0021      	movs	r1, r4
 800521a:	3961      	subs	r1, #97	; 0x61
 800521c:	2919      	cmp	r1, #25
 800521e:	d803      	bhi.n	8005228 <_strtoul_l.constprop.0+0xc8>
 8005220:	3c57      	subs	r4, #87	; 0x57
 8005222:	e7db      	b.n	80051dc <_strtoul_l.constprop.0+0x7c>
 8005224:	0013      	movs	r3, r2
 8005226:	e7e9      	b.n	80051fc <_strtoul_l.constprop.0+0x9c>
 8005228:	2b00      	cmp	r3, #0
 800522a:	da09      	bge.n	8005240 <_strtoul_l.constprop.0+0xe0>
 800522c:	2322      	movs	r3, #34	; 0x22
 800522e:	2001      	movs	r0, #1
 8005230:	9a05      	ldr	r2, [sp, #20]
 8005232:	4240      	negs	r0, r0
 8005234:	6013      	str	r3, [r2, #0]
 8005236:	9b02      	ldr	r3, [sp, #8]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d109      	bne.n	8005250 <_strtoul_l.constprop.0+0xf0>
 800523c:	b007      	add	sp, #28
 800523e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005240:	2f00      	cmp	r7, #0
 8005242:	d000      	beq.n	8005246 <_strtoul_l.constprop.0+0xe6>
 8005244:	4240      	negs	r0, r0
 8005246:	9a02      	ldr	r2, [sp, #8]
 8005248:	2a00      	cmp	r2, #0
 800524a:	d0f7      	beq.n	800523c <_strtoul_l.constprop.0+0xdc>
 800524c:	2b00      	cmp	r3, #0
 800524e:	d001      	beq.n	8005254 <_strtoul_l.constprop.0+0xf4>
 8005250:	1e6b      	subs	r3, r5, #1
 8005252:	9301      	str	r3, [sp, #4]
 8005254:	9b02      	ldr	r3, [sp, #8]
 8005256:	9a01      	ldr	r2, [sp, #4]
 8005258:	601a      	str	r2, [r3, #0]
 800525a:	e7ef      	b.n	800523c <_strtoul_l.constprop.0+0xdc>
 800525c:	2430      	movs	r4, #48	; 0x30
 800525e:	2e00      	cmp	r6, #0
 8005260:	d1a5      	bne.n	80051ae <_strtoul_l.constprop.0+0x4e>
 8005262:	3608      	adds	r6, #8
 8005264:	e7a3      	b.n	80051ae <_strtoul_l.constprop.0+0x4e>
 8005266:	2c30      	cmp	r4, #48	; 0x30
 8005268:	d099      	beq.n	800519e <_strtoul_l.constprop.0+0x3e>
 800526a:	260a      	movs	r6, #10
 800526c:	e79f      	b.n	80051ae <_strtoul_l.constprop.0+0x4e>
 800526e:	46c0      	nop			; (mov r8, r8)
 8005270:	08005730 	.word	0x08005730

08005274 <_strtoul_r>:
 8005274:	b510      	push	{r4, lr}
 8005276:	f7ff ff73 	bl	8005160 <_strtoul_l.constprop.0>
 800527a:	bd10      	pop	{r4, pc}

0800527c <__submore>:
 800527c:	000b      	movs	r3, r1
 800527e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005280:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8005282:	3344      	adds	r3, #68	; 0x44
 8005284:	000c      	movs	r4, r1
 8005286:	429d      	cmp	r5, r3
 8005288:	d11c      	bne.n	80052c4 <__submore+0x48>
 800528a:	2680      	movs	r6, #128	; 0x80
 800528c:	00f6      	lsls	r6, r6, #3
 800528e:	0031      	movs	r1, r6
 8005290:	f000 f8ac 	bl	80053ec <_malloc_r>
 8005294:	2800      	cmp	r0, #0
 8005296:	d102      	bne.n	800529e <__submore+0x22>
 8005298:	2001      	movs	r0, #1
 800529a:	4240      	negs	r0, r0
 800529c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800529e:	0023      	movs	r3, r4
 80052a0:	6360      	str	r0, [r4, #52]	; 0x34
 80052a2:	63a6      	str	r6, [r4, #56]	; 0x38
 80052a4:	3346      	adds	r3, #70	; 0x46
 80052a6:	781a      	ldrb	r2, [r3, #0]
 80052a8:	4b10      	ldr	r3, [pc, #64]	; (80052ec <__submore+0x70>)
 80052aa:	54c2      	strb	r2, [r0, r3]
 80052ac:	0023      	movs	r3, r4
 80052ae:	3345      	adds	r3, #69	; 0x45
 80052b0:	781a      	ldrb	r2, [r3, #0]
 80052b2:	4b0f      	ldr	r3, [pc, #60]	; (80052f0 <__submore+0x74>)
 80052b4:	54c2      	strb	r2, [r0, r3]
 80052b6:	782a      	ldrb	r2, [r5, #0]
 80052b8:	4b0e      	ldr	r3, [pc, #56]	; (80052f4 <__submore+0x78>)
 80052ba:	54c2      	strb	r2, [r0, r3]
 80052bc:	18c0      	adds	r0, r0, r3
 80052be:	6020      	str	r0, [r4, #0]
 80052c0:	2000      	movs	r0, #0
 80052c2:	e7eb      	b.n	800529c <__submore+0x20>
 80052c4:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 80052c6:	0029      	movs	r1, r5
 80052c8:	0073      	lsls	r3, r6, #1
 80052ca:	001a      	movs	r2, r3
 80052cc:	9301      	str	r3, [sp, #4]
 80052ce:	f000 f903 	bl	80054d8 <_realloc_r>
 80052d2:	1e05      	subs	r5, r0, #0
 80052d4:	d0e0      	beq.n	8005298 <__submore+0x1c>
 80052d6:	1987      	adds	r7, r0, r6
 80052d8:	0001      	movs	r1, r0
 80052da:	0032      	movs	r2, r6
 80052dc:	0038      	movs	r0, r7
 80052de:	f7ff fae7 	bl	80048b0 <memcpy>
 80052e2:	9b01      	ldr	r3, [sp, #4]
 80052e4:	6027      	str	r7, [r4, #0]
 80052e6:	6365      	str	r5, [r4, #52]	; 0x34
 80052e8:	63a3      	str	r3, [r4, #56]	; 0x38
 80052ea:	e7e9      	b.n	80052c0 <__submore+0x44>
 80052ec:	000003ff 	.word	0x000003ff
 80052f0:	000003fe 	.word	0x000003fe
 80052f4:	000003fd 	.word	0x000003fd

080052f8 <__retarget_lock_acquire_recursive>:
 80052f8:	4770      	bx	lr

080052fa <__retarget_lock_release_recursive>:
 80052fa:	4770      	bx	lr

080052fc <memchr>:
 80052fc:	b2c9      	uxtb	r1, r1
 80052fe:	1882      	adds	r2, r0, r2
 8005300:	4290      	cmp	r0, r2
 8005302:	d101      	bne.n	8005308 <memchr+0xc>
 8005304:	2000      	movs	r0, #0
 8005306:	4770      	bx	lr
 8005308:	7803      	ldrb	r3, [r0, #0]
 800530a:	428b      	cmp	r3, r1
 800530c:	d0fb      	beq.n	8005306 <memchr+0xa>
 800530e:	3001      	adds	r0, #1
 8005310:	e7f6      	b.n	8005300 <memchr+0x4>
	...

08005314 <_free_r>:
 8005314:	b570      	push	{r4, r5, r6, lr}
 8005316:	0005      	movs	r5, r0
 8005318:	2900      	cmp	r1, #0
 800531a:	d010      	beq.n	800533e <_free_r+0x2a>
 800531c:	1f0c      	subs	r4, r1, #4
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	da00      	bge.n	8005326 <_free_r+0x12>
 8005324:	18e4      	adds	r4, r4, r3
 8005326:	0028      	movs	r0, r5
 8005328:	f000 f918 	bl	800555c <__malloc_lock>
 800532c:	4a1d      	ldr	r2, [pc, #116]	; (80053a4 <_free_r+0x90>)
 800532e:	6813      	ldr	r3, [r2, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d105      	bne.n	8005340 <_free_r+0x2c>
 8005334:	6063      	str	r3, [r4, #4]
 8005336:	6014      	str	r4, [r2, #0]
 8005338:	0028      	movs	r0, r5
 800533a:	f000 f917 	bl	800556c <__malloc_unlock>
 800533e:	bd70      	pop	{r4, r5, r6, pc}
 8005340:	42a3      	cmp	r3, r4
 8005342:	d908      	bls.n	8005356 <_free_r+0x42>
 8005344:	6821      	ldr	r1, [r4, #0]
 8005346:	1860      	adds	r0, r4, r1
 8005348:	4283      	cmp	r3, r0
 800534a:	d1f3      	bne.n	8005334 <_free_r+0x20>
 800534c:	6818      	ldr	r0, [r3, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	1841      	adds	r1, r0, r1
 8005352:	6021      	str	r1, [r4, #0]
 8005354:	e7ee      	b.n	8005334 <_free_r+0x20>
 8005356:	001a      	movs	r2, r3
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d001      	beq.n	8005362 <_free_r+0x4e>
 800535e:	42a3      	cmp	r3, r4
 8005360:	d9f9      	bls.n	8005356 <_free_r+0x42>
 8005362:	6811      	ldr	r1, [r2, #0]
 8005364:	1850      	adds	r0, r2, r1
 8005366:	42a0      	cmp	r0, r4
 8005368:	d10b      	bne.n	8005382 <_free_r+0x6e>
 800536a:	6820      	ldr	r0, [r4, #0]
 800536c:	1809      	adds	r1, r1, r0
 800536e:	1850      	adds	r0, r2, r1
 8005370:	6011      	str	r1, [r2, #0]
 8005372:	4283      	cmp	r3, r0
 8005374:	d1e0      	bne.n	8005338 <_free_r+0x24>
 8005376:	6818      	ldr	r0, [r3, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	1841      	adds	r1, r0, r1
 800537c:	6011      	str	r1, [r2, #0]
 800537e:	6053      	str	r3, [r2, #4]
 8005380:	e7da      	b.n	8005338 <_free_r+0x24>
 8005382:	42a0      	cmp	r0, r4
 8005384:	d902      	bls.n	800538c <_free_r+0x78>
 8005386:	230c      	movs	r3, #12
 8005388:	602b      	str	r3, [r5, #0]
 800538a:	e7d5      	b.n	8005338 <_free_r+0x24>
 800538c:	6821      	ldr	r1, [r4, #0]
 800538e:	1860      	adds	r0, r4, r1
 8005390:	4283      	cmp	r3, r0
 8005392:	d103      	bne.n	800539c <_free_r+0x88>
 8005394:	6818      	ldr	r0, [r3, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	1841      	adds	r1, r0, r1
 800539a:	6021      	str	r1, [r4, #0]
 800539c:	6063      	str	r3, [r4, #4]
 800539e:	6054      	str	r4, [r2, #4]
 80053a0:	e7ca      	b.n	8005338 <_free_r+0x24>
 80053a2:	46c0      	nop			; (mov r8, r8)
 80053a4:	200007d0 	.word	0x200007d0

080053a8 <sbrk_aligned>:
 80053a8:	b570      	push	{r4, r5, r6, lr}
 80053aa:	4e0f      	ldr	r6, [pc, #60]	; (80053e8 <sbrk_aligned+0x40>)
 80053ac:	000d      	movs	r5, r1
 80053ae:	6831      	ldr	r1, [r6, #0]
 80053b0:	0004      	movs	r4, r0
 80053b2:	2900      	cmp	r1, #0
 80053b4:	d102      	bne.n	80053bc <sbrk_aligned+0x14>
 80053b6:	f000 f8bf 	bl	8005538 <_sbrk_r>
 80053ba:	6030      	str	r0, [r6, #0]
 80053bc:	0029      	movs	r1, r5
 80053be:	0020      	movs	r0, r4
 80053c0:	f000 f8ba 	bl	8005538 <_sbrk_r>
 80053c4:	1c43      	adds	r3, r0, #1
 80053c6:	d00a      	beq.n	80053de <sbrk_aligned+0x36>
 80053c8:	2303      	movs	r3, #3
 80053ca:	1cc5      	adds	r5, r0, #3
 80053cc:	439d      	bics	r5, r3
 80053ce:	42a8      	cmp	r0, r5
 80053d0:	d007      	beq.n	80053e2 <sbrk_aligned+0x3a>
 80053d2:	1a29      	subs	r1, r5, r0
 80053d4:	0020      	movs	r0, r4
 80053d6:	f000 f8af 	bl	8005538 <_sbrk_r>
 80053da:	1c43      	adds	r3, r0, #1
 80053dc:	d101      	bne.n	80053e2 <sbrk_aligned+0x3a>
 80053de:	2501      	movs	r5, #1
 80053e0:	426d      	negs	r5, r5
 80053e2:	0028      	movs	r0, r5
 80053e4:	bd70      	pop	{r4, r5, r6, pc}
 80053e6:	46c0      	nop			; (mov r8, r8)
 80053e8:	200007d4 	.word	0x200007d4

080053ec <_malloc_r>:
 80053ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053ee:	2203      	movs	r2, #3
 80053f0:	1ccb      	adds	r3, r1, #3
 80053f2:	4393      	bics	r3, r2
 80053f4:	3308      	adds	r3, #8
 80053f6:	0006      	movs	r6, r0
 80053f8:	001f      	movs	r7, r3
 80053fa:	2b0c      	cmp	r3, #12
 80053fc:	d232      	bcs.n	8005464 <_malloc_r+0x78>
 80053fe:	270c      	movs	r7, #12
 8005400:	42b9      	cmp	r1, r7
 8005402:	d831      	bhi.n	8005468 <_malloc_r+0x7c>
 8005404:	0030      	movs	r0, r6
 8005406:	f000 f8a9 	bl	800555c <__malloc_lock>
 800540a:	4d32      	ldr	r5, [pc, #200]	; (80054d4 <_malloc_r+0xe8>)
 800540c:	682b      	ldr	r3, [r5, #0]
 800540e:	001c      	movs	r4, r3
 8005410:	2c00      	cmp	r4, #0
 8005412:	d12e      	bne.n	8005472 <_malloc_r+0x86>
 8005414:	0039      	movs	r1, r7
 8005416:	0030      	movs	r0, r6
 8005418:	f7ff ffc6 	bl	80053a8 <sbrk_aligned>
 800541c:	0004      	movs	r4, r0
 800541e:	1c43      	adds	r3, r0, #1
 8005420:	d11e      	bne.n	8005460 <_malloc_r+0x74>
 8005422:	682c      	ldr	r4, [r5, #0]
 8005424:	0025      	movs	r5, r4
 8005426:	2d00      	cmp	r5, #0
 8005428:	d14a      	bne.n	80054c0 <_malloc_r+0xd4>
 800542a:	6823      	ldr	r3, [r4, #0]
 800542c:	0029      	movs	r1, r5
 800542e:	18e3      	adds	r3, r4, r3
 8005430:	0030      	movs	r0, r6
 8005432:	9301      	str	r3, [sp, #4]
 8005434:	f000 f880 	bl	8005538 <_sbrk_r>
 8005438:	9b01      	ldr	r3, [sp, #4]
 800543a:	4283      	cmp	r3, r0
 800543c:	d143      	bne.n	80054c6 <_malloc_r+0xda>
 800543e:	6823      	ldr	r3, [r4, #0]
 8005440:	3703      	adds	r7, #3
 8005442:	1aff      	subs	r7, r7, r3
 8005444:	2303      	movs	r3, #3
 8005446:	439f      	bics	r7, r3
 8005448:	3708      	adds	r7, #8
 800544a:	2f0c      	cmp	r7, #12
 800544c:	d200      	bcs.n	8005450 <_malloc_r+0x64>
 800544e:	270c      	movs	r7, #12
 8005450:	0039      	movs	r1, r7
 8005452:	0030      	movs	r0, r6
 8005454:	f7ff ffa8 	bl	80053a8 <sbrk_aligned>
 8005458:	1c43      	adds	r3, r0, #1
 800545a:	d034      	beq.n	80054c6 <_malloc_r+0xda>
 800545c:	6823      	ldr	r3, [r4, #0]
 800545e:	19df      	adds	r7, r3, r7
 8005460:	6027      	str	r7, [r4, #0]
 8005462:	e013      	b.n	800548c <_malloc_r+0xa0>
 8005464:	2b00      	cmp	r3, #0
 8005466:	dacb      	bge.n	8005400 <_malloc_r+0x14>
 8005468:	230c      	movs	r3, #12
 800546a:	2500      	movs	r5, #0
 800546c:	6033      	str	r3, [r6, #0]
 800546e:	0028      	movs	r0, r5
 8005470:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005472:	6822      	ldr	r2, [r4, #0]
 8005474:	1bd1      	subs	r1, r2, r7
 8005476:	d420      	bmi.n	80054ba <_malloc_r+0xce>
 8005478:	290b      	cmp	r1, #11
 800547a:	d917      	bls.n	80054ac <_malloc_r+0xc0>
 800547c:	19e2      	adds	r2, r4, r7
 800547e:	6027      	str	r7, [r4, #0]
 8005480:	42a3      	cmp	r3, r4
 8005482:	d111      	bne.n	80054a8 <_malloc_r+0xbc>
 8005484:	602a      	str	r2, [r5, #0]
 8005486:	6863      	ldr	r3, [r4, #4]
 8005488:	6011      	str	r1, [r2, #0]
 800548a:	6053      	str	r3, [r2, #4]
 800548c:	0030      	movs	r0, r6
 800548e:	0025      	movs	r5, r4
 8005490:	f000 f86c 	bl	800556c <__malloc_unlock>
 8005494:	2207      	movs	r2, #7
 8005496:	350b      	adds	r5, #11
 8005498:	1d23      	adds	r3, r4, #4
 800549a:	4395      	bics	r5, r2
 800549c:	1aea      	subs	r2, r5, r3
 800549e:	429d      	cmp	r5, r3
 80054a0:	d0e5      	beq.n	800546e <_malloc_r+0x82>
 80054a2:	1b5b      	subs	r3, r3, r5
 80054a4:	50a3      	str	r3, [r4, r2]
 80054a6:	e7e2      	b.n	800546e <_malloc_r+0x82>
 80054a8:	605a      	str	r2, [r3, #4]
 80054aa:	e7ec      	b.n	8005486 <_malloc_r+0x9a>
 80054ac:	6862      	ldr	r2, [r4, #4]
 80054ae:	42a3      	cmp	r3, r4
 80054b0:	d101      	bne.n	80054b6 <_malloc_r+0xca>
 80054b2:	602a      	str	r2, [r5, #0]
 80054b4:	e7ea      	b.n	800548c <_malloc_r+0xa0>
 80054b6:	605a      	str	r2, [r3, #4]
 80054b8:	e7e8      	b.n	800548c <_malloc_r+0xa0>
 80054ba:	0023      	movs	r3, r4
 80054bc:	6864      	ldr	r4, [r4, #4]
 80054be:	e7a7      	b.n	8005410 <_malloc_r+0x24>
 80054c0:	002c      	movs	r4, r5
 80054c2:	686d      	ldr	r5, [r5, #4]
 80054c4:	e7af      	b.n	8005426 <_malloc_r+0x3a>
 80054c6:	230c      	movs	r3, #12
 80054c8:	0030      	movs	r0, r6
 80054ca:	6033      	str	r3, [r6, #0]
 80054cc:	f000 f84e 	bl	800556c <__malloc_unlock>
 80054d0:	e7cd      	b.n	800546e <_malloc_r+0x82>
 80054d2:	46c0      	nop			; (mov r8, r8)
 80054d4:	200007d0 	.word	0x200007d0

080054d8 <_realloc_r>:
 80054d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054da:	0007      	movs	r7, r0
 80054dc:	000e      	movs	r6, r1
 80054de:	0014      	movs	r4, r2
 80054e0:	2900      	cmp	r1, #0
 80054e2:	d105      	bne.n	80054f0 <_realloc_r+0x18>
 80054e4:	0011      	movs	r1, r2
 80054e6:	f7ff ff81 	bl	80053ec <_malloc_r>
 80054ea:	0005      	movs	r5, r0
 80054ec:	0028      	movs	r0, r5
 80054ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80054f0:	2a00      	cmp	r2, #0
 80054f2:	d103      	bne.n	80054fc <_realloc_r+0x24>
 80054f4:	f7ff ff0e 	bl	8005314 <_free_r>
 80054f8:	0025      	movs	r5, r4
 80054fa:	e7f7      	b.n	80054ec <_realloc_r+0x14>
 80054fc:	f000 f83e 	bl	800557c <_malloc_usable_size_r>
 8005500:	9001      	str	r0, [sp, #4]
 8005502:	4284      	cmp	r4, r0
 8005504:	d803      	bhi.n	800550e <_realloc_r+0x36>
 8005506:	0035      	movs	r5, r6
 8005508:	0843      	lsrs	r3, r0, #1
 800550a:	42a3      	cmp	r3, r4
 800550c:	d3ee      	bcc.n	80054ec <_realloc_r+0x14>
 800550e:	0021      	movs	r1, r4
 8005510:	0038      	movs	r0, r7
 8005512:	f7ff ff6b 	bl	80053ec <_malloc_r>
 8005516:	1e05      	subs	r5, r0, #0
 8005518:	d0e8      	beq.n	80054ec <_realloc_r+0x14>
 800551a:	9b01      	ldr	r3, [sp, #4]
 800551c:	0022      	movs	r2, r4
 800551e:	429c      	cmp	r4, r3
 8005520:	d900      	bls.n	8005524 <_realloc_r+0x4c>
 8005522:	001a      	movs	r2, r3
 8005524:	0031      	movs	r1, r6
 8005526:	0028      	movs	r0, r5
 8005528:	f7ff f9c2 	bl	80048b0 <memcpy>
 800552c:	0031      	movs	r1, r6
 800552e:	0038      	movs	r0, r7
 8005530:	f7ff fef0 	bl	8005314 <_free_r>
 8005534:	e7da      	b.n	80054ec <_realloc_r+0x14>
	...

08005538 <_sbrk_r>:
 8005538:	2300      	movs	r3, #0
 800553a:	b570      	push	{r4, r5, r6, lr}
 800553c:	4d06      	ldr	r5, [pc, #24]	; (8005558 <_sbrk_r+0x20>)
 800553e:	0004      	movs	r4, r0
 8005540:	0008      	movs	r0, r1
 8005542:	602b      	str	r3, [r5, #0]
 8005544:	f7fb fbc8 	bl	8000cd8 <_sbrk>
 8005548:	1c43      	adds	r3, r0, #1
 800554a:	d103      	bne.n	8005554 <_sbrk_r+0x1c>
 800554c:	682b      	ldr	r3, [r5, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d000      	beq.n	8005554 <_sbrk_r+0x1c>
 8005552:	6023      	str	r3, [r4, #0]
 8005554:	bd70      	pop	{r4, r5, r6, pc}
 8005556:	46c0      	nop			; (mov r8, r8)
 8005558:	200007c8 	.word	0x200007c8

0800555c <__malloc_lock>:
 800555c:	b510      	push	{r4, lr}
 800555e:	4802      	ldr	r0, [pc, #8]	; (8005568 <__malloc_lock+0xc>)
 8005560:	f7ff feca 	bl	80052f8 <__retarget_lock_acquire_recursive>
 8005564:	bd10      	pop	{r4, pc}
 8005566:	46c0      	nop			; (mov r8, r8)
 8005568:	200007cc 	.word	0x200007cc

0800556c <__malloc_unlock>:
 800556c:	b510      	push	{r4, lr}
 800556e:	4802      	ldr	r0, [pc, #8]	; (8005578 <__malloc_unlock+0xc>)
 8005570:	f7ff fec3 	bl	80052fa <__retarget_lock_release_recursive>
 8005574:	bd10      	pop	{r4, pc}
 8005576:	46c0      	nop			; (mov r8, r8)
 8005578:	200007cc 	.word	0x200007cc

0800557c <_malloc_usable_size_r>:
 800557c:	1f0b      	subs	r3, r1, #4
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	1f18      	subs	r0, r3, #4
 8005582:	2b00      	cmp	r3, #0
 8005584:	da01      	bge.n	800558a <_malloc_usable_size_r+0xe>
 8005586:	580b      	ldr	r3, [r1, r0]
 8005588:	18c0      	adds	r0, r0, r3
 800558a:	4770      	bx	lr

0800558c <_init>:
 800558c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558e:	46c0      	nop			; (mov r8, r8)
 8005590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005592:	bc08      	pop	{r3}
 8005594:	469e      	mov	lr, r3
 8005596:	4770      	bx	lr

08005598 <_fini>:
 8005598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559a:	46c0      	nop			; (mov r8, r8)
 800559c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800559e:	bc08      	pop	{r3}
 80055a0:	469e      	mov	lr, r3
 80055a2:	4770      	bx	lr
